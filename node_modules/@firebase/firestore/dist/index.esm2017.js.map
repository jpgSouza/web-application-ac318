{"version":3,"file":"index.esm2017.js","sources":["../src/core/version.ts","../src/auth/user.ts","../src/util/error.ts","../src/api/credentials.ts","../src/api/timestamp.ts","../src/core/snapshot_version.ts","../src/model/path.ts","../src/model/document_key.ts","../src/util/obj.ts","../src/util/byte_string.ts","../src/util/types.ts","../src/model/server_timestamps.ts","../src/model/values.ts","../src/model/transform_operation.ts","../src/model/mutation.ts","../src/model/object_value.ts","../src/model/document.ts","../src/core/target.ts","../src/core/query.ts","../src/local/target_data.ts","../src/remote/existence_filter.ts","../src/remote/rpc_error.ts","../src/util/sorted_map.ts","../src/util/sorted_set.ts","../src/model/collections.ts","../src/model/document_set.ts","../src/core/view_snapshot.ts","../src/remote/remote_event.ts","../src/remote/watch_change.ts","../src/remote/serializer.ts","../src/platform/platform.ts","../src/util/log.ts","../src/util/assert.ts","../src/util/misc.ts","../src/core/database_info.ts","../src/util/obj_map.ts","../src/model/mutation_batch.ts","../src/local/persistence_promise.ts","../src/local/remote_document_change_buffer.ts","../src/local/persistence.ts","../src/local/local_documents_view.ts","../src/local/local_view_changes.ts","../src/core/listen_sequence.ts","../src/util/promise.ts","../src/remote/backoff.ts","../src/local/encoded_resource_path.ts","../src/local/memory_index_manager.ts","../src/local/indexeddb_index_manager.ts","../src/local/indexeddb_remote_document_cache.ts","../src/core/target_id_generator.ts","../src/local/indexeddb_target_cache.ts","../src/local/local_serializer.ts","../src/local/indexeddb_persistence.ts","../src/local/indexeddb_mutation_queue.ts","../src/local/indexeddb_schema.ts","../src/local/simple_db.ts","../src/util/async_queue.ts","../src/local/lru_garbage_collector.ts","../src/local/local_store.ts","../src/local/reference_set.ts","../src/util/input_validation.ts","../src/api/blob.ts","../src/api/field_path.ts","../src/api/field_value.ts","../src/api/geo_point.ts","../src/api/user_data_reader.ts","../src/remote/persistent_stream.ts","../src/remote/datastore.ts","../src/core/transaction.ts","../src/remote/online_state_tracker.ts","../src/remote/remote_store.ts","../src/local/shared_client_state_schema.ts","../src/local/shared_client_state.ts","../src/core/view.ts","../src/core/transaction_runner.ts","../src/core/sync_engine.ts","../src/core/event_manager.ts","../src/local/index_free_query_engine.ts","../src/local/memory_mutation_queue.ts","../src/local/memory_remote_document_cache.ts","../src/local/memory_target_cache.ts","../src/local/memory_persistence.ts","../src/core/component_provider.ts","../src/core/firestore_client.ts","../src/util/async_observer.ts","../src/api/observer.ts","../src/api/user_data_writer.ts","../src/api/database.ts","../src/util/api.ts","../src/platform/config.ts","../src/remote/connectivity_monitor_noop.ts","../src/platform_browser/browser_connectivity_monitor.ts","../src/remote/stream_bridge.ts","../src/platform_browser/webchannel_connection.ts","../index.ts","../src/platform_browser/browser_init.ts","../src/platform_browser/browser_platform.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport firebase from '@firebase/app';\n\n/** The semver (www.semver.org) version of the SDK. */\nexport const SDK_VERSION = firebase.SDK_VERSION;\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Simple wrapper around a nullable UID. Mostly exists to make code more\n * readable.\n */\nexport class User {\n  /** A user with a null UID. */\n  static readonly UNAUTHENTICATED = new User(null);\n\n  // TODO(mikelehen): Look into getting a proper uid-equivalent for\n  // non-FirebaseAuth providers.\n  static readonly GOOGLE_CREDENTIALS = new User('google-credentials-uid');\n  static readonly FIRST_PARTY = new User('first-party-uid');\n\n  constructor(readonly uid: string | null) {}\n\n  isAuthenticated(): boolean {\n    return this.uid != null;\n  }\n\n  /**\n   * Returns a key representing this user, suitable for inclusion in a\n   * dictionary.\n   */\n  toKey(): string {\n    if (this.isAuthenticated()) {\n      return 'uid:' + this.uid;\n    } else {\n      return 'anonymous-user';\n    }\n  }\n\n  isEqual(otherUser: User): boolean {\n    return otherUser.uid === this.uid;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as firestore from '@firebase/firestore-types';\n\n/**\n * Error Codes describing the different ways Firestore can fail. These come\n * directly from GRPC.\n */\nexport type Code = firestore.FirestoreErrorCode;\n\nexport const Code = {\n  // Causes are copied from:\n  // https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h\n  /** Not an error; returned on success. */\n  OK: 'ok' as Code,\n\n  /** The operation was cancelled (typically by the caller). */\n  CANCELLED: 'cancelled' as Code,\n\n  /** Unknown error or an error from a different error domain. */\n  UNKNOWN: 'unknown' as Code,\n\n  /**\n   * Client specified an invalid argument. Note that this differs from\n   * FAILED_PRECONDITION. INVALID_ARGUMENT indicates arguments that are\n   * problematic regardless of the state of the system (e.g., a malformed file\n   * name).\n   */\n  INVALID_ARGUMENT: 'invalid-argument' as Code,\n\n  /**\n   * Deadline expired before operation could complete. For operations that\n   * change the state of the system, this error may be returned even if the\n   * operation has completed successfully. For example, a successful response\n   * from a server could have been delayed long enough for the deadline to\n   * expire.\n   */\n  DEADLINE_EXCEEDED: 'deadline-exceeded' as Code,\n\n  /** Some requested entity (e.g., file or directory) was not found. */\n  NOT_FOUND: 'not-found' as Code,\n\n  /**\n   * Some entity that we attempted to create (e.g., file or directory) already\n   * exists.\n   */\n  ALREADY_EXISTS: 'already-exists' as Code,\n\n  /**\n   * The caller does not have permission to execute the specified operation.\n   * PERMISSION_DENIED must not be used for rejections caused by exhausting\n   * some resource (use RESOURCE_EXHAUSTED instead for those errors).\n   * PERMISSION_DENIED must not be used if the caller can not be identified\n   * (use UNAUTHENTICATED instead for those errors).\n   */\n  PERMISSION_DENIED: 'permission-denied' as Code,\n\n  /**\n   * The request does not have valid authentication credentials for the\n   * operation.\n   */\n  UNAUTHENTICATED: 'unauthenticated' as Code,\n\n  /**\n   * Some resource has been exhausted, perhaps a per-user quota, or perhaps the\n   * entire file system is out of space.\n   */\n  RESOURCE_EXHAUSTED: 'resource-exhausted' as Code,\n\n  /**\n   * Operation was rejected because the system is not in a state required for\n   * the operation's execution. For example, directory to be deleted may be\n   * non-empty, an rmdir operation is applied to a non-directory, etc.\n   *\n   * A litmus test that may help a service implementor in deciding\n   * between FAILED_PRECONDITION, ABORTED, and UNAVAILABLE:\n   *  (a) Use UNAVAILABLE if the client can retry just the failing call.\n   *  (b) Use ABORTED if the client should retry at a higher-level\n   *      (e.g., restarting a read-modify-write sequence).\n   *  (c) Use FAILED_PRECONDITION if the client should not retry until\n   *      the system state has been explicitly fixed. E.g., if an \"rmdir\"\n   *      fails because the directory is non-empty, FAILED_PRECONDITION\n   *      should be returned since the client should not retry unless\n   *      they have first fixed up the directory by deleting files from it.\n   *  (d) Use FAILED_PRECONDITION if the client performs conditional\n   *      REST Get/Update/Delete on a resource and the resource on the\n   *      server does not match the condition. E.g., conflicting\n   *      read-modify-write on the same resource.\n   */\n  FAILED_PRECONDITION: 'failed-precondition' as Code,\n\n  /**\n   * The operation was aborted, typically due to a concurrency issue like\n   * sequencer check failures, transaction aborts, etc.\n   *\n   * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,\n   * and UNAVAILABLE.\n   */\n  ABORTED: 'aborted' as Code,\n\n  /**\n   * Operation was attempted past the valid range. E.g., seeking or reading\n   * past end of file.\n   *\n   * Unlike INVALID_ARGUMENT, this error indicates a problem that may be fixed\n   * if the system state changes. For example, a 32-bit file system will\n   * generate INVALID_ARGUMENT if asked to read at an offset that is not in the\n   * range [0,2^32-1], but it will generate OUT_OF_RANGE if asked to read from\n   * an offset past the current file size.\n   *\n   * There is a fair bit of overlap between FAILED_PRECONDITION and\n   * OUT_OF_RANGE. We recommend using OUT_OF_RANGE (the more specific error)\n   * when it applies so that callers who are iterating through a space can\n   * easily look for an OUT_OF_RANGE error to detect when they are done.\n   */\n  OUT_OF_RANGE: 'out-of-range' as Code,\n\n  /** Operation is not implemented or not supported/enabled in this service. */\n  UNIMPLEMENTED: 'unimplemented' as Code,\n\n  /**\n   * Internal errors. Means some invariants expected by underlying System has\n   * been broken. If you see one of these errors, Something is very broken.\n   */\n  INTERNAL: 'internal' as Code,\n\n  /**\n   * The service is currently unavailable. This is a most likely a transient\n   * condition and may be corrected by retrying with a backoff.\n   *\n   * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,\n   * and UNAVAILABLE.\n   */\n  UNAVAILABLE: 'unavailable' as Code,\n\n  /** Unrecoverable data loss or corruption. */\n  DATA_LOSS: 'data-loss' as Code\n};\n\n/**\n * An error class used for Firestore-generated errors. Ideally we should be\n * using FirebaseError, but integrating with it is overly arduous at the moment,\n * so we define our own compatible error class (with a `name` of 'FirebaseError'\n * and compatible `code` and `message` fields.)\n */\nexport class FirestoreError extends Error implements firestore.FirestoreError {\n  name = 'FirebaseError';\n  stack?: string;\n\n  constructor(readonly code: Code, readonly message: string) {\n    super(message);\n\n    // HACK: We write a toString property directly because Error is not a real\n    // class and so inheritance does not work correctly. We could alternatively\n    // do the same \"back-door inheritance\" trick that FirebaseError does.\n    this.toString = () => `${this.name}: [code=${this.code}]: ${this.message}`;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { User } from '../auth/user';\nimport { hardAssert, debugAssert } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\nimport {\n  FirebaseAuthInternal,\n  FirebaseAuthInternalName\n} from '@firebase/auth-interop-types';\nimport { Provider } from '@firebase/component';\nimport { logDebug } from '../util/log';\n\n// TODO(mikelehen): This should be split into multiple files and probably\n// moved to an auth/ folder to match other platforms.\n\nexport interface FirstPartyCredentialsSettings {\n  type: 'gapi';\n  client: unknown;\n  sessionIndex: string;\n}\n\nexport interface ProviderCredentialsSettings {\n  type: 'provider';\n  client: CredentialsProvider;\n}\n\n/** Settings for private credentials */\nexport type CredentialsSettings =\n  | FirstPartyCredentialsSettings\n  | ProviderCredentialsSettings;\n\nexport type TokenType = 'OAuth' | 'FirstParty';\nexport interface Token {\n  /** Type of token. */\n  type: TokenType;\n\n  /**\n   * The user with which the token is associated (used for persisting user\n   * state on disk, etc.).\n   */\n  user: User;\n\n  /** Extra header values to be passed along with a request */\n  authHeaders: { [header: string]: string };\n}\n\nexport class OAuthToken implements Token {\n  type = 'OAuth' as TokenType;\n  authHeaders: { [header: string]: string };\n  constructor(value: string, public user: User) {\n    this.authHeaders = {};\n    // Set the headers using Object Literal notation to avoid minification\n    this.authHeaders['Authorization'] = `Bearer ${value}`;\n  }\n}\n\n/**\n * A Listener for credential change events. The listener should fetch a new\n * token and may need to invalidate other state if the current user has also\n * changed.\n */\nexport type CredentialChangeListener = (user: User) => void;\n\n/**\n * Provides methods for getting the uid and token for the current user and\n * listening for changes.\n */\nexport interface CredentialsProvider {\n  /** Requests a token for the current user. */\n  getToken(): Promise<Token | null>;\n\n  /**\n   * Marks the last retrieved token as invalid, making the next GetToken request\n   * force-refresh the token.\n   */\n  invalidateToken(): void;\n\n  /**\n   * Specifies a listener to be notified of credential changes\n   * (sign-in / sign-out, token changes). It is immediately called once with the\n   * initial user.\n   */\n  setChangeListener(changeListener: CredentialChangeListener): void;\n\n  /** Removes the previously-set change listener. */\n  removeChangeListener(): void;\n}\n\n/** A CredentialsProvider that always yields an empty token. */\nexport class EmptyCredentialsProvider implements CredentialsProvider {\n  /**\n   * Stores the listener registered with setChangeListener()\n   * This isn't actually necessary since the UID never changes, but we use this\n   * to verify the listen contract is adhered to in tests.\n   */\n  private changeListener: CredentialChangeListener | null = null;\n\n  getToken(): Promise<Token | null> {\n    return Promise.resolve<Token | null>(null);\n  }\n\n  invalidateToken(): void {}\n\n  setChangeListener(changeListener: CredentialChangeListener): void {\n    debugAssert(\n      !this.changeListener,\n      'Can only call setChangeListener() once.'\n    );\n    this.changeListener = changeListener;\n    // Fire with initial user.\n    changeListener(User.UNAUTHENTICATED);\n  }\n\n  removeChangeListener(): void {\n    debugAssert(\n      this.changeListener !== null,\n      'removeChangeListener() when no listener registered'\n    );\n    this.changeListener = null;\n  }\n}\n\nexport class FirebaseCredentialsProvider implements CredentialsProvider {\n  /**\n   * The auth token listener registered with FirebaseApp, retained here so we\n   * can unregister it.\n   */\n  private tokenListener: ((token: string | null) => void) | null = null;\n\n  /** Tracks the current User. */\n  private currentUser: User = User.UNAUTHENTICATED;\n  private receivedInitialUser: boolean = false;\n\n  /**\n   * Counter used to detect if the token changed while a getToken request was\n   * outstanding.\n   */\n  private tokenCounter = 0;\n\n  /** The listener registered with setChangeListener(). */\n  private changeListener: CredentialChangeListener | null = null;\n\n  private forceRefresh = false;\n\n  private auth: FirebaseAuthInternal | null;\n\n  constructor(authProvider: Provider<FirebaseAuthInternalName>) {\n    this.tokenListener = () => {\n      this.tokenCounter++;\n      this.currentUser = this.getUser();\n      this.receivedInitialUser = true;\n      if (this.changeListener) {\n        this.changeListener(this.currentUser);\n      }\n    };\n\n    this.tokenCounter = 0;\n\n    this.auth = authProvider.getImmediate({ optional: true });\n\n    if (this.auth) {\n      this.auth.addAuthTokenListener(this.tokenListener!);\n    } else {\n      // if auth is not available, invoke tokenListener once with null token\n      this.tokenListener(null);\n      authProvider.get().then(\n        auth => {\n          this.auth = auth;\n          if (this.tokenListener) {\n            // tokenListener can be removed by removeChangeListener()\n            this.auth.addAuthTokenListener(this.tokenListener);\n          }\n        },\n        () => {\n          /* this.authProvider.get() never rejects */\n        }\n      );\n    }\n  }\n\n  getToken(): Promise<Token | null> {\n    debugAssert(\n      this.tokenListener != null,\n      'getToken cannot be called after listener removed.'\n    );\n\n    // Take note of the current value of the tokenCounter so that this method\n    // can fail (with an ABORTED error) if there is a token change while the\n    // request is outstanding.\n    const initialTokenCounter = this.tokenCounter;\n    const forceRefresh = this.forceRefresh;\n    this.forceRefresh = false;\n\n    if (!this.auth) {\n      return Promise.resolve(null);\n    }\n\n    return this.auth.getToken(forceRefresh).then(tokenData => {\n      // Cancel the request since the token changed while the request was\n      // outstanding so the response is potentially for a previous user (which\n      // user, we can't be sure).\n      if (this.tokenCounter !== initialTokenCounter) {\n        logDebug(\n          'FirebaseCredentialsProvider',\n          'getToken aborted due to token change.'\n        );\n        return this.getToken();\n      } else {\n        if (tokenData) {\n          hardAssert(\n            typeof tokenData.accessToken === 'string',\n            'Invalid tokenData returned from getToken():' + tokenData\n          );\n          return new OAuthToken(tokenData.accessToken, this.currentUser);\n        } else {\n          return null;\n        }\n      }\n    });\n  }\n\n  invalidateToken(): void {\n    this.forceRefresh = true;\n  }\n\n  setChangeListener(changeListener: CredentialChangeListener): void {\n    debugAssert(\n      !this.changeListener,\n      'Can only call setChangeListener() once.'\n    );\n    this.changeListener = changeListener;\n\n    // Fire the initial event\n    if (this.receivedInitialUser) {\n      changeListener(this.currentUser);\n    }\n  }\n\n  removeChangeListener(): void {\n    debugAssert(\n      this.tokenListener != null,\n      'removeChangeListener() called twice'\n    );\n    debugAssert(\n      this.changeListener !== null,\n      'removeChangeListener() called when no listener registered'\n    );\n\n    if (this.auth) {\n      this.auth.removeAuthTokenListener(this.tokenListener!);\n    }\n    this.tokenListener = null;\n    this.changeListener = null;\n  }\n\n  // Auth.getUid() can return null even with a user logged in. It is because\n  // getUid() is synchronous, but the auth code populating Uid is asynchronous.\n  // This method should only be called in the AuthTokenListener callback\n  // to guarantee to get the actual user.\n  private getUser(): User {\n    const currentUid = this.auth && this.auth.getUid();\n    hardAssert(\n      currentUid === null || typeof currentUid === 'string',\n      'Received invalid UID: ' + currentUid\n    );\n    return new User(currentUid);\n  }\n}\n\n// Manual type definition for the subset of Gapi we use.\ninterface Gapi {\n  auth: {\n    getAuthHeaderValueForFirstParty: (\n      userIdentifiers: Array<{ [key: string]: string }>\n    ) => string | null;\n  };\n}\n\n/*\n * FirstPartyToken provides a fresh token each time its value\n * is requested, because if the token is too old, requests will be rejected.\n * Technically this may no longer be necessary since the SDK should gracefully\n * recover from unauthenticated errors (see b/33147818 for context), but it's\n * safer to keep the implementation as-is.\n */\nexport class FirstPartyToken implements Token {\n  type = 'FirstParty' as TokenType;\n  user = User.FIRST_PARTY;\n\n  constructor(private gapi: Gapi, private sessionIndex: string) {}\n\n  get authHeaders(): { [header: string]: string } {\n    const headers: { [header: string]: string } = {\n      'X-Goog-AuthUser': this.sessionIndex\n    };\n    const authHeader = this.gapi.auth.getAuthHeaderValueForFirstParty([]);\n    if (authHeader) {\n      headers['Authorization'] = authHeader;\n    }\n    return headers;\n  }\n}\n\n/*\n * Provides user credentials required for the Firestore JavaScript SDK\n * to authenticate the user, using technique that is only available\n * to applications hosted by Google.\n */\nexport class FirstPartyCredentialsProvider implements CredentialsProvider {\n  constructor(private gapi: Gapi, private sessionIndex: string) {}\n\n  getToken(): Promise<Token | null> {\n    return Promise.resolve(new FirstPartyToken(this.gapi, this.sessionIndex));\n  }\n\n  setChangeListener(changeListener: CredentialChangeListener): void {\n    // Fire with initial uid.\n    changeListener(User.FIRST_PARTY);\n  }\n\n  removeChangeListener(): void {}\n\n  invalidateToken(): void {}\n}\n\n/**\n * Builds a CredentialsProvider depending on the type of\n * the credentials passed in.\n */\nexport function makeCredentialsProvider(\n  credentials?: CredentialsSettings\n): CredentialsProvider {\n  if (!credentials) {\n    return new EmptyCredentialsProvider();\n  }\n\n  switch (credentials.type) {\n    case 'gapi':\n      const client = credentials.client as Gapi;\n      // Make sure this really is a Gapi client.\n      hardAssert(\n        !!(\n          typeof client === 'object' &&\n          client !== null &&\n          client['auth'] &&\n          client['auth']['getAuthHeaderValueForFirstParty']\n        ),\n        'unexpected gapi interface'\n      );\n      return new FirstPartyCredentialsProvider(\n        client,\n        credentials.sessionIndex || '0'\n      );\n\n    case 'provider':\n      return credentials.client;\n\n    default:\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'makeCredentialsProvider failed due to invalid credential type'\n      );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Code, FirestoreError } from '../util/error';\nimport { primitiveComparator } from '../util/misc';\n\n// The earlist date supported by Firestore timestamps (0001-01-01T00:00:00Z).\nconst MIN_SECONDS = -62135596800;\n\nexport class Timestamp {\n  static now(): Timestamp {\n    return Timestamp.fromMillis(Date.now());\n  }\n\n  static fromDate(date: Date): Timestamp {\n    return Timestamp.fromMillis(date.getTime());\n  }\n\n  static fromMillis(milliseconds: number): Timestamp {\n    const seconds = Math.floor(milliseconds / 1000);\n    const nanos = (milliseconds - seconds * 1000) * 1e6;\n    return new Timestamp(seconds, nanos);\n  }\n\n  constructor(readonly seconds: number, readonly nanoseconds: number) {\n    if (nanoseconds < 0) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Timestamp nanoseconds out of range: ' + nanoseconds\n      );\n    }\n    if (nanoseconds >= 1e9) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Timestamp nanoseconds out of range: ' + nanoseconds\n      );\n    }\n    if (seconds < MIN_SECONDS) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Timestamp seconds out of range: ' + seconds\n      );\n    }\n    // This will break in the year 10,000.\n    if (seconds >= 253402300800) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Timestamp seconds out of range: ' + seconds\n      );\n    }\n  }\n\n  toDate(): Date {\n    return new Date(this.toMillis());\n  }\n\n  toMillis(): number {\n    return this.seconds * 1000 + this.nanoseconds / 1e6;\n  }\n\n  _compareTo(other: Timestamp): number {\n    if (this.seconds === other.seconds) {\n      return primitiveComparator(this.nanoseconds, other.nanoseconds);\n    }\n    return primitiveComparator(this.seconds, other.seconds);\n  }\n\n  isEqual(other: Timestamp): boolean {\n    return (\n      other.seconds === this.seconds && other.nanoseconds === this.nanoseconds\n    );\n  }\n\n  toString(): string {\n    return (\n      'Timestamp(seconds=' +\n      this.seconds +\n      ', nanoseconds=' +\n      this.nanoseconds +\n      ')'\n    );\n  }\n\n  valueOf(): string {\n    // This method returns a string of the form <seconds>.<nanoseconds> where <seconds> is\n    // translated to have a non-negative value and both <seconds> and <nanoseconds> are left-padded\n    // with zeroes to be a consistent length. Strings with this format then have a lexiographical\n    // ordering that matches the expected ordering. The <seconds> translation is done to avoid\n    // having a leading negative sign (i.e. a leading '-' character) in its string representation,\n    // which would affect its lexiographical ordering.\n    const adjustedSeconds = this.seconds - MIN_SECONDS;\n    // Note: Up to 12 decimal digits are required to represent all valid 'seconds' values.\n    const formattedSeconds = String(adjustedSeconds).padStart(12, '0');\n    const formattedNanoseconds = String(this.nanoseconds).padStart(9, '0');\n    return formattedSeconds + '.' + formattedNanoseconds;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Timestamp } from '../api/timestamp';\n\n/**\n * A version of a document in Firestore. This corresponds to the version\n * timestamp, such as update_time or read_time.\n */\nexport class SnapshotVersion {\n  static fromTimestamp(value: Timestamp): SnapshotVersion {\n    return new SnapshotVersion(value);\n  }\n\n  static min(): SnapshotVersion {\n    return new SnapshotVersion(new Timestamp(0, 0));\n  }\n\n  private constructor(private timestamp: Timestamp) {}\n\n  compareTo(other: SnapshotVersion): number {\n    return this.timestamp._compareTo(other.timestamp);\n  }\n\n  isEqual(other: SnapshotVersion): boolean {\n    return this.timestamp.isEqual(other.timestamp);\n  }\n\n  /** Returns a number representation of the version for use in spec tests. */\n  toMicroseconds(): number {\n    // Convert to microseconds.\n    return this.timestamp.seconds * 1e6 + this.timestamp.nanoseconds / 1000;\n  }\n\n  toString(): string {\n    return 'SnapshotVersion(' + this.timestamp.toString() + ')';\n  }\n\n  toTimestamp(): Timestamp {\n    return this.timestamp;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { debugAssert, fail } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\n\nexport const DOCUMENT_KEY_NAME = '__name__';\n\n/**\n * Path represents an ordered sequence of string segments.\n */\nabstract class BasePath<B extends BasePath<B>> {\n  private segments: string[];\n  private offset: number;\n  private len: number;\n\n  constructor(segments: string[], offset?: number, length?: number) {\n    if (offset === undefined) {\n      offset = 0;\n    } else if (offset > segments.length) {\n      fail('offset ' + offset + ' out of range ' + segments.length);\n    }\n\n    if (length === undefined) {\n      length = segments.length - offset;\n    } else if (length > segments.length - offset) {\n      fail('length ' + length + ' out of range ' + (segments.length - offset));\n    }\n    this.segments = segments;\n    this.offset = offset;\n    this.len = length;\n  }\n\n  /**\n   * Abstract constructor method to construct an instance of B with the given\n   * parameters.\n   */\n  protected abstract construct(\n    segments: string[],\n    offset?: number,\n    length?: number\n  ): B;\n\n  /**\n   * Returns a String representation.\n   *\n   * Implementing classes are required to provide deterministic implementations as\n   * the String representation is used to obtain canonical Query IDs.\n   */\n  abstract toString(): string;\n\n  get length(): number {\n    return this.len;\n  }\n\n  isEqual(other: B): boolean {\n    return BasePath.comparator(this, other) === 0;\n  }\n\n  child(nameOrPath: string | B): B {\n    const segments = this.segments.slice(this.offset, this.limit());\n    if (nameOrPath instanceof BasePath) {\n      nameOrPath.forEach(segment => {\n        segments.push(segment);\n      });\n    } else {\n      segments.push(nameOrPath);\n    }\n    return this.construct(segments);\n  }\n\n  /** The index of one past the last segment of the path. */\n  private limit(): number {\n    return this.offset + this.length;\n  }\n\n  popFirst(size?: number): B {\n    size = size === undefined ? 1 : size;\n    debugAssert(\n      this.length >= size,\n      \"Can't call popFirst() with less segments\"\n    );\n    return this.construct(\n      this.segments,\n      this.offset + size,\n      this.length - size\n    );\n  }\n\n  popLast(): B {\n    debugAssert(!this.isEmpty(), \"Can't call popLast() on empty path\");\n    return this.construct(this.segments, this.offset, this.length - 1);\n  }\n\n  firstSegment(): string {\n    debugAssert(!this.isEmpty(), \"Can't call firstSegment() on empty path\");\n    return this.segments[this.offset];\n  }\n\n  lastSegment(): string {\n    return this.get(this.length - 1);\n  }\n\n  get(index: number): string {\n    debugAssert(index < this.length, 'Index out of range');\n    return this.segments[this.offset + index];\n  }\n\n  isEmpty(): boolean {\n    return this.length === 0;\n  }\n\n  isPrefixOf(other: this): boolean {\n    if (other.length < this.length) {\n      return false;\n    }\n\n    for (let i = 0; i < this.length; i++) {\n      if (this.get(i) !== other.get(i)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  isImmediateParentOf(potentialChild: this): boolean {\n    if (this.length + 1 !== potentialChild.length) {\n      return false;\n    }\n\n    for (let i = 0; i < this.length; i++) {\n      if (this.get(i) !== potentialChild.get(i)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  forEach(fn: (segment: string) => void): void {\n    for (let i = this.offset, end = this.limit(); i < end; i++) {\n      fn(this.segments[i]);\n    }\n  }\n\n  toArray(): string[] {\n    return this.segments.slice(this.offset, this.limit());\n  }\n\n  static comparator<T extends BasePath<T>>(\n    p1: BasePath<T>,\n    p2: BasePath<T>\n  ): number {\n    const len = Math.min(p1.length, p2.length);\n    for (let i = 0; i < len; i++) {\n      const left = p1.get(i);\n      const right = p2.get(i);\n      if (left < right) {\n        return -1;\n      }\n      if (left > right) {\n        return 1;\n      }\n    }\n    if (p1.length < p2.length) {\n      return -1;\n    }\n    if (p1.length > p2.length) {\n      return 1;\n    }\n    return 0;\n  }\n}\n\n/**\n * A slash-separated path for navigating resources (documents and collections)\n * within Firestore.\n */\nexport class ResourcePath extends BasePath<ResourcePath> {\n  protected construct(\n    segments: string[],\n    offset?: number,\n    length?: number\n  ): ResourcePath {\n    return new ResourcePath(segments, offset, length);\n  }\n\n  canonicalString(): string {\n    // NOTE: The client is ignorant of any path segments containing escape\n    // sequences (e.g. __id123__) and just passes them through raw (they exist\n    // for legacy reasons and should not be used frequently).\n\n    return this.toArray().join('/');\n  }\n\n  toString(): string {\n    return this.canonicalString();\n  }\n\n  /**\n   * Creates a resource path from the given slash-delimited string.\n   */\n  static fromString(path: string): ResourcePath {\n    // NOTE: The client is ignorant of any path segments containing escape\n    // sequences (e.g. __id123__) and just passes them through raw (they exist\n    // for legacy reasons and should not be used frequently).\n\n    if (path.indexOf('//') >= 0) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        `Invalid path (${path}). Paths must not contain // in them.`\n      );\n    }\n\n    // We may still have an empty segment at the beginning or end if they had a\n    // leading or trailing slash (which we allow).\n    const segments = path.split('/').filter(segment => segment.length > 0);\n\n    return new ResourcePath(segments);\n  }\n\n  static EMPTY_PATH = new ResourcePath([]);\n}\n\nconst identifierRegExp = /^[_a-zA-Z][_a-zA-Z0-9]*$/;\n\n/** A dot-separated path for navigating sub-objects within a document. */\nexport class FieldPath extends BasePath<FieldPath> {\n  protected construct(\n    segments: string[],\n    offset?: number,\n    length?: number\n  ): FieldPath {\n    return new FieldPath(segments, offset, length);\n  }\n\n  /**\n   * Returns true if the string could be used as a segment in a field path\n   * without escaping.\n   */\n  private static isValidIdentifier(segment: string): boolean {\n    return identifierRegExp.test(segment);\n  }\n\n  canonicalString(): string {\n    return this.toArray()\n      .map(str => {\n        str = str.replace('\\\\', '\\\\\\\\').replace('`', '\\\\`');\n        if (!FieldPath.isValidIdentifier(str)) {\n          str = '`' + str + '`';\n        }\n        return str;\n      })\n      .join('.');\n  }\n\n  toString(): string {\n    return this.canonicalString();\n  }\n\n  /**\n   * Returns true if this field references the key of a document.\n   */\n  isKeyField(): boolean {\n    return this.length === 1 && this.get(0) === DOCUMENT_KEY_NAME;\n  }\n\n  /**\n   * The field designating the key of a document.\n   */\n  static keyField(): FieldPath {\n    return new FieldPath([DOCUMENT_KEY_NAME]);\n  }\n\n  /**\n   * Parses a field string from the given server-formatted string.\n   *\n   * - Splitting the empty string is not allowed (for now at least).\n   * - Empty segments within the string (e.g. if there are two consecutive\n   *   separators) are not allowed.\n   *\n   * TODO(b/37244157): we should make this more strict. Right now, it allows\n   * non-identifier path components, even if they aren't escaped.\n   */\n  static fromServerFormat(path: string): FieldPath {\n    const segments: string[] = [];\n    let current = '';\n    let i = 0;\n\n    const addCurrentSegment = (): void => {\n      if (current.length === 0) {\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          `Invalid field path (${path}). Paths must not be empty, begin ` +\n            `with '.', end with '.', or contain '..'`\n        );\n      }\n      segments.push(current);\n      current = '';\n    };\n\n    let inBackticks = false;\n\n    while (i < path.length) {\n      const c = path[i];\n      if (c === '\\\\') {\n        if (i + 1 === path.length) {\n          throw new FirestoreError(\n            Code.INVALID_ARGUMENT,\n            'Path has trailing escape character: ' + path\n          );\n        }\n        const next = path[i + 1];\n        if (!(next === '\\\\' || next === '.' || next === '`')) {\n          throw new FirestoreError(\n            Code.INVALID_ARGUMENT,\n            'Path has invalid escape sequence: ' + path\n          );\n        }\n        current += next;\n        i += 2;\n      } else if (c === '`') {\n        inBackticks = !inBackticks;\n        i++;\n      } else if (c === '.' && !inBackticks) {\n        addCurrentSegment();\n        i++;\n      } else {\n        current += c;\n        i++;\n      }\n    }\n    addCurrentSegment();\n\n    if (inBackticks) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Unterminated ` in path: ' + path\n      );\n    }\n\n    return new FieldPath(segments);\n  }\n\n  static EMPTY_PATH = new FieldPath([]);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { debugAssert } from '../util/assert';\n\nimport { ResourcePath } from './path';\n\nexport class DocumentKey {\n  constructor(readonly path: ResourcePath) {\n    debugAssert(\n      DocumentKey.isDocumentKey(path),\n      'Invalid DocumentKey with an odd number of segments: ' +\n        path.toArray().join('/')\n    );\n  }\n\n  static fromName(name: string): DocumentKey {\n    return new DocumentKey(ResourcePath.fromString(name).popFirst(5));\n  }\n\n  /** Returns true if the document is in the specified collectionId. */\n  hasCollectionId(collectionId: string): boolean {\n    return (\n      this.path.length >= 2 &&\n      this.path.get(this.path.length - 2) === collectionId\n    );\n  }\n\n  isEqual(other: DocumentKey | null): boolean {\n    return (\n      other !== null && ResourcePath.comparator(this.path, other.path) === 0\n    );\n  }\n\n  toString(): string {\n    return this.path.toString();\n  }\n\n  static EMPTY = new DocumentKey(new ResourcePath([]));\n\n  static comparator(k1: DocumentKey, k2: DocumentKey): number {\n    return ResourcePath.comparator(k1.path, k2.path);\n  }\n\n  static isDocumentKey(path: ResourcePath): boolean {\n    return path.length % 2 === 0;\n  }\n\n  /**\n   * Creates and returns a new document key with the given segments.\n   *\n   * @param segments The segments of the path to the document\n   * @return A new instance of DocumentKey\n   */\n  static fromSegments(segments: string[]): DocumentKey {\n    return new DocumentKey(new ResourcePath(segments.slice()));\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { debugAssert } from './assert';\n\nexport interface Dict<V> {\n  [stringKey: string]: V;\n}\n\nexport function objectSize<V>(obj: object): number {\n  let count = 0;\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      count++;\n    }\n  }\n  return count;\n}\n\nexport function forEach<V>(\n  obj: Dict<V>,\n  fn: (key: string, val: V) => void\n): void {\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      fn(key, obj[key]);\n    }\n  }\n}\n\nexport function isEmpty<V>(obj: Dict<V>): boolean {\n  debugAssert(\n    obj != null && typeof obj === 'object',\n    'isEmpty() expects object parameter.'\n  );\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      return false;\n    }\n  }\n  return true;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PlatformSupport } from '../platform/platform';\nimport { primitiveComparator } from './misc';\n\n/**\n * Immutable class that represents a \"proto\" byte string.\n *\n * Proto byte strings can either be Base64-encoded strings or Uint8Arrays when\n * sent on the wire. This class abstracts away this differentiation by holding\n * the proto byte string in a common class that must be converted into a string\n * before being sent as a proto.\n */\nexport class ByteString {\n  static readonly EMPTY_BYTE_STRING = new ByteString('');\n\n  private constructor(private readonly binaryString: string) {}\n\n  static fromBase64String(base64: string): ByteString {\n    const binaryString = PlatformSupport.getPlatform().atob(base64);\n    return new ByteString(binaryString);\n  }\n\n  static fromUint8Array(array: Uint8Array): ByteString {\n    const binaryString = binaryStringFromUint8Array(array);\n    return new ByteString(binaryString);\n  }\n\n  toBase64(): string {\n    return PlatformSupport.getPlatform().btoa(this.binaryString);\n  }\n\n  toUint8Array(): Uint8Array {\n    return uint8ArrayFromBinaryString(this.binaryString);\n  }\n\n  approximateByteSize(): number {\n    return this.binaryString.length * 2;\n  }\n\n  compareTo(other: ByteString): number {\n    return primitiveComparator(this.binaryString, other.binaryString);\n  }\n\n  isEqual(other: ByteString): boolean {\n    return this.binaryString === other.binaryString;\n  }\n}\n\n/**\n * Helper function to convert an Uint8array to a binary string.\n */\nexport function binaryStringFromUint8Array(array: Uint8Array): string {\n  let binaryString = '';\n  for (let i = 0; i < array.length; ++i) {\n    binaryString += String.fromCharCode(array[i]);\n  }\n  return binaryString;\n}\n\n/**\n * Helper function to convert a binary string to an Uint8Array.\n */\nexport function uint8ArrayFromBinaryString(binaryString: string): Uint8Array {\n  const buffer = new Uint8Array(binaryString.length);\n  for (let i = 0; i < binaryString.length; i++) {\n    buffer[i] = binaryString.charCodeAt(i);\n  }\n  return buffer;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// An Object whose keys and values are strings.\nexport interface StringMap {\n  [key: string]: string;\n}\n\n/**\n * Returns whether a variable is either undefined or null.\n */\nexport function isNullOrUndefined(value: unknown): value is null | undefined {\n  return value === null || value === undefined;\n}\n\n/** Returns whether the value represents -0. */\nexport function isNegativeZero(value: number): boolean {\n  // Detect if the value is -0.0. Based on polyfill from\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n  return value === -0 && 1 / value === 1 / -0;\n}\n\n/**\n * Returns whether a value is an integer and in the safe integer range\n * @param value The value to test for being an integer and in the safe range\n */\nexport function isSafeInteger(value: unknown): boolean {\n  return (\n    typeof value === 'number' &&\n    Number.isInteger(value) &&\n    !isNegativeZero(value) &&\n    value <= Number.MAX_SAFE_INTEGER &&\n    value >= Number.MIN_SAFE_INTEGER\n  );\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '../protos/firestore_proto_api';\nimport { Timestamp } from '../api/timestamp';\nimport { normalizeTimestamp } from './values';\n\n/**\n * Represents a locally-applied ServerTimestamp.\n *\n * Server Timestamps are backed by MapValues that contain an internal field\n * `__type__` with a value of `server_timestamp`. The previous value and local\n * write time are stored in its `__previous_value__` and `__local_write_time__`\n * fields respectively.\n *\n * Notes:\n * - ServerTimestampValue instances are created as the result of applying a\n *   TransformMutation (see TransformMutation.applyTo()). They can only exist in\n *   the local view of a document. Therefore they do not need to be parsed or\n *   serialized.\n * - When evaluated locally (e.g. for snapshot.data()), they by default\n *   evaluate to `null`. This behavior can be configured by passing custom\n *   FieldValueOptions to value().\n * - With respect to other ServerTimestampValues, they sort by their\n *   localWriteTime.\n */\n\nconst SERVER_TIMESTAMP_SENTINEL = 'server_timestamp';\nconst TYPE_KEY = '__type__';\nconst PREVIOUS_VALUE_KEY = '__previous_value__';\nconst LOCAL_WRITE_TIME_KEY = '__local_write_time__';\n\nexport function isServerTimestamp(value: api.Value | null): boolean {\n  const type = (value?.mapValue?.fields || {})[TYPE_KEY]?.stringValue;\n  return type === SERVER_TIMESTAMP_SENTINEL;\n}\n\n/**\n * Creates a new ServerTimestamp proto value (using the internal format).\n */\nexport function serverTimestamp(\n  localWriteTime: Timestamp,\n  previousValue: api.Value | null\n): api.Value {\n  const mapValue: api.MapValue = {\n    fields: {\n      [TYPE_KEY]: {\n        stringValue: SERVER_TIMESTAMP_SENTINEL\n      },\n      [LOCAL_WRITE_TIME_KEY]: {\n        timestampValue: {\n          seconds: localWriteTime.seconds,\n          nanos: localWriteTime.nanoseconds\n        }\n      }\n    }\n  };\n\n  if (previousValue) {\n    mapValue.fields![PREVIOUS_VALUE_KEY] = previousValue;\n  }\n\n  return { mapValue };\n}\n\n/**\n * Returns the value of the field before this ServerTimestamp was set.\n *\n * Preserving the previous values allows the user to display the last resoled\n * value until the backend responds with the timestamp.\n */\nexport function getPreviousValue(value: api.Value): api.Value | null {\n  const previousValue = value.mapValue!.fields![PREVIOUS_VALUE_KEY];\n\n  if (isServerTimestamp(previousValue)) {\n    return getPreviousValue(previousValue);\n  }\n  return previousValue;\n}\n\n/**\n * Returns the local time at which this timestamp was first set.\n */\nexport function getLocalWriteTime(value: api.Value): Timestamp {\n  const localWriteTime = normalizeTimestamp(\n    value.mapValue!.fields![LOCAL_WRITE_TIME_KEY].timestampValue!\n  );\n  return new Timestamp(localWriteTime.seconds, localWriteTime.nanos);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '../protos/firestore_proto_api';\n\nimport { TypeOrder } from './object_value';\nimport { fail, hardAssert } from '../util/assert';\nimport { forEach, objectSize } from '../util/obj';\nimport { ByteString } from '../util/byte_string';\nimport { isNegativeZero } from '../util/types';\nimport { DocumentKey } from './document_key';\nimport { arrayEquals, primitiveComparator } from '../util/misc';\nimport { DatabaseId } from '../core/database_info';\nimport {\n  getLocalWriteTime,\n  getPreviousValue,\n  isServerTimestamp\n} from './server_timestamps';\n\n// A RegExp matching ISO 8601 UTC timestamps with optional fraction.\nconst ISO_TIMESTAMP_REG_EXP = new RegExp(\n  /^\\d{4}-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d(?:\\.(\\d+))?Z$/\n);\n\n/** Extracts the backend's type order for the provided value. */\nexport function typeOrder(value: api.Value): TypeOrder {\n  if ('nullValue' in value) {\n    return TypeOrder.NullValue;\n  } else if ('booleanValue' in value) {\n    return TypeOrder.BooleanValue;\n  } else if ('integerValue' in value || 'doubleValue' in value) {\n    return TypeOrder.NumberValue;\n  } else if ('timestampValue' in value) {\n    return TypeOrder.TimestampValue;\n  } else if ('stringValue' in value) {\n    return TypeOrder.StringValue;\n  } else if ('bytesValue' in value) {\n    return TypeOrder.BlobValue;\n  } else if ('referenceValue' in value) {\n    return TypeOrder.RefValue;\n  } else if ('geoPointValue' in value) {\n    return TypeOrder.GeoPointValue;\n  } else if ('arrayValue' in value) {\n    return TypeOrder.ArrayValue;\n  } else if ('mapValue' in value) {\n    if (isServerTimestamp(value)) {\n      return TypeOrder.ServerTimestampValue;\n    }\n    return TypeOrder.ObjectValue;\n  } else {\n    return fail('Invalid value type: ' + JSON.stringify(value));\n  }\n}\n\n/** Tests `left` and `right` for equality based on the backend semantics. */\nexport function valueEquals(left: api.Value, right: api.Value): boolean {\n  const leftType = typeOrder(left);\n  const rightType = typeOrder(right);\n  if (leftType !== rightType) {\n    return false;\n  }\n\n  switch (leftType) {\n    case TypeOrder.NullValue:\n      return true;\n    case TypeOrder.BooleanValue:\n      return left.booleanValue === right.booleanValue;\n    case TypeOrder.ServerTimestampValue:\n      return getLocalWriteTime(left).isEqual(getLocalWriteTime(right));\n    case TypeOrder.TimestampValue:\n      return timestampEquals(left, right);\n    case TypeOrder.StringValue:\n      return left.stringValue === right.stringValue;\n    case TypeOrder.BlobValue:\n      return blobEquals(left, right);\n    case TypeOrder.RefValue:\n      return left.referenceValue === right.referenceValue;\n    case TypeOrder.GeoPointValue:\n      return geoPointEquals(left, right);\n    case TypeOrder.NumberValue:\n      return numberEquals(left, right);\n    case TypeOrder.ArrayValue:\n      return arrayEquals(\n        left.arrayValue!.values || [],\n        right.arrayValue!.values || [],\n        valueEquals\n      );\n    case TypeOrder.ObjectValue:\n      return objectEquals(left, right);\n    default:\n      return fail('Unexpected value type: ' + JSON.stringify(left));\n  }\n}\n\nfunction timestampEquals(left: api.Value, right: api.Value): boolean {\n  if (\n    typeof left.timestampValue === 'string' &&\n    typeof right.timestampValue === 'string' &&\n    left.timestampValue.length === right.timestampValue.length\n  ) {\n    // Use string equality for ISO 8601 timestamps\n    return left.timestampValue === right.timestampValue;\n  }\n\n  const leftTimestamp = normalizeTimestamp(left.timestampValue!);\n  const rightTimestamp = normalizeTimestamp(right.timestampValue!);\n  return (\n    leftTimestamp.seconds === rightTimestamp.seconds &&\n    leftTimestamp.nanos === rightTimestamp.nanos\n  );\n}\n\nfunction geoPointEquals(left: api.Value, right: api.Value): boolean {\n  return (\n    normalizeNumber(left.geoPointValue!.latitude) ===\n      normalizeNumber(right.geoPointValue!.latitude) &&\n    normalizeNumber(left.geoPointValue!.longitude) ===\n      normalizeNumber(right.geoPointValue!.longitude)\n  );\n}\n\nfunction blobEquals(left: api.Value, right: api.Value): boolean {\n  return normalizeByteString(left.bytesValue!).isEqual(\n    normalizeByteString(right.bytesValue!)\n  );\n}\n\nexport function numberEquals(left: api.Value, right: api.Value): boolean {\n  if ('integerValue' in left && 'integerValue' in right) {\n    return (\n      normalizeNumber(left.integerValue) === normalizeNumber(right.integerValue)\n    );\n  } else if ('doubleValue' in left && 'doubleValue' in right) {\n    const n1 = normalizeNumber(left.doubleValue!);\n    const n2 = normalizeNumber(right.doubleValue!);\n\n    if (n1 === n2) {\n      return isNegativeZero(n1) === isNegativeZero(n2);\n    } else {\n      return isNaN(n1) && isNaN(n2);\n    }\n  }\n\n  return false;\n}\n\nfunction objectEquals(left: api.Value, right: api.Value): boolean {\n  const leftMap = left.mapValue!.fields || {};\n  const rightMap = right.mapValue!.fields || {};\n\n  if (objectSize(leftMap) !== objectSize(rightMap)) {\n    return false;\n  }\n\n  for (const key in leftMap) {\n    if (leftMap.hasOwnProperty(key)) {\n      if (\n        rightMap[key] === undefined ||\n        !valueEquals(leftMap[key], rightMap[key])\n      ) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\n/** Returns true if the ArrayValue contains the specified element. */\nexport function arrayValueContains(\n  haystack: api.ArrayValue,\n  needle: api.Value\n): boolean {\n  return (\n    (haystack.values || []).find(v => valueEquals(v, needle)) !== undefined\n  );\n}\n\nexport function valueCompare(left: api.Value, right: api.Value): number {\n  const leftType = typeOrder(left);\n  const rightType = typeOrder(right);\n\n  if (leftType !== rightType) {\n    return primitiveComparator(leftType, rightType);\n  }\n\n  switch (leftType) {\n    case TypeOrder.NullValue:\n      return 0;\n    case TypeOrder.BooleanValue:\n      return primitiveComparator(left.booleanValue!, right.booleanValue!);\n    case TypeOrder.NumberValue:\n      return compareNumbers(left, right);\n    case TypeOrder.TimestampValue:\n      return compareTimestamps(left.timestampValue!, right.timestampValue!);\n    case TypeOrder.ServerTimestampValue:\n      return compareTimestamps(\n        getLocalWriteTime(left),\n        getLocalWriteTime(right)\n      );\n    case TypeOrder.StringValue:\n      return primitiveComparator(left.stringValue!, right.stringValue!);\n    case TypeOrder.BlobValue:\n      return compareBlobs(left.bytesValue!, right.bytesValue!);\n    case TypeOrder.RefValue:\n      return compareReferences(left.referenceValue!, right.referenceValue!);\n    case TypeOrder.GeoPointValue:\n      return compareGeoPoints(left.geoPointValue!, right.geoPointValue!);\n    case TypeOrder.ArrayValue:\n      return compareArrays(left.arrayValue!, right.arrayValue!);\n    case TypeOrder.ObjectValue:\n      return compareMaps(left.mapValue!, right.mapValue!);\n    default:\n      throw fail('Invalid value type: ' + leftType);\n  }\n}\n\nfunction compareNumbers(left: api.Value, right: api.Value): number {\n  const leftNumber = normalizeNumber(left.integerValue || left.doubleValue);\n  const rightNumber = normalizeNumber(right.integerValue || right.doubleValue);\n\n  if (leftNumber < rightNumber) {\n    return -1;\n  } else if (leftNumber > rightNumber) {\n    return 1;\n  } else if (leftNumber === rightNumber) {\n    return 0;\n  } else {\n    // one or both are NaN.\n    if (isNaN(leftNumber)) {\n      return isNaN(rightNumber) ? 0 : -1;\n    } else {\n      return 1;\n    }\n  }\n}\n\nfunction compareTimestamps(left: api.Timestamp, right: api.Timestamp): number {\n  if (\n    typeof left === 'string' &&\n    typeof right === 'string' &&\n    left.length === right.length\n  ) {\n    return primitiveComparator(left, right);\n  }\n\n  const leftTimestamp = normalizeTimestamp(left);\n  const rightTimestamp = normalizeTimestamp(right);\n\n  const comparison = primitiveComparator(\n    leftTimestamp.seconds,\n    rightTimestamp.seconds\n  );\n  if (comparison !== 0) {\n    return comparison;\n  }\n  return primitiveComparator(leftTimestamp.nanos, rightTimestamp.nanos);\n}\n\nfunction compareReferences(leftPath: string, rightPath: string): number {\n  const leftSegments = leftPath.split('/');\n  const rightSegments = rightPath.split('/');\n  for (let i = 0; i < leftSegments.length && i < rightSegments.length; i++) {\n    const comparison = primitiveComparator(leftSegments[i], rightSegments[i]);\n    if (comparison !== 0) {\n      return comparison;\n    }\n  }\n  return primitiveComparator(leftSegments.length, rightSegments.length);\n}\n\nfunction compareGeoPoints(left: api.LatLng, right: api.LatLng): number {\n  const comparison = primitiveComparator(\n    normalizeNumber(left.latitude),\n    normalizeNumber(right.latitude)\n  );\n  if (comparison !== 0) {\n    return comparison;\n  }\n  return primitiveComparator(\n    normalizeNumber(left.longitude),\n    normalizeNumber(right.longitude)\n  );\n}\n\nfunction compareBlobs(\n  left: string | Uint8Array,\n  right: string | Uint8Array\n): number {\n  const leftBytes = normalizeByteString(left);\n  const rightBytes = normalizeByteString(right);\n  return leftBytes.compareTo(rightBytes);\n}\n\nfunction compareArrays(left: api.ArrayValue, right: api.ArrayValue): number {\n  const leftArray = left.values || [];\n  const rightArray = right.values || [];\n\n  for (let i = 0; i < leftArray.length && i < rightArray.length; ++i) {\n    const compare = valueCompare(leftArray[i], rightArray[i]);\n    if (compare) {\n      return compare;\n    }\n  }\n  return primitiveComparator(leftArray.length, rightArray.length);\n}\n\nfunction compareMaps(left: api.MapValue, right: api.MapValue): number {\n  const leftMap = left.fields || {};\n  const leftKeys = Object.keys(leftMap);\n  const rightMap = right.fields || {};\n  const rightKeys = Object.keys(rightMap);\n\n  // Even though MapValues are likely sorted correctly based on their insertion\n  // order (e.g. when received from the backend), local modifications can bring\n  // elements out of order. We need to re-sort the elements to ensure that\n  // canonical IDs are independent of insertion order.\n  leftKeys.sort();\n  rightKeys.sort();\n\n  for (let i = 0; i < leftKeys.length && i < rightKeys.length; ++i) {\n    const keyCompare = primitiveComparator(leftKeys[i], rightKeys[i]);\n    if (keyCompare !== 0) {\n      return keyCompare;\n    }\n    const compare = valueCompare(leftMap[leftKeys[i]], rightMap[rightKeys[i]]);\n    if (compare !== 0) {\n      return compare;\n    }\n  }\n\n  return primitiveComparator(leftKeys.length, rightKeys.length);\n}\n\n/**\n * Generates the canonical ID for the provided field value (as used in Target\n * serialization).\n */\nexport function canonicalId(value: api.Value): string {\n  return canonifyValue(value);\n}\n\nfunction canonifyValue(value: api.Value): string {\n  if ('nullValue' in value) {\n    return 'null';\n  } else if ('booleanValue' in value) {\n    return '' + value.booleanValue!;\n  } else if ('integerValue' in value) {\n    return '' + value.integerValue!;\n  } else if ('doubleValue' in value) {\n    return '' + value.doubleValue!;\n  } else if ('timestampValue' in value) {\n    return canonifyTimestamp(value.timestampValue!);\n  } else if ('stringValue' in value) {\n    return value.stringValue!;\n  } else if ('bytesValue' in value) {\n    return canonifyByteString(value.bytesValue!);\n  } else if ('referenceValue' in value) {\n    return canonifyReference(value.referenceValue!);\n  } else if ('geoPointValue' in value) {\n    return canonifyGeoPoint(value.geoPointValue!);\n  } else if ('arrayValue' in value) {\n    return canonifyArray(value.arrayValue!);\n  } else if ('mapValue' in value) {\n    return canonifyMap(value.mapValue!);\n  } else {\n    return fail('Invalid value type: ' + JSON.stringify(value));\n  }\n}\n\nfunction canonifyByteString(byteString: string | Uint8Array): string {\n  return normalizeByteString(byteString).toBase64();\n}\n\nfunction canonifyTimestamp(timestamp: api.Timestamp): string {\n  const normalizedTimestamp = normalizeTimestamp(timestamp);\n  return `time(${normalizedTimestamp.seconds},${normalizedTimestamp.nanos})`;\n}\n\nfunction canonifyGeoPoint(geoPoint: api.LatLng): string {\n  return `geo(${geoPoint.latitude},${geoPoint.longitude})`;\n}\n\nfunction canonifyReference(referenceValue: string): string {\n  return DocumentKey.fromName(referenceValue).toString();\n}\n\nfunction canonifyMap(mapValue: api.MapValue): string {\n  // Iteration order in JavaScript is not guaranteed. To ensure that we generate\n  // matching canonical IDs for identical maps, we need to sort the keys.\n  const sortedKeys = Object.keys(mapValue.fields || {}).sort();\n\n  let result = '{';\n  let first = true;\n  for (const key of sortedKeys) {\n    if (!first) {\n      result += ',';\n    } else {\n      first = false;\n    }\n    result += `${key}:${canonifyValue(mapValue.fields![key])}`;\n  }\n  return result + '}';\n}\n\nfunction canonifyArray(arrayValue: api.ArrayValue): string {\n  let result = '[';\n  let first = true;\n  for (const value of arrayValue.values || []) {\n    if (!first) {\n      result += ',';\n    } else {\n      first = false;\n    }\n    result += canonifyValue(value);\n  }\n  return result + ']';\n}\n\n/**\n * Returns an approximate (and wildly inaccurate) in-memory size for the field\n * value.\n *\n * The memory size takes into account only the actual user data as it resides\n * in memory and ignores object overhead.\n */\nexport function estimateByteSize(value: api.Value): number {\n  switch (typeOrder(value)) {\n    case TypeOrder.NullValue:\n      return 4;\n    case TypeOrder.BooleanValue:\n      return 4;\n    case TypeOrder.NumberValue:\n      return 8;\n    case TypeOrder.TimestampValue:\n      // Timestamps are made up of two distinct numbers (seconds + nanoseconds)\n      return 16;\n    case TypeOrder.ServerTimestampValue:\n      const previousValue = getPreviousValue(value);\n      return previousValue ? 16 + estimateByteSize(previousValue) : 16;\n    case TypeOrder.StringValue:\n      // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures:\n      // \"JavaScript's String type is [...] a set of elements of 16-bit unsigned\n      // integer values\"\n      return value.stringValue!.length * 2;\n    case TypeOrder.BlobValue:\n      return normalizeByteString(value.bytesValue!).approximateByteSize();\n    case TypeOrder.RefValue:\n      return value.referenceValue!.length;\n    case TypeOrder.GeoPointValue:\n      // GeoPoints are made up of two distinct numbers (latitude + longitude)\n      return 16;\n    case TypeOrder.ArrayValue:\n      return estimateArrayByteSize(value.arrayValue!);\n    case TypeOrder.ObjectValue:\n      return estimateMapByteSize(value.mapValue!);\n    default:\n      throw fail('Invalid value type: ' + JSON.stringify(value));\n  }\n}\n\nfunction estimateMapByteSize(mapValue: api.MapValue): number {\n  let size = 0;\n  forEach(mapValue.fields || {}, (key, val) => {\n    size += key.length + estimateByteSize(val);\n  });\n  return size;\n}\n\nfunction estimateArrayByteSize(arrayValue: api.ArrayValue): number {\n  return (arrayValue.values || []).reduce(\n    (previousSize, value) => previousSize + estimateByteSize(value),\n    0\n  );\n}\n\n/**\n * Converts the possible Proto values for a timestamp value into a \"seconds and\n * nanos\" representation.\n */\nexport function normalizeTimestamp(\n  date: api.Timestamp\n): { seconds: number; nanos: number } {\n  hardAssert(!!date, 'Cannot normalize null or undefined timestamp.');\n\n  // The json interface (for the browser) will return an iso timestamp string,\n  // while the proto js library (for node) will return a\n  // google.protobuf.Timestamp instance.\n  if (typeof date === 'string') {\n    // The date string can have higher precision (nanos) than the Date class\n    // (millis), so we do some custom parsing here.\n\n    // Parse the nanos right out of the string.\n    let nanos = 0;\n    const fraction = ISO_TIMESTAMP_REG_EXP.exec(date);\n    hardAssert(!!fraction, 'invalid timestamp: ' + date);\n    if (fraction[1]) {\n      // Pad the fraction out to 9 digits (nanos).\n      let nanoStr = fraction[1];\n      nanoStr = (nanoStr + '000000000').substr(0, 9);\n      nanos = Number(nanoStr);\n    }\n\n    // Parse the date to get the seconds.\n    const parsedDate = new Date(date);\n    const seconds = Math.floor(parsedDate.getTime() / 1000);\n\n    return { seconds, nanos };\n  } else {\n    // TODO(b/37282237): Use strings for Proto3 timestamps\n    // assert(!this.options.useProto3Json,\n    //   'The timestamp instance format requires Proto JS.');\n    const seconds = normalizeNumber(date.seconds);\n    const nanos = normalizeNumber(date.nanos);\n    return { seconds, nanos };\n  }\n}\n\n/**\n * Converts the possible Proto types for numbers into a JavaScript number.\n * Returns 0 if the value is not numeric.\n */\nexport function normalizeNumber(value: number | string | undefined): number {\n  // TODO(bjornick): Handle int64 greater than 53 bits.\n  if (typeof value === 'number') {\n    return value;\n  } else if (typeof value === 'string') {\n    return Number(value);\n  } else {\n    return 0;\n  }\n}\n\n/** Converts the possible Proto types for Blobs into a ByteString. */\nexport function normalizeByteString(blob: string | Uint8Array): ByteString {\n  if (typeof blob === 'string') {\n    return ByteString.fromBase64String(blob);\n  } else {\n    return ByteString.fromUint8Array(blob);\n  }\n}\n\n/** Returns a reference value for the provided database and key. */\nexport function refValue(databaseId: DatabaseId, key: DocumentKey): api.Value {\n  return {\n    referenceValue: `projects/${databaseId.projectId}/databases/${\n      databaseId.database\n    }/documents/${key.path.canonicalString()}`\n  };\n}\n\n/** Returns true if `value` is an IntegerValue . */\nexport function isInteger(\n  value?: api.Value | null\n): value is { integerValue: string | number } {\n  return !!value && 'integerValue' in value;\n}\n\n/** Returns true if `value` is a DoubleValue. */\nexport function isDouble(\n  value?: api.Value | null\n): value is { doubleValue: string | number } {\n  return !!value && 'doubleValue' in value;\n}\n\n/** Returns true if `value` is either an IntegerValue or a DoubleValue. */\nexport function isNumber(value?: api.Value | null): boolean {\n  return isInteger(value) || isDouble(value);\n}\n\n/** Returns true if `value` is an ArrayValue. */\nexport function isArray(\n  value?: api.Value | null\n): value is { arrayValue: api.ArrayValue } {\n  return !!value && 'arrayValue' in value;\n}\n\n/** Returns true if `value` is a ReferenceValue. */\nexport function isReferenceValue(\n  value?: api.Value | null\n): value is { referenceValue: string } {\n  return !!value && 'referenceValue' in value;\n}\n\n/** Returns true if `value` is a NullValue. */\nexport function isNullValue(\n  value?: api.Value | null\n): value is { nullValue: 'NULL_VALUE' } {\n  return !!value && 'nullValue' in value;\n}\n\n/** Returns true if `value` is NaN. */\nexport function isNanValue(\n  value?: api.Value | null\n): value is { doubleValue: 'NaN' | number } {\n  return !!value && 'doubleValue' in value && isNaN(Number(value.doubleValue));\n}\n\n/** Returns true if `value` is a MapValue. */\nexport function isMapValue(\n  value?: api.Value | null\n): value is { mapValue: api.MapValue } {\n  return !!value && 'mapValue' in value;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '../protos/firestore_proto_api';\n\nimport { Timestamp } from '../api/timestamp';\nimport { debugAssert } from '../util/assert';\nimport { JsonProtoSerializer } from '../remote/serializer';\nimport {\n  valueEquals,\n  isArray,\n  isInteger,\n  isNumber,\n  normalizeNumber\n} from './values';\nimport { serverTimestamp } from './server_timestamps';\nimport { arrayEquals } from '../util/misc';\n\n/** Represents a transform within a TransformMutation. */\nexport interface TransformOperation {\n  /**\n   * Computes the local transform result against the provided `previousValue`,\n   * optionally using the provided localWriteTime.\n   */\n  applyToLocalView(\n    previousValue: api.Value | null,\n    localWriteTime: Timestamp\n  ): api.Value;\n\n  /**\n   * Computes a final transform result after the transform has been acknowledged\n   * by the server, potentially using the server-provided transformResult.\n   */\n  applyToRemoteDocument(\n    previousValue: api.Value | null,\n    transformResult: api.Value | null\n  ): api.Value;\n\n  /**\n   * If this transform operation is not idempotent, returns the base value to\n   * persist for this transform. If a base value is returned, the transform\n   * operation is always applied to this base value, even if document has\n   * already been updated.\n   *\n   * Base values provide consistent behavior for non-idempotent transforms and\n   * allow us to return the same latency-compensated value even if the backend\n   * has already applied the transform operation. The base value is null for\n   * idempotent transforms, as they can be re-played even if the backend has\n   * already applied them.\n   *\n   * @return a base value to store along with the mutation, or null for\n   * idempotent transforms.\n   */\n  computeBaseValue(previousValue: api.Value | null): api.Value | null;\n\n  isEqual(other: TransformOperation): boolean;\n}\n\n/** Transforms a value into a server-generated timestamp. */\nexport class ServerTimestampTransform implements TransformOperation {\n  private constructor() {}\n  static instance = new ServerTimestampTransform();\n\n  applyToLocalView(\n    previousValue: api.Value | null,\n    localWriteTime: Timestamp\n  ): api.Value {\n    return serverTimestamp(localWriteTime!, previousValue);\n  }\n\n  applyToRemoteDocument(\n    previousValue: api.Value | null,\n    transformResult: api.Value | null\n  ): api.Value {\n    return transformResult!;\n  }\n\n  computeBaseValue(previousValue: api.Value | null): api.Value | null {\n    return null; // Server timestamps are idempotent and don't require a base value.\n  }\n\n  isEqual(other: TransformOperation): boolean {\n    return other instanceof ServerTimestampTransform;\n  }\n}\n\n/** Transforms an array value via a union operation. */\nexport class ArrayUnionTransformOperation implements TransformOperation {\n  constructor(readonly elements: api.Value[]) {}\n\n  applyToLocalView(\n    previousValue: api.Value | null,\n    localWriteTime: Timestamp\n  ): api.Value {\n    return this.apply(previousValue);\n  }\n\n  applyToRemoteDocument(\n    previousValue: api.Value | null,\n    transformResult: api.Value | null\n  ): api.Value {\n    // The server just sends null as the transform result for array operations,\n    // so we have to calculate a result the same as we do for local\n    // applications.\n    return this.apply(previousValue);\n  }\n\n  private apply(previousValue: api.Value | null): api.Value {\n    const values = coercedFieldValuesArray(previousValue);\n    for (const toUnion of this.elements) {\n      if (!values.some(element => valueEquals(element, toUnion))) {\n        values.push(toUnion);\n      }\n    }\n    return { arrayValue: { values } };\n  }\n\n  computeBaseValue(previousValue: api.Value | null): api.Value | null {\n    return null; // Array transforms are idempotent and don't require a base value.\n  }\n\n  isEqual(other: TransformOperation): boolean {\n    return (\n      other instanceof ArrayUnionTransformOperation &&\n      arrayEquals(this.elements, other.elements, valueEquals)\n    );\n  }\n}\n\n/** Transforms an array value via a remove operation. */\nexport class ArrayRemoveTransformOperation implements TransformOperation {\n  constructor(readonly elements: api.Value[]) {}\n\n  applyToLocalView(\n    previousValue: api.Value | null,\n    localWriteTime: Timestamp\n  ): api.Value {\n    return this.apply(previousValue);\n  }\n\n  applyToRemoteDocument(\n    previousValue: api.Value | null,\n    transformResult: api.Value | null\n  ): api.Value {\n    // The server just sends null as the transform result for array operations,\n    // so we have to calculate a result the same as we do for local\n    // applications.\n    return this.apply(previousValue);\n  }\n\n  private apply(previousValue: api.Value | null): api.Value {\n    let values = coercedFieldValuesArray(previousValue);\n    for (const toRemove of this.elements) {\n      values = values.filter(element => !valueEquals(element, toRemove));\n    }\n    return { arrayValue: { values } };\n  }\n\n  computeBaseValue(previousValue: api.Value | null): api.Value | null {\n    return null; // Array transforms are idempotent and don't require a base value.\n  }\n\n  isEqual(other: TransformOperation): boolean {\n    return (\n      other instanceof ArrayRemoveTransformOperation &&\n      arrayEquals(this.elements, other.elements, valueEquals)\n    );\n  }\n}\n\n/**\n * Implements the backend semantics for locally computed NUMERIC_ADD (increment)\n * transforms. Converts all field values to integers or doubles, but unlike the\n * backend does not cap integer values at 2^63. Instead, JavaScript number\n * arithmetic is used and precision loss can occur for values greater than 2^53.\n */\nexport class NumericIncrementTransformOperation implements TransformOperation {\n  constructor(\n    private readonly serializer: JsonProtoSerializer,\n    readonly operand: api.Value\n  ) {\n    debugAssert(\n      isNumber(operand),\n      'NumericIncrementTransform transform requires a NumberValue'\n    );\n  }\n\n  applyToLocalView(\n    previousValue: api.Value | null,\n    localWriteTime: Timestamp\n  ): api.Value {\n    // PORTING NOTE: Since JavaScript's integer arithmetic is limited to 53 bit\n    // precision and resolves overflows by reducing precision, we do not\n    // manually cap overflows at 2^63.\n    const baseValue = this.computeBaseValue(previousValue);\n    const sum = this.asNumber(baseValue) + this.asNumber(this.operand);\n    if (isInteger(baseValue) && isInteger(this.operand)) {\n      return this.serializer.toInteger(sum);\n    } else {\n      return this.serializer.toDouble(sum);\n    }\n  }\n\n  applyToRemoteDocument(\n    previousValue: api.Value | null,\n    transformResult: api.Value | null\n  ): api.Value {\n    debugAssert(\n      transformResult !== null,\n      \"Didn't receive transformResult for NUMERIC_ADD transform\"\n    );\n    return transformResult;\n  }\n\n  /**\n   * Inspects the provided value, returning the provided value if it is already\n   * a NumberValue, otherwise returning a coerced value of 0.\n   */\n  computeBaseValue(previousValue: api.Value | null): api.Value {\n    return isNumber(previousValue) ? previousValue! : { integerValue: 0 };\n  }\n\n  isEqual(other: TransformOperation): boolean {\n    return (\n      other instanceof NumericIncrementTransformOperation &&\n      valueEquals(this.operand, other.operand)\n    );\n  }\n\n  private asNumber(value: api.Value): number {\n    return normalizeNumber(value.integerValue || value.doubleValue);\n  }\n}\n\nfunction coercedFieldValuesArray(value: api.Value | null): api.Value[] {\n  return isArray(value) && value.arrayValue.values\n    ? value.arrayValue.values.slice()\n    : [];\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '../protos/firestore_proto_api';\n\nimport { Timestamp } from '../api/timestamp';\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { debugAssert, fail, hardAssert } from '../util/assert';\n\nimport {\n  Document,\n  MaybeDocument,\n  NoDocument,\n  UnknownDocument\n} from './document';\nimport { DocumentKey } from './document_key';\nimport { ObjectValue, ObjectValueBuilder } from './object_value';\nimport { FieldPath } from './path';\nimport { TransformOperation } from './transform_operation';\nimport { arrayEquals } from '../util/misc';\n\n/**\n * Provides a set of fields that can be used to partially patch a document.\n * FieldMask is used in conjunction with ObjectValue.\n * Examples:\n *   foo - Overwrites foo entirely with the provided value. If foo is not\n *         present in the companion ObjectValue, the field is deleted.\n *   foo.bar - Overwrites only the field bar of the object foo.\n *             If foo is not an object, foo is replaced with an object\n *             containing foo\n */\nexport class FieldMask {\n  constructor(readonly fields: FieldPath[]) {\n    // TODO(dimond): validation of FieldMask\n    // Sort the field mask to support `FieldMask.isEqual()` and assert below.\n    fields.sort(FieldPath.comparator);\n    debugAssert(\n      !fields.some((v, i) => i !== 0 && v.isEqual(fields[i - 1])),\n      'FieldMask contains field that is not unique: ' +\n        fields.find((v, i) => i !== 0 && v.isEqual(fields[i - 1]))!\n    );\n  }\n\n  /**\n   * Verifies that `fieldPath` is included by at least one field in this field\n   * mask.\n   *\n   * This is an O(n) operation, where `n` is the size of the field mask.\n   */\n  covers(fieldPath: FieldPath): boolean {\n    for (const fieldMaskPath of this.fields) {\n      if (fieldMaskPath.isPrefixOf(fieldPath)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  isEqual(other: FieldMask): boolean {\n    return arrayEquals(this.fields, other.fields, (l, r) => l.isEqual(r));\n  }\n}\n\n/** A field path and the TransformOperation to perform upon it. */\nexport class FieldTransform {\n  constructor(\n    readonly field: FieldPath,\n    readonly transform: TransformOperation\n  ) {}\n\n  isEqual(other: FieldTransform): boolean {\n    return (\n      this.field.isEqual(other.field) && this.transform.isEqual(other.transform)\n    );\n  }\n}\n\n/** The result of successfully applying a mutation to the backend. */\nexport class MutationResult {\n  constructor(\n    /**\n     * The version at which the mutation was committed:\n     *\n     * - For most operations, this is the updateTime in the WriteResult.\n     * - For deletes, the commitTime of the WriteResponse (because deletes are\n     *   not stored and have no updateTime).\n     *\n     * Note that these versions can be different: No-op writes will not change\n     * the updateTime even though the commitTime advances.\n     */\n    readonly version: SnapshotVersion,\n    /**\n     * The resulting fields returned from the backend after a\n     * TransformMutation has been committed. Contains one FieldValue for each\n     * FieldTransform that was in the mutation.\n     *\n     * Will be null if the mutation was not a TransformMutation.\n     */\n    readonly transformResults: Array<api.Value | null> | null\n  ) {}\n}\n\nexport const enum MutationType {\n  Set,\n  Patch,\n  Transform,\n  Delete,\n  Verify\n}\n\n/**\n * Encodes a precondition for a mutation. This follows the model that the\n * backend accepts with the special case of an explicit \"empty\" precondition\n * (meaning no precondition).\n */\nexport class Precondition {\n  private constructor(\n    readonly updateTime?: SnapshotVersion,\n    readonly exists?: boolean\n  ) {\n    debugAssert(\n      updateTime === undefined || exists === undefined,\n      'Precondition can specify \"exists\" or \"updateTime\" but not both'\n    );\n  }\n\n  /** Creates a new empty Precondition. */\n  static none(): Precondition {\n    return new Precondition();\n  }\n\n  /** Creates a new Precondition with an exists flag. */\n  static exists(exists: boolean): Precondition {\n    return new Precondition(undefined, exists);\n  }\n\n  /** Creates a new Precondition based on a version a document exists at. */\n  static updateTime(version: SnapshotVersion): Precondition {\n    return new Precondition(version);\n  }\n\n  /** Returns whether this Precondition is empty. */\n  get isNone(): boolean {\n    return this.updateTime === undefined && this.exists === undefined;\n  }\n\n  /**\n   * Returns true if the preconditions is valid for the given document\n   * (or null if no document is available).\n   */\n  isValidFor(maybeDoc: MaybeDocument | null): boolean {\n    if (this.updateTime !== undefined) {\n      return (\n        maybeDoc instanceof Document &&\n        maybeDoc.version.isEqual(this.updateTime)\n      );\n    } else if (this.exists !== undefined) {\n      return this.exists === maybeDoc instanceof Document;\n    } else {\n      debugAssert(this.isNone, 'Precondition should be empty');\n      return true;\n    }\n  }\n\n  isEqual(other: Precondition): boolean {\n    return (\n      this.exists === other.exists &&\n      (this.updateTime\n        ? !!other.updateTime && this.updateTime.isEqual(other.updateTime)\n        : !other.updateTime)\n    );\n  }\n}\n\n/**\n * A mutation describes a self-contained change to a document. Mutations can\n * create, replace, delete, and update subsets of documents.\n *\n * Mutations not only act on the value of the document but also its version.\n *\n * For local mutations (mutations that haven't been committed yet), we preserve\n * the existing version for Set, Patch, and Transform mutations. For Delete\n * mutations, we reset the version to 0.\n *\n * Here's the expected transition table.\n *\n * MUTATION           APPLIED TO            RESULTS IN\n *\n * SetMutation        Document(v3)          Document(v3)\n * SetMutation        NoDocument(v3)        Document(v0)\n * SetMutation        null                  Document(v0)\n * PatchMutation      Document(v3)          Document(v3)\n * PatchMutation      NoDocument(v3)        NoDocument(v3)\n * PatchMutation      null                  null\n * TransformMutation  Document(v3)          Document(v3)\n * TransformMutation  NoDocument(v3)        NoDocument(v3)\n * TransformMutation  null                  null\n * DeleteMutation     Document(v3)          NoDocument(v0)\n * DeleteMutation     NoDocument(v3)        NoDocument(v0)\n * DeleteMutation     null                  NoDocument(v0)\n *\n * For acknowledged mutations, we use the updateTime of the WriteResponse as\n * the resulting version for Set, Patch, and Transform mutations. As deletes\n * have no explicit update time, we use the commitTime of the WriteResponse for\n * Delete mutations.\n *\n * If a mutation is acknowledged by the backend but fails the precondition check\n * locally, we return an `UnknownDocument` and rely on Watch to send us the\n * updated version.\n *\n * Note that TransformMutations don't create Documents (in the case of being\n * applied to a NoDocument), even though they would on the backend. This is\n * because the client always combines the TransformMutation with a SetMutation\n * or PatchMutation and we only want to apply the transform if the prior\n * mutation resulted in a Document (always true for a SetMutation, but not\n * necessarily for a PatchMutation).\n *\n * ## Subclassing Notes\n *\n * Subclasses of Mutation need to implement applyToRemoteDocument() and\n * applyToLocalView() to implement the actual behavior of applying the mutation\n * to some source document.\n */\nexport abstract class Mutation {\n  abstract readonly type: MutationType;\n  abstract readonly key: DocumentKey;\n  abstract readonly precondition: Precondition;\n\n  /**\n   * Applies this mutation to the given MaybeDocument or null for the purposes\n   * of computing a new remote document. If the input document doesn't match the\n   * expected state (e.g. it is null or outdated), an `UnknownDocument` can be\n   * returned.\n   *\n   * @param maybeDoc The document to mutate. The input document can be null if\n   *     the client has no knowledge of the pre-mutation state of the document.\n   * @param mutationResult The result of applying the mutation from the backend.\n   * @return The mutated document. The returned document may be an\n   *     UnknownDocument if the mutation could not be applied to the locally\n   *     cached base document.\n   */\n  abstract applyToRemoteDocument(\n    maybeDoc: MaybeDocument | null,\n    mutationResult: MutationResult\n  ): MaybeDocument;\n\n  /**\n   * Applies this mutation to the given MaybeDocument or null for the purposes\n   * of computing the new local view of a document. Both the input and returned\n   * documents can be null.\n   *\n   * @param maybeDoc The document to mutate. The input document can be null if\n   *     the client has no knowledge of the pre-mutation state of the document.\n   * @param baseDoc The state of the document prior to this mutation batch. The\n   *     input document can be null if the client has no knowledge of the\n   *     pre-mutation state of the document.\n   * @param localWriteTime A timestamp indicating the local write time of the\n   *     batch this mutation is a part of.\n   * @return The mutated document. The returned document may be null, but only\n   *     if maybeDoc was null and the mutation would not create a new document.\n   */\n  abstract applyToLocalView(\n    maybeDoc: MaybeDocument | null,\n    baseDoc: MaybeDocument | null,\n    localWriteTime: Timestamp\n  ): MaybeDocument | null;\n\n  /**\n   * If this mutation is not idempotent, returns the base value to persist with\n   * this mutation. If a base value is returned, the mutation is always applied\n   * to this base value, even if document has already been updated.\n   *\n   * The base value is a sparse object that consists of only the document\n   * fields for which this mutation contains a non-idempotent transformation\n   * (e.g. a numeric increment). The provided value guarantees consistent\n   * behavior for non-idempotent transforms and allow us to return the same\n   * latency-compensated value even if the backend has already applied the\n   * mutation. The base value is null for idempotent mutations, as they can be\n   * re-played even if the backend has already applied them.\n   *\n   * @return a base value to store along with the mutation, or null for\n   * idempotent mutations.\n   */\n  abstract extractBaseValue(maybeDoc: MaybeDocument | null): ObjectValue | null;\n\n  abstract isEqual(other: Mutation): boolean;\n\n  protected verifyKeyMatches(maybeDoc: MaybeDocument | null): void {\n    if (maybeDoc != null) {\n      debugAssert(\n        maybeDoc.key.isEqual(this.key),\n        'Can only apply a mutation to a document with the same key'\n      );\n    }\n  }\n\n  /**\n   * Returns the version from the given document for use as the result of a\n   * mutation. Mutations are defined to return the version of the base document\n   * only if it is an existing document. Deleted and unknown documents have a\n   * post-mutation version of SnapshotVersion.min().\n   */\n  protected static getPostMutationVersion(\n    maybeDoc: MaybeDocument | null\n  ): SnapshotVersion {\n    if (maybeDoc instanceof Document) {\n      return maybeDoc.version;\n    } else {\n      return SnapshotVersion.min();\n    }\n  }\n}\n\n/**\n * A mutation that creates or replaces the document at the given key with the\n * object value contents.\n */\nexport class SetMutation extends Mutation {\n  constructor(\n    readonly key: DocumentKey,\n    readonly value: ObjectValue,\n    readonly precondition: Precondition\n  ) {\n    super();\n  }\n\n  readonly type: MutationType = MutationType.Set;\n\n  applyToRemoteDocument(\n    maybeDoc: MaybeDocument | null,\n    mutationResult: MutationResult\n  ): MaybeDocument {\n    this.verifyKeyMatches(maybeDoc);\n\n    debugAssert(\n      mutationResult.transformResults == null,\n      'Transform results received by SetMutation.'\n    );\n\n    // Unlike applyToLocalView, if we're applying a mutation to a remote\n    // document the server has accepted the mutation so the precondition must\n    // have held.\n\n    const version = mutationResult.version;\n    return new Document(this.key, version, this.value, {\n      hasCommittedMutations: true\n    });\n  }\n\n  applyToLocalView(\n    maybeDoc: MaybeDocument | null,\n    baseDoc: MaybeDocument | null,\n    localWriteTime: Timestamp\n  ): MaybeDocument | null {\n    this.verifyKeyMatches(maybeDoc);\n\n    if (!this.precondition.isValidFor(maybeDoc)) {\n      return maybeDoc;\n    }\n\n    const version = Mutation.getPostMutationVersion(maybeDoc);\n    return new Document(this.key, version, this.value, {\n      hasLocalMutations: true\n    });\n  }\n\n  extractBaseValue(maybeDoc: MaybeDocument | null): null {\n    return null;\n  }\n\n  isEqual(other: Mutation): boolean {\n    return (\n      other instanceof SetMutation &&\n      this.key.isEqual(other.key) &&\n      this.value.isEqual(other.value) &&\n      this.precondition.isEqual(other.precondition)\n    );\n  }\n}\n\n/**\n * A mutation that modifies fields of the document at the given key with the\n * given values. The values are applied through a field mask:\n *\n *  * When a field is in both the mask and the values, the corresponding field\n *    is updated.\n *  * When a field is in neither the mask nor the values, the corresponding\n *    field is unmodified.\n *  * When a field is in the mask but not in the values, the corresponding field\n *    is deleted.\n *  * When a field is not in the mask but is in the values, the values map is\n *    ignored.\n */\nexport class PatchMutation extends Mutation {\n  constructor(\n    readonly key: DocumentKey,\n    readonly data: ObjectValue,\n    readonly fieldMask: FieldMask,\n    readonly precondition: Precondition\n  ) {\n    super();\n  }\n\n  readonly type: MutationType = MutationType.Patch;\n\n  applyToRemoteDocument(\n    maybeDoc: MaybeDocument | null,\n    mutationResult: MutationResult\n  ): MaybeDocument {\n    this.verifyKeyMatches(maybeDoc);\n\n    debugAssert(\n      mutationResult.transformResults == null,\n      'Transform results received by PatchMutation.'\n    );\n\n    if (!this.precondition.isValidFor(maybeDoc)) {\n      // Since the mutation was not rejected, we know that the  precondition\n      // matched on the backend. We therefore must not have the expected version\n      // of the document in our cache and return an UnknownDocument with the\n      // known updateTime.\n      return new UnknownDocument(this.key, mutationResult.version);\n    }\n\n    const newData = this.patchDocument(maybeDoc);\n    return new Document(this.key, mutationResult.version, newData, {\n      hasCommittedMutations: true\n    });\n  }\n\n  applyToLocalView(\n    maybeDoc: MaybeDocument | null,\n    baseDoc: MaybeDocument | null,\n    localWriteTime: Timestamp\n  ): MaybeDocument | null {\n    this.verifyKeyMatches(maybeDoc);\n\n    if (!this.precondition.isValidFor(maybeDoc)) {\n      return maybeDoc;\n    }\n\n    const version = Mutation.getPostMutationVersion(maybeDoc);\n    const newData = this.patchDocument(maybeDoc);\n    return new Document(this.key, version, newData, {\n      hasLocalMutations: true\n    });\n  }\n\n  extractBaseValue(maybeDoc: MaybeDocument | null): null {\n    return null;\n  }\n\n  isEqual(other: Mutation): boolean {\n    return (\n      other instanceof PatchMutation &&\n      this.key.isEqual(other.key) &&\n      this.fieldMask.isEqual(other.fieldMask) &&\n      this.precondition.isEqual(other.precondition)\n    );\n  }\n\n  /**\n   * Patches the data of document if available or creates a new document. Note\n   * that this does not check whether or not the precondition of this patch\n   * holds.\n   */\n  private patchDocument(maybeDoc: MaybeDocument | null): ObjectValue {\n    let data: ObjectValue;\n    if (maybeDoc instanceof Document) {\n      data = maybeDoc.data();\n    } else {\n      data = ObjectValue.empty();\n    }\n    return this.patchObject(data);\n  }\n\n  private patchObject(data: ObjectValue): ObjectValue {\n    const builder = new ObjectValueBuilder(data);\n    this.fieldMask.fields.forEach(fieldPath => {\n      if (!fieldPath.isEmpty()) {\n        const newValue = this.data.field(fieldPath);\n        if (newValue !== null) {\n          builder.set(fieldPath, newValue);\n        } else {\n          builder.delete(fieldPath);\n        }\n      }\n    });\n    return builder.build();\n  }\n}\n\n/**\n * A mutation that modifies specific fields of the document with transform\n * operations. Currently the only supported transform is a server timestamp, but\n * IP Address, increment(n), etc. could be supported in the future.\n *\n * It is somewhat similar to a PatchMutation in that it patches specific fields\n * and has no effect when applied to a null or NoDocument (see comment on\n * Mutation for rationale).\n */\nexport class TransformMutation extends Mutation {\n  readonly type: MutationType = MutationType.Transform;\n\n  // NOTE: We set a precondition of exists: true as a safety-check, since we\n  // always combine TransformMutations with a SetMutation or PatchMutation which\n  // (if successful) should end up with an existing document.\n  readonly precondition = Precondition.exists(true);\n\n  constructor(\n    readonly key: DocumentKey,\n    readonly fieldTransforms: FieldTransform[]\n  ) {\n    super();\n  }\n\n  applyToRemoteDocument(\n    maybeDoc: MaybeDocument | null,\n    mutationResult: MutationResult\n  ): MaybeDocument {\n    this.verifyKeyMatches(maybeDoc);\n\n    hardAssert(\n      mutationResult.transformResults != null,\n      'Transform results missing for TransformMutation.'\n    );\n\n    if (!this.precondition.isValidFor(maybeDoc)) {\n      // Since the mutation was not rejected, we know that the  precondition\n      // matched on the backend. We therefore must not have the expected version\n      // of the document in our cache and return an UnknownDocument with the\n      // known updateTime.\n      return new UnknownDocument(this.key, mutationResult.version);\n    }\n\n    const doc = this.requireDocument(maybeDoc);\n    const transformResults = this.serverTransformResults(\n      maybeDoc,\n      mutationResult.transformResults!\n    );\n\n    const version = mutationResult.version;\n    const newData = this.transformObject(doc.data(), transformResults);\n    return new Document(this.key, version, newData, {\n      hasCommittedMutations: true\n    });\n  }\n\n  applyToLocalView(\n    maybeDoc: MaybeDocument | null,\n    baseDoc: MaybeDocument | null,\n    localWriteTime: Timestamp\n  ): MaybeDocument | null {\n    this.verifyKeyMatches(maybeDoc);\n\n    if (!this.precondition.isValidFor(maybeDoc)) {\n      return maybeDoc;\n    }\n\n    const doc = this.requireDocument(maybeDoc);\n    const transformResults = this.localTransformResults(\n      localWriteTime,\n      maybeDoc,\n      baseDoc\n    );\n    const newData = this.transformObject(doc.data(), transformResults);\n    return new Document(this.key, doc.version, newData, {\n      hasLocalMutations: true\n    });\n  }\n\n  extractBaseValue(maybeDoc: MaybeDocument | null): ObjectValue | null {\n    let baseObject: ObjectValueBuilder | null = null;\n    for (const fieldTransform of this.fieldTransforms) {\n      const existingValue =\n        maybeDoc instanceof Document\n          ? maybeDoc.field(fieldTransform.field)\n          : undefined;\n      const coercedValue = fieldTransform.transform.computeBaseValue(\n        existingValue || null\n      );\n\n      if (coercedValue != null) {\n        if (baseObject == null) {\n          baseObject = new ObjectValueBuilder().set(\n            fieldTransform.field,\n            coercedValue\n          );\n        } else {\n          baseObject = baseObject.set(fieldTransform.field, coercedValue);\n        }\n      }\n    }\n    return baseObject ? baseObject.build() : null;\n  }\n\n  isEqual(other: Mutation): boolean {\n    return (\n      other instanceof TransformMutation &&\n      this.key.isEqual(other.key) &&\n      arrayEquals(this.fieldTransforms, other.fieldTransforms, (l, r) =>\n        l.isEqual(r)\n      ) &&\n      this.precondition.isEqual(other.precondition)\n    );\n  }\n\n  /**\n   * Asserts that the given MaybeDocument is actually a Document and verifies\n   * that it matches the key for this mutation. Since we only support\n   * transformations with precondition exists this method is guaranteed to be\n   * safe.\n   */\n  private requireDocument(maybeDoc: MaybeDocument | null): Document {\n    debugAssert(\n      maybeDoc instanceof Document,\n      'Unknown MaybeDocument type ' + maybeDoc\n    );\n    debugAssert(\n      maybeDoc.key.isEqual(this.key),\n      'Can only transform a document with the same key'\n    );\n    return maybeDoc;\n  }\n\n  /**\n   * Creates a list of \"transform results\" (a transform result is a field value\n   * representing the result of applying a transform) for use after a\n   * TransformMutation has been acknowledged by the server.\n   *\n   * @param baseDoc The document prior to applying this mutation batch.\n   * @param serverTransformResults The transform results received by the server.\n   * @return The transform results list.\n   */\n  private serverTransformResults(\n    baseDoc: MaybeDocument | null,\n    serverTransformResults: Array<api.Value | null>\n  ): api.Value[] {\n    const transformResults: api.Value[] = [];\n    hardAssert(\n      this.fieldTransforms.length === serverTransformResults.length,\n      `server transform result count (${serverTransformResults.length}) ` +\n        `should match field transform count (${this.fieldTransforms.length})`\n    );\n\n    for (let i = 0; i < serverTransformResults.length; i++) {\n      const fieldTransform = this.fieldTransforms[i];\n      const transform = fieldTransform.transform;\n      let previousValue: api.Value | null = null;\n      if (baseDoc instanceof Document) {\n        previousValue = baseDoc.field(fieldTransform.field);\n      }\n      transformResults.push(\n        transform.applyToRemoteDocument(\n          previousValue,\n          serverTransformResults[i]\n        )\n      );\n    }\n    return transformResults;\n  }\n\n  /**\n   * Creates a list of \"transform results\" (a transform result is a field value\n   * representing the result of applying a transform) for use when applying a\n   * TransformMutation locally.\n   *\n   * @param localWriteTime The local time of the transform mutation (used to\n   *     generate ServerTimestampValues).\n   * @param maybeDoc The current state of the document after applying all\n   *     previous mutations.\n   * @param baseDoc The document prior to applying this mutation batch.\n   * @return The transform results list.\n   */\n  private localTransformResults(\n    localWriteTime: Timestamp,\n    maybeDoc: MaybeDocument | null,\n    baseDoc: MaybeDocument | null\n  ): api.Value[] {\n    const transformResults: api.Value[] = [];\n    for (const fieldTransform of this.fieldTransforms) {\n      const transform = fieldTransform.transform;\n\n      let previousValue: api.Value | null = null;\n      if (maybeDoc instanceof Document) {\n        previousValue = maybeDoc.field(fieldTransform.field);\n      }\n\n      if (previousValue === null && baseDoc instanceof Document) {\n        // If the current document does not contain a value for the mutated\n        // field, use the value that existed before applying this mutation\n        // batch. This solves an edge case where a PatchMutation clears the\n        // values in a nested map before the TransformMutation is applied.\n        previousValue = baseDoc.field(fieldTransform.field);\n      }\n\n      transformResults.push(\n        transform.applyToLocalView(previousValue, localWriteTime)\n      );\n    }\n    return transformResults;\n  }\n\n  private transformObject(\n    data: ObjectValue,\n    transformResults: api.Value[]\n  ): ObjectValue {\n    debugAssert(\n      transformResults.length === this.fieldTransforms.length,\n      'TransformResults length mismatch.'\n    );\n\n    const builder = new ObjectValueBuilder(data);\n    for (let i = 0; i < this.fieldTransforms.length; i++) {\n      const fieldTransform = this.fieldTransforms[i];\n      const fieldPath = fieldTransform.field;\n      builder.set(fieldPath, transformResults[i]);\n    }\n    return builder.build();\n  }\n}\n\n/** A mutation that deletes the document at the given key. */\nexport class DeleteMutation extends Mutation {\n  constructor(readonly key: DocumentKey, readonly precondition: Precondition) {\n    super();\n  }\n\n  readonly type: MutationType = MutationType.Delete;\n\n  applyToRemoteDocument(\n    maybeDoc: MaybeDocument | null,\n    mutationResult: MutationResult\n  ): MaybeDocument {\n    this.verifyKeyMatches(maybeDoc);\n\n    debugAssert(\n      mutationResult.transformResults == null,\n      'Transform results received by DeleteMutation.'\n    );\n\n    // Unlike applyToLocalView, if we're applying a mutation to a remote\n    // document the server has accepted the mutation so the precondition must\n    // have held.\n\n    return new NoDocument(this.key, mutationResult.version, {\n      hasCommittedMutations: true\n    });\n  }\n\n  applyToLocalView(\n    maybeDoc: MaybeDocument | null,\n    baseDoc: MaybeDocument | null,\n    localWriteTime: Timestamp\n  ): MaybeDocument | null {\n    this.verifyKeyMatches(maybeDoc);\n\n    if (!this.precondition.isValidFor(maybeDoc)) {\n      return maybeDoc;\n    }\n\n    if (maybeDoc) {\n      debugAssert(\n        maybeDoc.key.isEqual(this.key),\n        'Can only apply mutation to document with same key'\n      );\n    }\n    return new NoDocument(this.key, SnapshotVersion.min());\n  }\n\n  extractBaseValue(maybeDoc: MaybeDocument | null): null {\n    return null;\n  }\n\n  isEqual(other: Mutation): boolean {\n    return (\n      other instanceof DeleteMutation &&\n      this.key.isEqual(other.key) &&\n      this.precondition.isEqual(other.precondition)\n    );\n  }\n}\n\n/**\n * A mutation that verifies the existence of the document at the given key with\n * the provided precondition.\n *\n * The `verify` operation is only used in Transactions, and this class serves\n * primarily to facilitate serialization into protos.\n */\nexport class VerifyMutation extends Mutation {\n  constructor(readonly key: DocumentKey, readonly precondition: Precondition) {\n    super();\n  }\n\n  readonly type: MutationType = MutationType.Verify;\n\n  applyToRemoteDocument(\n    maybeDoc: MaybeDocument | null,\n    mutationResult: MutationResult\n  ): MaybeDocument {\n    fail('VerifyMutation should only be used in Transactions.');\n  }\n\n  applyToLocalView(\n    maybeDoc: MaybeDocument | null,\n    baseDoc: MaybeDocument | null,\n    localWriteTime: Timestamp\n  ): MaybeDocument | null {\n    fail('VerifyMutation should only be used in Transactions.');\n  }\n\n  extractBaseValue(maybeDoc: MaybeDocument | null): null {\n    fail('VerifyMutation should only be used in Transactions.');\n  }\n\n  isEqual(other: Mutation): boolean {\n    return (\n      other instanceof VerifyMutation &&\n      this.key.isEqual(other.key) &&\n      this.precondition.isEqual(other.precondition)\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '../protos/firestore_proto_api';\n\nimport { debugAssert } from '../util/assert';\nimport { FieldMask } from './mutation';\nimport { FieldPath } from './path';\nimport { isServerTimestamp } from './server_timestamps';\nimport { valueEquals, isMapValue, typeOrder } from './values';\nimport { forEach } from '../util/obj';\n\nexport interface JsonObject<T> {\n  [name: string]: T;\n}\n\nexport const enum TypeOrder {\n  // This order is based on the backend's ordering, but modified to support\n  // server timestamps.\n  NullValue = 0,\n  BooleanValue = 1,\n  NumberValue = 2,\n  TimestampValue = 3,\n  ServerTimestampValue = 4,\n  StringValue = 5,\n  BlobValue = 6,\n  RefValue = 7,\n  GeoPointValue = 8,\n  ArrayValue = 9,\n  ObjectValue = 10\n}\n\n/**\n * An ObjectValue represents a MapValue in the Firestore Proto and offers the\n * ability to add and remove fields (via the ObjectValueBuilder).\n */\nexport class ObjectValue {\n  constructor(public readonly proto: { mapValue: api.MapValue }) {\n    debugAssert(\n      !isServerTimestamp(proto),\n      'ServerTimestamps should be converted to ServerTimestampValue'\n    );\n  }\n\n  static empty(): ObjectValue {\n    return new ObjectValue({ mapValue: {} });\n  }\n\n  /**\n   * Returns the value at the given path or null.\n   *\n   * @param path the path to search\n   * @return The value at the path or if there it doesn't exist.\n   */\n  field(path: FieldPath): api.Value | null {\n    if (path.isEmpty()) {\n      return this.proto;\n    } else {\n      let value: api.Value = this.proto;\n      for (let i = 0; i < path.length - 1; ++i) {\n        if (!value.mapValue!.fields) {\n          return null;\n        }\n        value = value.mapValue!.fields[path.get(i)];\n        if (!isMapValue(value)) {\n          return null;\n        }\n      }\n\n      value = (value.mapValue!.fields || {})[path.lastSegment()];\n      return value || null;\n    }\n  }\n\n  isEqual(other: ObjectValue): boolean {\n    return valueEquals(this.proto, other.proto);\n  }\n}\n\n/**\n * An Overlay, which contains an update to apply. Can either be Value proto, a\n * map of Overlay values (to represent additional nesting at the given key) or\n * `null` (to represent field deletes).\n */\ntype Overlay = Map<string, Overlay> | api.Value | null;\n\n/**\n * An ObjectValueBuilder provides APIs to set and delete fields from an\n * ObjectValue.\n */\nexport class ObjectValueBuilder {\n  /** A map that contains the accumulated changes in this builder. */\n  private overlayMap = new Map<string, Overlay>();\n\n  /**\n   * @param baseObject The object to mutate.\n   */\n  constructor(private readonly baseObject: ObjectValue = ObjectValue.empty()) {}\n\n  /**\n   * Sets the field to the provided value.\n   *\n   * @param path The field path to set.\n   * @param value The value to set.\n   * @return The current Builder instance.\n   */\n  set(path: FieldPath, value: api.Value): ObjectValueBuilder {\n    debugAssert(\n      !path.isEmpty(),\n      'Cannot set field for empty path on ObjectValue'\n    );\n    this.setOverlay(path, value);\n    return this;\n  }\n\n  /**\n   * Removes the field at the specified path. If there is no field at the\n   * specified path, nothing is changed.\n   *\n   * @param path The field path to remove.\n   * @return The current Builder instance.\n   */\n  delete(path: FieldPath): ObjectValueBuilder {\n    debugAssert(\n      !path.isEmpty(),\n      'Cannot delete field for empty path on ObjectValue'\n    );\n    this.setOverlay(path, null);\n    return this;\n  }\n\n  /**\n   * Adds `value` to the overlay map at `path`. Creates nested map entries if\n   * needed.\n   */\n  private setOverlay(path: FieldPath, value: api.Value | null): void {\n    let currentLevel = this.overlayMap;\n\n    for (let i = 0; i < path.length - 1; ++i) {\n      const currentSegment = path.get(i);\n      let currentValue = currentLevel.get(currentSegment);\n\n      if (currentValue instanceof Map) {\n        // Re-use a previously created map\n        currentLevel = currentValue;\n      } else if (\n        currentValue &&\n        typeOrder(currentValue) === TypeOrder.ObjectValue\n      ) {\n        // Convert the existing Protobuf MapValue into a map\n        currentValue = new Map<string, Overlay>(\n          Object.entries(currentValue.mapValue!.fields || {})\n        );\n        currentLevel.set(currentSegment, currentValue);\n        currentLevel = currentValue;\n      } else {\n        // Create an empty map to represent the current nesting level\n        currentValue = new Map<string, Overlay>();\n        currentLevel.set(currentSegment, currentValue);\n        currentLevel = currentValue;\n      }\n    }\n\n    currentLevel.set(path.lastSegment(), value);\n  }\n\n  /** Returns an ObjectValue with all mutations applied. */\n  build(): ObjectValue {\n    const mergedResult = this.applyOverlay(\n      FieldPath.EMPTY_PATH,\n      this.overlayMap\n    );\n    if (mergedResult != null) {\n      return new ObjectValue(mergedResult);\n    } else {\n      return this.baseObject;\n    }\n  }\n\n  /**\n   * Applies any overlays from `currentOverlays` that exist at `currentPath`\n   * and returns the merged data at `currentPath` (or null if there were no\n   * changes).\n   *\n   * @param currentPath The path at the current nesting level. Can be set to\n   * FieldValue.EMPTY_PATH to represent the root.\n   * @param currentOverlays The overlays at the current nesting level in the\n   * same format as `overlayMap`.\n   * @return The merged data at `currentPath` or null if no modifications\n   * were applied.\n   */\n  private applyOverlay(\n    currentPath: FieldPath,\n    currentOverlays: Map<string, Overlay>\n  ): { mapValue: api.MapValue } | null {\n    let modified = false;\n\n    const existingValue = this.baseObject.field(currentPath);\n    const resultAtPath = isMapValue(existingValue)\n      ? // If there is already data at the current path, base our\n        // modifications on top of the existing data.\n        { ...existingValue.mapValue.fields }\n      : {};\n\n    currentOverlays.forEach((value, pathSegment) => {\n      if (value instanceof Map) {\n        const nested = this.applyOverlay(currentPath.child(pathSegment), value);\n        if (nested != null) {\n          resultAtPath[pathSegment] = nested;\n          modified = true;\n        }\n      } else if (value !== null) {\n        resultAtPath[pathSegment] = value;\n        modified = true;\n      } else if (resultAtPath.hasOwnProperty(pathSegment)) {\n        delete resultAtPath[pathSegment];\n        modified = true;\n      }\n    });\n\n    return modified ? { mapValue: { fields: resultAtPath } } : null;\n  }\n}\n\n/**\n * Returns a FieldMask built from all fields in a MapValue.\n */\nexport function extractFieldMask(value: api.MapValue): FieldMask {\n  const fields: FieldPath[] = [];\n  forEach(value!.fields || {}, (key, value) => {\n    const currentPath = new FieldPath([key]);\n    if (isMapValue(value)) {\n      const nestedMask = extractFieldMask(value.mapValue!);\n      const nestedFields = nestedMask.fields;\n      if (nestedFields.length === 0) {\n        // Preserve the empty map by adding it to the FieldMask.\n        fields.push(currentPath);\n      } else {\n        // For nested and non-empty ObjectValues, add the FieldPath of the\n        // leaf nodes.\n        for (const nestedPath of nestedFields) {\n          fields.push(currentPath.child(nestedPath));\n        }\n      }\n    } else {\n      // For nested and non-empty ObjectValues, add the FieldPath of the leaf\n      // nodes.\n      fields.push(currentPath);\n    }\n  });\n  return new FieldMask(fields);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '../protos/firestore_proto_api';\n\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { fail } from '../util/assert';\n\nimport { DocumentKey } from './document_key';\nimport { ObjectValue } from './object_value';\nimport { FieldPath } from './path';\nimport { valueCompare } from './values';\n\nexport interface DocumentOptions {\n  hasLocalMutations?: boolean;\n  hasCommittedMutations?: boolean;\n}\n\n/**\n * The result of a lookup for a given path may be an existing document or a\n * marker that this document does not exist at a given version.\n */\nexport abstract class MaybeDocument {\n  constructor(readonly key: DocumentKey, readonly version: SnapshotVersion) {}\n\n  /**\n   * Whether this document had a local mutation applied that has not yet been\n   * acknowledged by Watch.\n   */\n  abstract get hasPendingWrites(): boolean;\n\n  abstract isEqual(other: MaybeDocument | null | undefined): boolean;\n\n  abstract toString(): string;\n}\n\n/**\n * Represents a document in Firestore with a key, version, data and whether the\n * data has local mutations applied to it.\n */\nexport class Document extends MaybeDocument {\n  readonly hasLocalMutations: boolean;\n  readonly hasCommittedMutations: boolean;\n\n  constructor(\n    key: DocumentKey,\n    version: SnapshotVersion,\n    private readonly objectValue: ObjectValue,\n    options: DocumentOptions\n  ) {\n    super(key, version);\n    this.hasLocalMutations = !!options.hasLocalMutations;\n    this.hasCommittedMutations = !!options.hasCommittedMutations;\n  }\n\n  field(path: FieldPath): api.Value | null {\n    return this.objectValue.field(path);\n  }\n\n  data(): ObjectValue {\n    return this.objectValue;\n  }\n\n  toProto(): { mapValue: api.MapValue } {\n    return this.objectValue.proto;\n  }\n\n  isEqual(other: MaybeDocument | null | undefined): boolean {\n    return (\n      other instanceof Document &&\n      this.key.isEqual(other.key) &&\n      this.version.isEqual(other.version) &&\n      this.hasLocalMutations === other.hasLocalMutations &&\n      this.hasCommittedMutations === other.hasCommittedMutations &&\n      this.objectValue.isEqual(other.objectValue)\n    );\n  }\n\n  toString(): string {\n    return (\n      `Document(${this.key}, ${\n        this.version\n      }, ${this.objectValue.toString()}, ` +\n      `{hasLocalMutations: ${this.hasLocalMutations}}), ` +\n      `{hasCommittedMutations: ${this.hasCommittedMutations}})`\n    );\n  }\n\n  get hasPendingWrites(): boolean {\n    return this.hasLocalMutations || this.hasCommittedMutations;\n  }\n}\n\n/**\n * Compares the value for field `field` in the provided documents. Throws if\n * the field does not exist in both documents.\n */\nexport function compareDocumentsByField(\n  field: FieldPath,\n  d1: Document,\n  d2: Document\n): number {\n  const v1 = d1.field(field);\n  const v2 = d2.field(field);\n  if (v1 !== null && v2 !== null) {\n    return valueCompare(v1, v2);\n  } else {\n    return fail(\"Trying to compare documents on fields that don't exist\");\n  }\n}\n\n/**\n * A class representing a deleted document.\n * Version is set to 0 if we don't point to any specific time, otherwise it\n * denotes time we know it didn't exist at.\n */\nexport class NoDocument extends MaybeDocument {\n  readonly hasCommittedMutations: boolean;\n\n  constructor(\n    key: DocumentKey,\n    version: SnapshotVersion,\n    options?: DocumentOptions\n  ) {\n    super(key, version);\n    this.hasCommittedMutations = !!(options && options.hasCommittedMutations);\n  }\n\n  toString(): string {\n    return `NoDocument(${this.key}, ${this.version})`;\n  }\n\n  get hasPendingWrites(): boolean {\n    return this.hasCommittedMutations;\n  }\n\n  isEqual(other: MaybeDocument | null | undefined): boolean {\n    return (\n      other instanceof NoDocument &&\n      other.hasCommittedMutations === this.hasCommittedMutations &&\n      other.version.isEqual(this.version) &&\n      other.key.isEqual(this.key)\n    );\n  }\n}\n\n/**\n * A class representing an existing document whose data is unknown (e.g. a\n * document that was updated without a known base document).\n */\nexport class UnknownDocument extends MaybeDocument {\n  toString(): string {\n    return `UnknownDocument(${this.key}, ${this.version})`;\n  }\n\n  get hasPendingWrites(): boolean {\n    return true;\n  }\n\n  isEqual(other: MaybeDocument | null | undefined): boolean {\n    return (\n      other instanceof UnknownDocument &&\n      other.version.isEqual(this.version) &&\n      other.key.isEqual(this.key)\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DocumentKey } from '../model/document_key';\nimport { ResourcePath } from '../model/path';\nimport { isNullOrUndefined } from '../util/types';\nimport { Bound, Filter, OrderBy } from './query';\n\n/**\n * A Target represents the WatchTarget representation of a Query, which is used\n * by the LocalStore and the RemoteStore to keep track of and to execute\n * backend queries. While a Query can represent multiple Targets, each Targets\n * maps to a single WatchTarget in RemoteStore and a single TargetData entry\n * in persistence.\n */\nexport class Target {\n  private memoizedCanonicalId: string | null = null;\n\n  /**\n   * Initializes a Target with a path and optional additional query constraints.\n   * Path must currently be empty if this is a collection group query.\n   *\n   * NOTE: you should always construct `Target` from `Query.toTarget` instead of\n   * using this constructor, because `Query` provides an implicit `orderBy`\n   * property.\n   */\n  constructor(\n    readonly path: ResourcePath,\n    readonly collectionGroup: string | null = null,\n    readonly orderBy: OrderBy[] = [],\n    readonly filters: Filter[] = [],\n    readonly limit: number | null = null,\n    readonly startAt: Bound | null = null,\n    readonly endAt: Bound | null = null\n  ) {}\n\n  canonicalId(): string {\n    if (this.memoizedCanonicalId === null) {\n      let canonicalId = this.path.canonicalString();\n      if (this.collectionGroup !== null) {\n        canonicalId += '|cg:' + this.collectionGroup;\n      }\n      canonicalId += '|f:';\n      canonicalId += this.filters.map(f => f.canonicalId()).join(',');\n      canonicalId += '|ob:';\n      canonicalId += this.orderBy.map(o => o.canonicalId()).join(',');\n\n      if (!isNullOrUndefined(this.limit)) {\n        canonicalId += '|l:';\n        canonicalId += this.limit!;\n      }\n      if (this.startAt) {\n        canonicalId += '|lb:';\n        canonicalId += this.startAt.canonicalId();\n      }\n      if (this.endAt) {\n        canonicalId += '|ub:';\n        canonicalId += this.endAt.canonicalId();\n      }\n      this.memoizedCanonicalId = canonicalId;\n    }\n    return this.memoizedCanonicalId;\n  }\n\n  toString(): string {\n    let str = this.path.canonicalString();\n    if (this.collectionGroup !== null) {\n      str += ' collectionGroup=' + this.collectionGroup;\n    }\n    if (this.filters.length > 0) {\n      str += `, filters: [${this.filters.join(', ')}]`;\n    }\n    if (!isNullOrUndefined(this.limit)) {\n      str += ', limit: ' + this.limit;\n    }\n    if (this.orderBy.length > 0) {\n      str += `, orderBy: [${this.orderBy.join(', ')}]`;\n    }\n    if (this.startAt) {\n      str += ', startAt: ' + this.startAt.canonicalId();\n    }\n    if (this.endAt) {\n      str += ', endAt: ' + this.endAt.canonicalId();\n    }\n    return `Target(${str})`;\n  }\n\n  isEqual(other: Target): boolean {\n    if (this.limit !== other.limit) {\n      return false;\n    }\n\n    if (this.orderBy.length !== other.orderBy.length) {\n      return false;\n    }\n\n    for (let i = 0; i < this.orderBy.length; i++) {\n      if (!this.orderBy[i].isEqual(other.orderBy[i])) {\n        return false;\n      }\n    }\n\n    if (this.filters.length !== other.filters.length) {\n      return false;\n    }\n\n    for (let i = 0; i < this.filters.length; i++) {\n      if (!this.filters[i].isEqual(other.filters[i])) {\n        return false;\n      }\n    }\n\n    if (this.collectionGroup !== other.collectionGroup) {\n      return false;\n    }\n\n    if (!this.path.isEqual(other.path)) {\n      return false;\n    }\n\n    if (\n      this.startAt !== null\n        ? !this.startAt.isEqual(other.startAt)\n        : other.startAt !== null\n    ) {\n      return false;\n    }\n\n    return this.endAt !== null\n      ? this.endAt.isEqual(other.endAt)\n      : other.endAt === null;\n  }\n\n  isDocumentQuery(): boolean {\n    return (\n      DocumentKey.isDocumentKey(this.path) &&\n      this.collectionGroup === null &&\n      this.filters.length === 0\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '../protos/firestore_proto_api';\n\nimport { compareDocumentsByField, Document } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport {\n  canonicalId,\n  valueCompare,\n  arrayValueContains,\n  valueEquals,\n  isArray,\n  isNanValue,\n  isNullValue,\n  isReferenceValue,\n  typeOrder\n} from '../model/values';\nimport { FieldPath, ResourcePath } from '../model/path';\nimport { debugAssert, fail } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\nimport { isNullOrUndefined } from '../util/types';\nimport { Target } from './target';\n\nexport const enum LimitType {\n  First = 'F',\n  Last = 'L'\n}\n\n/**\n * Query encapsulates all the query attributes we support in the SDK. It can\n * be run against the LocalStore, as well as be converted to a `Target` to\n * query the RemoteStore results.\n */\nexport class Query {\n  static atPath(path: ResourcePath): Query {\n    return new Query(path);\n  }\n\n  private memoizedOrderBy: OrderBy[] | null = null;\n\n  // The corresponding `Target` of this `Query` instance.\n  private memoizedTarget: Target | null = null;\n\n  /**\n   * Initializes a Query with a path and optional additional query constraints.\n   * Path must currently be empty if this is a collection group query.\n   */\n  constructor(\n    readonly path: ResourcePath,\n    readonly collectionGroup: string | null = null,\n    readonly explicitOrderBy: OrderBy[] = [],\n    readonly filters: Filter[] = [],\n    readonly limit: number | null = null,\n    readonly limitType: LimitType = LimitType.First,\n    readonly startAt: Bound | null = null,\n    readonly endAt: Bound | null = null\n  ) {\n    if (this.startAt) {\n      this.assertValidBound(this.startAt);\n    }\n    if (this.endAt) {\n      this.assertValidBound(this.endAt);\n    }\n  }\n\n  get orderBy(): OrderBy[] {\n    if (this.memoizedOrderBy === null) {\n      this.memoizedOrderBy = [];\n\n      const inequalityField = this.getInequalityFilterField();\n      const firstOrderByField = this.getFirstOrderByField();\n      if (inequalityField !== null && firstOrderByField === null) {\n        // In order to implicitly add key ordering, we must also add the\n        // inequality filter field for it to be a valid query.\n        // Note that the default inequality field and key ordering is ascending.\n        if (!inequalityField.isKeyField()) {\n          this.memoizedOrderBy.push(new OrderBy(inequalityField));\n        }\n        this.memoizedOrderBy.push(\n          new OrderBy(FieldPath.keyField(), Direction.ASCENDING)\n        );\n      } else {\n        debugAssert(\n          inequalityField === null ||\n            (firstOrderByField !== null &&\n              inequalityField.isEqual(firstOrderByField)),\n          'First orderBy should match inequality field.'\n        );\n        let foundKeyOrdering = false;\n        for (const orderBy of this.explicitOrderBy) {\n          this.memoizedOrderBy.push(orderBy);\n          if (orderBy.field.isKeyField()) {\n            foundKeyOrdering = true;\n          }\n        }\n        if (!foundKeyOrdering) {\n          // The order of the implicit key ordering always matches the last\n          // explicit order by\n          const lastDirection =\n            this.explicitOrderBy.length > 0\n              ? this.explicitOrderBy[this.explicitOrderBy.length - 1].dir\n              : Direction.ASCENDING;\n          this.memoizedOrderBy.push(\n            new OrderBy(FieldPath.keyField(), lastDirection)\n          );\n        }\n      }\n    }\n    return this.memoizedOrderBy;\n  }\n\n  addFilter(filter: Filter): Query {\n    debugAssert(\n      this.getInequalityFilterField() == null ||\n        !(filter instanceof FieldFilter) ||\n        !filter.isInequality() ||\n        filter.field.isEqual(this.getInequalityFilterField()!),\n      'Query must only have one inequality field.'\n    );\n\n    debugAssert(\n      !this.isDocumentQuery(),\n      'No filtering allowed for document query'\n    );\n\n    const newFilters = this.filters.concat([filter]);\n    return new Query(\n      this.path,\n      this.collectionGroup,\n      this.explicitOrderBy.slice(),\n      newFilters,\n      this.limit,\n      this.limitType,\n      this.startAt,\n      this.endAt\n    );\n  }\n\n  addOrderBy(orderBy: OrderBy): Query {\n    debugAssert(\n      !this.startAt && !this.endAt,\n      'Bounds must be set after orderBy'\n    );\n    // TODO(dimond): validate that orderBy does not list the same key twice.\n    const newOrderBy = this.explicitOrderBy.concat([orderBy]);\n    return new Query(\n      this.path,\n      this.collectionGroup,\n      newOrderBy,\n      this.filters.slice(),\n      this.limit,\n      this.limitType,\n      this.startAt,\n      this.endAt\n    );\n  }\n\n  withLimitToFirst(limit: number | null): Query {\n    return new Query(\n      this.path,\n      this.collectionGroup,\n      this.explicitOrderBy.slice(),\n      this.filters.slice(),\n      limit,\n      LimitType.First,\n      this.startAt,\n      this.endAt\n    );\n  }\n\n  withLimitToLast(limit: number | null): Query {\n    return new Query(\n      this.path,\n      this.collectionGroup,\n      this.explicitOrderBy.slice(),\n      this.filters.slice(),\n      limit,\n      LimitType.Last,\n      this.startAt,\n      this.endAt\n    );\n  }\n\n  withStartAt(bound: Bound): Query {\n    return new Query(\n      this.path,\n      this.collectionGroup,\n      this.explicitOrderBy.slice(),\n      this.filters.slice(),\n      this.limit,\n      this.limitType,\n      bound,\n      this.endAt\n    );\n  }\n\n  withEndAt(bound: Bound): Query {\n    return new Query(\n      this.path,\n      this.collectionGroup,\n      this.explicitOrderBy.slice(),\n      this.filters.slice(),\n      this.limit,\n      this.limitType,\n      this.startAt,\n      bound\n    );\n  }\n\n  /**\n   * Helper to convert a collection group query into a collection query at a\n   * specific path. This is used when executing collection group queries, since\n   * we have to split the query into a set of collection queries at multiple\n   * paths.\n   */\n  asCollectionQueryAtPath(path: ResourcePath): Query {\n    return new Query(\n      path,\n      /*collectionGroup=*/ null,\n      this.explicitOrderBy.slice(),\n      this.filters.slice(),\n      this.limit,\n      this.limitType,\n      this.startAt,\n      this.endAt\n    );\n  }\n\n  /**\n   * Returns true if this query does not specify any query constraints that\n   * could remove results.\n   */\n  matchesAllDocuments(): boolean {\n    return (\n      this.filters.length === 0 &&\n      this.limit === null &&\n      this.startAt == null &&\n      this.endAt == null &&\n      (this.explicitOrderBy.length === 0 ||\n        (this.explicitOrderBy.length === 1 &&\n          this.explicitOrderBy[0].field.isKeyField()))\n    );\n  }\n\n  // TODO(b/29183165): This is used to get a unique string from a query to, for\n  // example, use as a dictionary key, but the implementation is subject to\n  // collisions. Make it collision-free.\n  canonicalId(): string {\n    return `${this.toTarget().canonicalId()}|lt:${this.limitType}`;\n  }\n\n  toString(): string {\n    return `Query(target=${this.toTarget().toString()}; limitType=${\n      this.limitType\n    })`;\n  }\n\n  isEqual(other: Query): boolean {\n    return (\n      this.toTarget().isEqual(other.toTarget()) &&\n      this.limitType === other.limitType\n    );\n  }\n\n  docComparator(d1: Document, d2: Document): number {\n    let comparedOnKeyField = false;\n    for (const orderBy of this.orderBy) {\n      const comp = orderBy.compare(d1, d2);\n      if (comp !== 0) {\n        return comp;\n      }\n      comparedOnKeyField = comparedOnKeyField || orderBy.field.isKeyField();\n    }\n    // Assert that we actually compared by key\n    debugAssert(\n      comparedOnKeyField,\n      \"orderBy used that doesn't compare on key field\"\n    );\n    return 0;\n  }\n\n  matches(doc: Document): boolean {\n    return (\n      this.matchesPathAndCollectionGroup(doc) &&\n      this.matchesOrderBy(doc) &&\n      this.matchesFilters(doc) &&\n      this.matchesBounds(doc)\n    );\n  }\n\n  hasLimitToFirst(): boolean {\n    return !isNullOrUndefined(this.limit) && this.limitType === LimitType.First;\n  }\n\n  hasLimitToLast(): boolean {\n    return !isNullOrUndefined(this.limit) && this.limitType === LimitType.Last;\n  }\n\n  getFirstOrderByField(): FieldPath | null {\n    return this.explicitOrderBy.length > 0\n      ? this.explicitOrderBy[0].field\n      : null;\n  }\n\n  getInequalityFilterField(): FieldPath | null {\n    for (const filter of this.filters) {\n      if (filter instanceof FieldFilter && filter.isInequality()) {\n        return filter.field;\n      }\n    }\n    return null;\n  }\n\n  // Checks if any of the provided Operators are included in the query and\n  // returns the first one that is, or null if none are.\n  findFilterOperator(operators: Operator[]): Operator | null {\n    for (const filter of this.filters) {\n      if (filter instanceof FieldFilter) {\n        if (operators.indexOf(filter.op) >= 0) {\n          return filter.op;\n        }\n      }\n    }\n    return null;\n  }\n\n  isDocumentQuery(): boolean {\n    return this.toTarget().isDocumentQuery();\n  }\n\n  isCollectionGroupQuery(): boolean {\n    return this.collectionGroup !== null;\n  }\n\n  /**\n   * Converts this `Query` instance to it's corresponding `Target`\n   * representation.\n   */\n  toTarget(): Target {\n    if (!this.memoizedTarget) {\n      if (this.limitType === LimitType.First) {\n        this.memoizedTarget = new Target(\n          this.path,\n          this.collectionGroup,\n          this.orderBy,\n          this.filters,\n          this.limit,\n          this.startAt,\n          this.endAt\n        );\n      } else {\n        // Flip the orderBy directions since we want the last results\n        const orderBys = [] as OrderBy[];\n        for (const orderBy of this.orderBy) {\n          const dir =\n            orderBy.dir === Direction.DESCENDING\n              ? Direction.ASCENDING\n              : Direction.DESCENDING;\n          orderBys.push(new OrderBy(orderBy.field, dir));\n        }\n\n        // We need to swap the cursors to match the now-flipped query ordering.\n        const startAt = this.endAt\n          ? new Bound(this.endAt.position, !this.endAt.before)\n          : null;\n        const endAt = this.startAt\n          ? new Bound(this.startAt.position, !this.startAt.before)\n          : null;\n\n        // Now return as a LimitType.First query.\n        this.memoizedTarget = new Target(\n          this.path,\n          this.collectionGroup,\n          orderBys,\n          this.filters,\n          this.limit,\n          startAt,\n          endAt\n        );\n      }\n    }\n    return this.memoizedTarget!;\n  }\n\n  private matchesPathAndCollectionGroup(doc: Document): boolean {\n    const docPath = doc.key.path;\n    if (this.collectionGroup !== null) {\n      // NOTE: this.path is currently always empty since we don't expose Collection\n      // Group queries rooted at a document path yet.\n      return (\n        doc.key.hasCollectionId(this.collectionGroup) &&\n        this.path.isPrefixOf(docPath)\n      );\n    } else if (DocumentKey.isDocumentKey(this.path)) {\n      // exact match for document queries\n      return this.path.isEqual(docPath);\n    } else {\n      // shallow ancestor queries by default\n      return this.path.isImmediateParentOf(docPath);\n    }\n  }\n\n  /**\n   * A document must have a value for every ordering clause in order to show up\n   * in the results.\n   */\n  private matchesOrderBy(doc: Document): boolean {\n    for (const orderBy of this.explicitOrderBy) {\n      // order by key always matches\n      if (!orderBy.field.isKeyField() && doc.field(orderBy.field) === null) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  private matchesFilters(doc: Document): boolean {\n    for (const filter of this.filters) {\n      if (!filter.matches(doc)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Makes sure a document is within the bounds, if provided.\n   */\n  private matchesBounds(doc: Document): boolean {\n    if (this.startAt && !this.startAt.sortsBeforeDocument(this.orderBy, doc)) {\n      return false;\n    }\n    if (this.endAt && this.endAt.sortsBeforeDocument(this.orderBy, doc)) {\n      return false;\n    }\n    return true;\n  }\n\n  private assertValidBound(bound: Bound): void {\n    debugAssert(\n      bound.position.length <= this.orderBy.length,\n      'Bound is longer than orderBy'\n    );\n  }\n}\n\nexport abstract class Filter {\n  abstract matches(doc: Document): boolean;\n  abstract canonicalId(): string;\n  abstract isEqual(filter: Filter): boolean;\n}\n\nexport const enum Operator {\n  LESS_THAN = '<',\n  LESS_THAN_OR_EQUAL = '<=',\n  EQUAL = '==',\n  GREATER_THAN = '>',\n  GREATER_THAN_OR_EQUAL = '>=',\n  ARRAY_CONTAINS = 'array-contains',\n  IN = 'in',\n  ARRAY_CONTAINS_ANY = 'array-contains-any'\n}\n\nexport class FieldFilter extends Filter {\n  protected constructor(\n    public field: FieldPath,\n    public op: Operator,\n    public value: api.Value\n  ) {\n    super();\n  }\n\n  /**\n   * Creates a filter based on the provided arguments.\n   */\n  static create(field: FieldPath, op: Operator, value: api.Value): FieldFilter {\n    if (field.isKeyField()) {\n      if (op === Operator.IN) {\n        debugAssert(\n          isArray(value),\n          'Comparing on key with IN, but filter value not an ArrayValue'\n        );\n        debugAssert(\n          (value.arrayValue.values || []).every(elem => isReferenceValue(elem)),\n          'Comparing on key with IN, but an array value was not a RefValue'\n        );\n        return new KeyFieldInFilter(field, value);\n      } else {\n        debugAssert(\n          isReferenceValue(value),\n          'Comparing on key, but filter value not a RefValue'\n        );\n        debugAssert(\n          op !== Operator.ARRAY_CONTAINS && op !== Operator.ARRAY_CONTAINS_ANY,\n          `'${op.toString()}' queries don't make sense on document keys.`\n        );\n        return new KeyFieldFilter(field, op, value);\n      }\n    } else if (isNullValue(value)) {\n      if (op !== Operator.EQUAL) {\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          'Invalid query. Null supports only equality comparisons.'\n        );\n      }\n      return new FieldFilter(field, op, value);\n    } else if (isNanValue(value)) {\n      if (op !== Operator.EQUAL) {\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          'Invalid query. NaN supports only equality comparisons.'\n        );\n      }\n      return new FieldFilter(field, op, value);\n    } else if (op === Operator.ARRAY_CONTAINS) {\n      return new ArrayContainsFilter(field, value);\n    } else if (op === Operator.IN) {\n      debugAssert(\n        isArray(value),\n        'IN filter has invalid value: ' + value.toString()\n      );\n      return new InFilter(field, value);\n    } else if (op === Operator.ARRAY_CONTAINS_ANY) {\n      debugAssert(\n        isArray(value),\n        'ARRAY_CONTAINS_ANY filter has invalid value: ' + value.toString()\n      );\n      return new ArrayContainsAnyFilter(field, value);\n    } else {\n      return new FieldFilter(field, op, value);\n    }\n  }\n\n  matches(doc: Document): boolean {\n    const other = doc.field(this.field);\n\n    // Only compare types with matching backend order (such as double and int).\n    return (\n      other !== null &&\n      typeOrder(this.value) === typeOrder(other) &&\n      this.matchesComparison(valueCompare(other, this.value))\n    );\n  }\n\n  protected matchesComparison(comparison: number): boolean {\n    switch (this.op) {\n      case Operator.LESS_THAN:\n        return comparison < 0;\n      case Operator.LESS_THAN_OR_EQUAL:\n        return comparison <= 0;\n      case Operator.EQUAL:\n        return comparison === 0;\n      case Operator.GREATER_THAN:\n        return comparison > 0;\n      case Operator.GREATER_THAN_OR_EQUAL:\n        return comparison >= 0;\n      default:\n        return fail('Unknown FieldFilter operator: ' + this.op);\n    }\n  }\n\n  isInequality(): boolean {\n    return (\n      [\n        Operator.LESS_THAN,\n        Operator.LESS_THAN_OR_EQUAL,\n        Operator.GREATER_THAN,\n        Operator.GREATER_THAN_OR_EQUAL\n      ].indexOf(this.op) >= 0\n    );\n  }\n\n  canonicalId(): string {\n    // TODO(b/29183165): Technically, this won't be unique if two values have\n    // the same description, such as the int 3 and the string \"3\". So we should\n    // add the types in here somehow, too.\n    return (\n      this.field.canonicalString() +\n      this.op.toString() +\n      canonicalId(this.value)\n    );\n  }\n\n  isEqual(other: Filter): boolean {\n    if (other instanceof FieldFilter) {\n      return (\n        this.op === other.op &&\n        this.field.isEqual(other.field) &&\n        valueEquals(this.value, other.value)\n      );\n    } else {\n      return false;\n    }\n  }\n\n  toString(): string {\n    return `${this.field.canonicalString()} ${this.op} ${canonicalId(\n      this.value\n    )}`;\n  }\n}\n\n/** Filter that matches on key fields (i.e. '__name__'). */\nexport class KeyFieldFilter extends FieldFilter {\n  private readonly key: DocumentKey;\n\n  constructor(field: FieldPath, op: Operator, value: api.Value) {\n    super(field, op, value);\n    debugAssert(\n      isReferenceValue(value),\n      'KeyFieldFilter expects a ReferenceValue'\n    );\n    this.key = DocumentKey.fromName(value.referenceValue);\n  }\n\n  matches(doc: Document): boolean {\n    const comparison = DocumentKey.comparator(doc.key, this.key);\n    return this.matchesComparison(comparison);\n  }\n}\n\n/** Filter that matches on key fields within an array. */\nexport class KeyFieldInFilter extends FieldFilter {\n  private readonly keys: DocumentKey[];\n\n  constructor(field: FieldPath, value: api.Value) {\n    super(field, Operator.IN, value);\n    debugAssert(isArray(value), 'KeyFieldInFilter expects an ArrayValue');\n    this.keys = (value.arrayValue.values || []).map(v => {\n      debugAssert(\n        isReferenceValue(v),\n        'Comparing on key with IN, but an array value was not a ReferenceValue'\n      );\n      return DocumentKey.fromName(v.referenceValue);\n    });\n  }\n\n  matches(doc: Document): boolean {\n    return this.keys.some(key => key.isEqual(doc.key));\n  }\n}\n\n/** A Filter that implements the array-contains operator. */\nexport class ArrayContainsFilter extends FieldFilter {\n  constructor(field: FieldPath, value: api.Value) {\n    super(field, Operator.ARRAY_CONTAINS, value);\n  }\n\n  matches(doc: Document): boolean {\n    const other = doc.field(this.field);\n    return isArray(other) && arrayValueContains(other.arrayValue, this.value);\n  }\n}\n\n/** A Filter that implements the IN operator. */\nexport class InFilter extends FieldFilter {\n  constructor(field: FieldPath, value: api.Value) {\n    super(field, Operator.IN, value);\n    debugAssert(isArray(value), 'InFilter expects an ArrayValue');\n  }\n\n  matches(doc: Document): boolean {\n    const other = doc.field(this.field);\n    return other !== null && arrayValueContains(this.value.arrayValue!, other);\n  }\n}\n\n/** A Filter that implements the array-contains-any operator. */\nexport class ArrayContainsAnyFilter extends FieldFilter {\n  constructor(field: FieldPath, value: api.Value) {\n    super(field, Operator.ARRAY_CONTAINS_ANY, value);\n    debugAssert(isArray(value), 'ArrayContainsAnyFilter expects an ArrayValue');\n  }\n\n  matches(doc: Document): boolean {\n    const other = doc.field(this.field);\n    if (!isArray(other) || !other.arrayValue.values) {\n      return false;\n    }\n    return other.arrayValue.values.some(val =>\n      arrayValueContains(this.value.arrayValue!, val)\n    );\n  }\n}\n\n/**\n * The direction of sorting in an order by.\n */\nexport const enum Direction {\n  ASCENDING = 'asc',\n  DESCENDING = 'desc'\n}\n\n/**\n * Represents a bound of a query.\n *\n * The bound is specified with the given components representing a position and\n * whether it's just before or just after the position (relative to whatever the\n * query order is).\n *\n * The position represents a logical index position for a query. It's a prefix\n * of values for the (potentially implicit) order by clauses of a query.\n *\n * Bound provides a function to determine whether a document comes before or\n * after a bound. This is influenced by whether the position is just before or\n * just after the provided values.\n */\nexport class Bound {\n  constructor(readonly position: api.Value[], readonly before: boolean) {}\n\n  canonicalId(): string {\n    // TODO(b/29183165): Make this collision robust.\n    return `${this.before ? 'b' : 'a'}:${this.position\n      .map(p => canonicalId(p))\n      .join(',')}`;\n  }\n\n  /**\n   * Returns true if a document sorts before a bound using the provided sort\n   * order.\n   */\n  sortsBeforeDocument(orderBy: OrderBy[], doc: Document): boolean {\n    debugAssert(\n      this.position.length <= orderBy.length,\n      \"Bound has more components than query's orderBy\"\n    );\n    let comparison = 0;\n    for (let i = 0; i < this.position.length; i++) {\n      const orderByComponent = orderBy[i];\n      const component = this.position[i];\n      if (orderByComponent.field.isKeyField()) {\n        debugAssert(\n          isReferenceValue(component),\n          'Bound has a non-key value where the key path is being used.'\n        );\n        comparison = DocumentKey.comparator(\n          DocumentKey.fromName(component.referenceValue),\n          doc.key\n        );\n      } else {\n        const docValue = doc.field(orderByComponent.field);\n        debugAssert(\n          docValue !== null,\n          'Field should exist since document matched the orderBy already.'\n        );\n        comparison = valueCompare(component, docValue);\n      }\n      if (orderByComponent.dir === Direction.DESCENDING) {\n        comparison = comparison * -1;\n      }\n      if (comparison !== 0) {\n        break;\n      }\n    }\n    return this.before ? comparison <= 0 : comparison < 0;\n  }\n\n  isEqual(other: Bound | null): boolean {\n    if (other === null) {\n      return false;\n    }\n    if (\n      this.before !== other.before ||\n      this.position.length !== other.position.length\n    ) {\n      return false;\n    }\n    for (let i = 0; i < this.position.length; i++) {\n      const thisPosition = this.position[i];\n      const otherPosition = other.position[i];\n      if (!valueEquals(thisPosition, otherPosition)) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n\n/**\n * An ordering on a field, in some Direction. Direction defaults to ASCENDING.\n */\nexport class OrderBy {\n  readonly dir: Direction;\n  private readonly isKeyOrderBy: boolean;\n\n  constructor(readonly field: FieldPath, dir?: Direction) {\n    if (dir === undefined) {\n      dir = Direction.ASCENDING;\n    }\n    this.dir = dir;\n    this.isKeyOrderBy = field.isKeyField();\n  }\n\n  compare(d1: Document, d2: Document): number {\n    const comparison = this.isKeyOrderBy\n      ? DocumentKey.comparator(d1.key, d2.key)\n      : compareDocumentsByField(this.field, d1, d2);\n    switch (this.dir) {\n      case Direction.ASCENDING:\n        return comparison;\n      case Direction.DESCENDING:\n        return -1 * comparison;\n      default:\n        return fail('Unknown direction: ' + this.dir);\n    }\n  }\n\n  canonicalId(): string {\n    // TODO(b/29183165): Make this collision robust.\n    return this.field.canonicalString() + this.dir.toString();\n  }\n\n  toString(): string {\n    return `${this.field.canonicalString()} (${this.dir})`;\n  }\n\n  isEqual(other: OrderBy): boolean {\n    return this.dir === other.dir && this.field.isEqual(other.field);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { Target } from '../core/target';\nimport { ListenSequenceNumber, TargetId } from '../core/types';\nimport { ByteString } from '../util/byte_string';\n\n/** An enumeration of the different purposes we have for targets. */\nexport const enum TargetPurpose {\n  /** A regular, normal query target. */\n  Listen,\n\n  /**\n   * The query target was used to refill a query after an existence filter mismatch.\n   */\n  ExistenceFilterMismatch,\n\n  /** The query target was used to resolve a limbo document. */\n  LimboResolution\n}\n\n/**\n * An immutable set of metadata that the local store tracks for each target.\n */\nexport class TargetData {\n  constructor(\n    /** The target being listened to. */\n    readonly target: Target,\n    /**\n     * The target ID to which the target corresponds; Assigned by the\n     * LocalStore for user listens and by the SyncEngine for limbo watches.\n     */\n    readonly targetId: TargetId,\n    /** The purpose of the target. */\n    readonly purpose: TargetPurpose,\n    /**\n     * The sequence number of the last transaction during which this target data\n     * was modified.\n     */\n    readonly sequenceNumber: ListenSequenceNumber,\n    /** The latest snapshot version seen for this target. */\n    readonly snapshotVersion: SnapshotVersion = SnapshotVersion.min(),\n    /**\n     * The maximum snapshot version at which the associated view\n     * contained no limbo documents.\n     */\n    readonly lastLimboFreeSnapshotVersion: SnapshotVersion = SnapshotVersion.min(),\n    /**\n     * An opaque, server-assigned token that allows watching a target to be\n     * resumed after disconnecting without retransmitting all the data that\n     * matches the target. The resume token essentially identifies a point in\n     * time from which the server should resume sending results.\n     */\n    readonly resumeToken: ByteString = ByteString.EMPTY_BYTE_STRING\n  ) {}\n\n  /** Creates a new target data instance with an updated sequence number. */\n  withSequenceNumber(sequenceNumber: number): TargetData {\n    return new TargetData(\n      this.target,\n      this.targetId,\n      this.purpose,\n      sequenceNumber,\n      this.snapshotVersion,\n      this.lastLimboFreeSnapshotVersion,\n      this.resumeToken\n    );\n  }\n\n  /**\n   * Creates a new target data instance with an updated resume token and\n   * snapshot version.\n   */\n  withResumeToken(\n    resumeToken: ByteString,\n    snapshotVersion: SnapshotVersion\n  ): TargetData {\n    return new TargetData(\n      this.target,\n      this.targetId,\n      this.purpose,\n      this.sequenceNumber,\n      snapshotVersion,\n      this.lastLimboFreeSnapshotVersion,\n      resumeToken\n    );\n  }\n\n  /**\n   * Creates a new target data instance with an updated last limbo free\n   * snapshot version number.\n   */\n  withLastLimboFreeSnapshotVersion(\n    lastLimboFreeSnapshotVersion: SnapshotVersion\n  ): TargetData {\n    return new TargetData(\n      this.target,\n      this.targetId,\n      this.purpose,\n      this.sequenceNumber,\n      this.snapshotVersion,\n      lastLimboFreeSnapshotVersion,\n      this.resumeToken\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class ExistenceFilter {\n  // TODO(b/33078163): just use simplest form of existence filter for now\n  constructor(public count: number) {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { fail } from '../util/assert';\nimport { Code } from '../util/error';\nimport { logError } from '../util/log';\n\n/**\n * Error Codes describing the different ways GRPC can fail. These are copied\n * directly from GRPC's sources here:\n *\n * https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h\n *\n * Important! The names of these identifiers matter because the string forms\n * are used for reverse lookups from the webchannel stream. Do NOT change the\n * names of these identifiers or change this into a const enum.\n */\nenum RpcCode {\n  OK = 0,\n  CANCELLED = 1,\n  UNKNOWN = 2,\n  INVALID_ARGUMENT = 3,\n  DEADLINE_EXCEEDED = 4,\n  NOT_FOUND = 5,\n  ALREADY_EXISTS = 6,\n  PERMISSION_DENIED = 7,\n  UNAUTHENTICATED = 16,\n  RESOURCE_EXHAUSTED = 8,\n  FAILED_PRECONDITION = 9,\n  ABORTED = 10,\n  OUT_OF_RANGE = 11,\n  UNIMPLEMENTED = 12,\n  INTERNAL = 13,\n  UNAVAILABLE = 14,\n  DATA_LOSS = 15\n}\n\n/**\n * Determines whether an error code represents a permanent error when received\n * in response to a non-write operation.\n *\n * See isPermanentWriteError for classifying write errors.\n */\nexport function isPermanentError(code: Code): boolean {\n  switch (code) {\n    case Code.OK:\n      return fail('Treated status OK as error');\n    case Code.CANCELLED:\n    case Code.UNKNOWN:\n    case Code.DEADLINE_EXCEEDED:\n    case Code.RESOURCE_EXHAUSTED:\n    case Code.INTERNAL:\n    case Code.UNAVAILABLE:\n    // Unauthenticated means something went wrong with our token and we need\n    // to retry with new credentials which will happen automatically.\n    case Code.UNAUTHENTICATED:\n      return false;\n    case Code.INVALID_ARGUMENT:\n    case Code.NOT_FOUND:\n    case Code.ALREADY_EXISTS:\n    case Code.PERMISSION_DENIED:\n    case Code.FAILED_PRECONDITION:\n    // Aborted might be retried in some scenarios, but that is dependant on\n    // the context and should handled individually by the calling code.\n    // See https://cloud.google.com/apis/design/errors.\n    case Code.ABORTED:\n    case Code.OUT_OF_RANGE:\n    case Code.UNIMPLEMENTED:\n    case Code.DATA_LOSS:\n      return true;\n    default:\n      return fail('Unknown status code: ' + code);\n  }\n}\n\n/**\n * Determines whether an error code represents a permanent error when received\n * in response to a write operation.\n *\n * Write operations must be handled specially because as of b/119437764, ABORTED\n * errors on the write stream should be retried too (even though ABORTED errors\n * are not generally retryable).\n *\n * Note that during the initial handshake on the write stream an ABORTED error\n * signals that we should discard our stream token (i.e. it is permanent). This\n * means a handshake error should be classified with isPermanentError, above.\n */\nexport function isPermanentWriteError(code: Code): boolean {\n  return isPermanentError(code) && code !== Code.ABORTED;\n}\n\n/**\n * Maps an error Code from a GRPC status identifier like 'NOT_FOUND'.\n *\n * @returns The Code equivalent to the given status string or undefined if\n *     there is no match.\n */\nexport function mapCodeFromRpcStatus(status: string): Code | undefined {\n  // lookup by string\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const code: RpcCode = RpcCode[status as any] as any;\n  if (code === undefined) {\n    return undefined;\n  }\n\n  return mapCodeFromRpcCode(code);\n}\n\n/**\n * Maps an error Code from GRPC status code number, like 0, 1, or 14. These\n * are not the same as HTTP status codes.\n *\n * @returns The Code equivalent to the given GRPC status code. Fails if there\n *     is no match.\n */\nexport function mapCodeFromRpcCode(code: number | undefined): Code {\n  if (code === undefined) {\n    // This shouldn't normally happen, but in certain error cases (like trying\n    // to send invalid proto messages) we may get an error with no GRPC code.\n    logError('GRPC error has no .code');\n    return Code.UNKNOWN;\n  }\n\n  switch (code) {\n    case RpcCode.OK:\n      return Code.OK;\n    case RpcCode.CANCELLED:\n      return Code.CANCELLED;\n    case RpcCode.UNKNOWN:\n      return Code.UNKNOWN;\n    case RpcCode.DEADLINE_EXCEEDED:\n      return Code.DEADLINE_EXCEEDED;\n    case RpcCode.RESOURCE_EXHAUSTED:\n      return Code.RESOURCE_EXHAUSTED;\n    case RpcCode.INTERNAL:\n      return Code.INTERNAL;\n    case RpcCode.UNAVAILABLE:\n      return Code.UNAVAILABLE;\n    case RpcCode.UNAUTHENTICATED:\n      return Code.UNAUTHENTICATED;\n    case RpcCode.INVALID_ARGUMENT:\n      return Code.INVALID_ARGUMENT;\n    case RpcCode.NOT_FOUND:\n      return Code.NOT_FOUND;\n    case RpcCode.ALREADY_EXISTS:\n      return Code.ALREADY_EXISTS;\n    case RpcCode.PERMISSION_DENIED:\n      return Code.PERMISSION_DENIED;\n    case RpcCode.FAILED_PRECONDITION:\n      return Code.FAILED_PRECONDITION;\n    case RpcCode.ABORTED:\n      return Code.ABORTED;\n    case RpcCode.OUT_OF_RANGE:\n      return Code.OUT_OF_RANGE;\n    case RpcCode.UNIMPLEMENTED:\n      return Code.UNIMPLEMENTED;\n    case RpcCode.DATA_LOSS:\n      return Code.DATA_LOSS;\n    default:\n      return fail('Unknown status code: ' + code);\n  }\n}\n\n/**\n * Maps an RPC code from a Code. This is the reverse operation from\n * mapCodeFromRpcCode and should really only be used in tests.\n */\nexport function mapRpcCodeFromCode(code: Code | undefined): number {\n  if (code === undefined) {\n    return RpcCode.OK;\n  }\n\n  switch (code) {\n    case Code.OK:\n      return RpcCode.OK;\n    case Code.CANCELLED:\n      return RpcCode.CANCELLED;\n    case Code.UNKNOWN:\n      return RpcCode.UNKNOWN;\n    case Code.DEADLINE_EXCEEDED:\n      return RpcCode.DEADLINE_EXCEEDED;\n    case Code.RESOURCE_EXHAUSTED:\n      return RpcCode.RESOURCE_EXHAUSTED;\n    case Code.INTERNAL:\n      return RpcCode.INTERNAL;\n    case Code.UNAVAILABLE:\n      return RpcCode.UNAVAILABLE;\n    case Code.UNAUTHENTICATED:\n      return RpcCode.UNAUTHENTICATED;\n    case Code.INVALID_ARGUMENT:\n      return RpcCode.INVALID_ARGUMENT;\n    case Code.NOT_FOUND:\n      return RpcCode.NOT_FOUND;\n    case Code.ALREADY_EXISTS:\n      return RpcCode.ALREADY_EXISTS;\n    case Code.PERMISSION_DENIED:\n      return RpcCode.PERMISSION_DENIED;\n    case Code.FAILED_PRECONDITION:\n      return RpcCode.FAILED_PRECONDITION;\n    case Code.ABORTED:\n      return RpcCode.ABORTED;\n    case Code.OUT_OF_RANGE:\n      return RpcCode.OUT_OF_RANGE;\n    case Code.UNIMPLEMENTED:\n      return RpcCode.UNIMPLEMENTED;\n    case Code.DATA_LOSS:\n      return RpcCode.DATA_LOSS;\n    default:\n      return fail('Unknown status code: ' + code);\n  }\n}\n\n/**\n * Converts an HTTP Status Code to the equivalent error code.\n *\n * @param status An HTTP Status Code, like 200, 404, 503, etc.\n * @returns The equivalent Code. Unknown status codes are mapped to\n *     Code.UNKNOWN.\n */\nexport function mapCodeFromHttpStatus(status: number): Code {\n  // The canonical error codes for Google APIs [1] specify mapping onto HTTP\n  // status codes but the mapping is not bijective. In each case of ambiguity\n  // this function chooses a primary error.\n  //\n  // [1]\n  // https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\n  switch (status) {\n    case 200: // OK\n      return Code.OK;\n\n    case 400: // Bad Request\n      return Code.INVALID_ARGUMENT;\n    // Other possibilities based on the forward mapping\n    // return Code.FAILED_PRECONDITION;\n    // return Code.OUT_OF_RANGE;\n\n    case 401: // Unauthorized\n      return Code.UNAUTHENTICATED;\n\n    case 403: // Forbidden\n      return Code.PERMISSION_DENIED;\n\n    case 404: // Not Found\n      return Code.NOT_FOUND;\n\n    case 409: // Conflict\n      return Code.ABORTED;\n    // Other possibilities:\n    // return Code.ALREADY_EXISTS;\n\n    case 416: // Range Not Satisfiable\n      return Code.OUT_OF_RANGE;\n\n    case 429: // Too Many Requests\n      return Code.RESOURCE_EXHAUSTED;\n\n    case 499: // Client Closed Request\n      return Code.CANCELLED;\n\n    case 500: // Internal Server Error\n      return Code.UNKNOWN;\n    // Other possibilities:\n    // return Code.INTERNAL;\n    // return Code.DATA_LOSS;\n\n    case 501: // Unimplemented\n      return Code.UNIMPLEMENTED;\n\n    case 503: // Service Unavailable\n      return Code.UNAVAILABLE;\n\n    case 504: // Gateway Timeout\n      return Code.DEADLINE_EXCEEDED;\n\n    default:\n      if (status >= 200 && status < 300) {\n        return Code.OK;\n      }\n      if (status >= 400 && status < 500) {\n        return Code.FAILED_PRECONDITION;\n      }\n      if (status >= 500 && status < 600) {\n        return Code.INTERNAL;\n      }\n      return Code.UNKNOWN;\n  }\n}\n\n/**\n * Converts an HTTP response's error status to the equivalent error code.\n *\n * @param status An HTTP error response status (\"FAILED_PRECONDITION\",\n * \"UNKNOWN\", etc.)\n * @returns The equivalent Code. Non-matching responses are mapped to\n *     Code.UNKNOWN.\n */\nexport function mapCodeFromHttpResponseErrorStatus(status: string): Code {\n  const serverError = status.toLowerCase().replace('_', '-');\n  return Object.values(Code).indexOf(serverError as Code) >= 0\n    ? (serverError as Code)\n    : Code.UNKNOWN;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { debugAssert, fail } from './assert';\n\n/*\n * Implementation of an immutable SortedMap using a Left-leaning\n * Red-Black Tree, adapted from the implementation in Mugs\n * (http://mads379.github.com/mugs/) by Mads Hartmann Jensen\n * (mads379@gmail.com).\n *\n * Original paper on Left-leaning Red-Black Trees:\n *   http://www.cs.princeton.edu/~rs/talks/LLRB/LLRB.pdf\n *\n * Invariant 1: No red node has a red child\n * Invariant 2: Every leaf path has the same number of black nodes\n * Invariant 3: Only the left child can be red (left leaning)\n */\n\nexport type Comparator<K> = (key1: K, key2: K) => number;\n\nexport interface Entry<K, V> {\n  key: K;\n  value: V;\n}\n\n// An immutable sorted map implementation, based on a Left-leaning Red-Black\n// tree.\nexport class SortedMap<K, V> {\n  // visible for testing\n  root: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n\n  constructor(\n    public comparator: Comparator<K>,\n    root?: LLRBNode<K, V> | LLRBEmptyNode<K, V>\n  ) {\n    this.root = root ? root : LLRBNode.EMPTY;\n  }\n\n  // Returns a copy of the map, with the specified key/value added or replaced.\n  insert(key: K, value: V): SortedMap<K, V> {\n    return new SortedMap<K, V>(\n      this.comparator,\n      this.root\n        .insert(key, value, this.comparator)\n        .copy(null, null, LLRBNode.BLACK, null, null)\n    );\n  }\n\n  // Returns a copy of the map, with the specified key removed.\n  remove(key: K): SortedMap<K, V> {\n    return new SortedMap<K, V>(\n      this.comparator,\n      this.root\n        .remove(key, this.comparator)\n        .copy(null, null, LLRBNode.BLACK, null, null)\n    );\n  }\n\n  // Returns the value of the node with the given key, or null.\n  get(key: K): V | null {\n    let node = this.root;\n    while (!node.isEmpty()) {\n      const cmp = this.comparator(key, node.key);\n      if (cmp === 0) {\n        return node.value;\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        node = node.right;\n      }\n    }\n    return null;\n  }\n\n  // Returns the index of the element in this sorted map, or -1 if it doesn't\n  // exist.\n  indexOf(key: K): number {\n    // Number of nodes that were pruned when descending right\n    let prunedNodes = 0;\n    let node = this.root;\n    while (!node.isEmpty()) {\n      const cmp = this.comparator(key, node.key);\n      if (cmp === 0) {\n        return prunedNodes + node.left.size;\n      } else if (cmp < 0) {\n        node = node.left;\n      } else {\n        // Count all nodes left of the node plus the node itself\n        prunedNodes += node.left.size + 1;\n        node = node.right;\n      }\n    }\n    // Node not found\n    return -1;\n  }\n\n  isEmpty(): boolean {\n    return this.root.isEmpty();\n  }\n\n  // Returns the total number of nodes in the map.\n  get size(): number {\n    return this.root.size;\n  }\n\n  // Returns the minimum key in the map.\n  minKey(): K | null {\n    return this.root.minKey();\n  }\n\n  // Returns the maximum key in the map.\n  maxKey(): K | null {\n    return this.root.maxKey();\n  }\n\n  // Traverses the map in key order and calls the specified action function\n  // for each key/value pair. If action returns true, traversal is aborted.\n  // Returns the first truthy value returned by action, or the last falsey\n  // value returned by action.\n  inorderTraversal<T>(action: (k: K, v: V) => T): T {\n    return (this.root as LLRBNode<K, V>).inorderTraversal(action);\n  }\n\n  forEach(fn: (k: K, v: V) => void): void {\n    this.inorderTraversal((k, v) => {\n      fn(k, v);\n      return false;\n    });\n  }\n\n  toString(): string {\n    const descriptions: string[] = [];\n    this.inorderTraversal((k, v) => {\n      descriptions.push(`${k}:${v}`);\n      return false;\n    });\n    return `{${descriptions.join(', ')}}`;\n  }\n\n  // Traverses the map in reverse key order and calls the specified action\n  // function for each key/value pair. If action returns true, traversal is\n  // aborted.\n  // Returns the first truthy value returned by action, or the last falsey\n  // value returned by action.\n  reverseTraversal<T>(action: (k: K, v: V) => T): T {\n    return (this.root as LLRBNode<K, V>).reverseTraversal(action);\n  }\n\n  // Returns an iterator over the SortedMap.\n  getIterator(): SortedMapIterator<K, V> {\n    return new SortedMapIterator<K, V>(this.root, null, this.comparator, false);\n  }\n\n  getIteratorFrom(key: K): SortedMapIterator<K, V> {\n    return new SortedMapIterator<K, V>(this.root, key, this.comparator, false);\n  }\n\n  getReverseIterator(): SortedMapIterator<K, V> {\n    return new SortedMapIterator<K, V>(this.root, null, this.comparator, true);\n  }\n\n  getReverseIteratorFrom(key: K): SortedMapIterator<K, V> {\n    return new SortedMapIterator<K, V>(this.root, key, this.comparator, true);\n  }\n} // end SortedMap\n\n// An iterator over an LLRBNode.\nexport class SortedMapIterator<K, V> {\n  private isReverse: boolean;\n  private nodeStack: Array<LLRBNode<K, V> | LLRBEmptyNode<K, V>>;\n\n  constructor(\n    node: LLRBNode<K, V> | LLRBEmptyNode<K, V>,\n    startKey: K | null,\n    comparator: Comparator<K>,\n    isReverse: boolean\n  ) {\n    this.isReverse = isReverse;\n    this.nodeStack = [];\n\n    let cmp = 1;\n    while (!node.isEmpty()) {\n      cmp = startKey ? comparator(node.key, startKey) : 1;\n      // flip the comparison if we're going in reverse\n      if (isReverse) {\n        cmp *= -1;\n      }\n\n      if (cmp < 0) {\n        // This node is less than our start key. ignore it\n        if (this.isReverse) {\n          node = node.left;\n        } else {\n          node = node.right;\n        }\n      } else if (cmp === 0) {\n        // This node is exactly equal to our start key. Push it on the stack,\n        // but stop iterating;\n        this.nodeStack.push(node);\n        break;\n      } else {\n        // This node is greater than our start key, add it to the stack and move\n        // to the next one\n        this.nodeStack.push(node);\n        if (this.isReverse) {\n          node = node.right;\n        } else {\n          node = node.left;\n        }\n      }\n    }\n  }\n\n  getNext(): Entry<K, V> {\n    debugAssert(\n      this.nodeStack.length > 0,\n      'getNext() called on iterator when hasNext() is false.'\n    );\n\n    let node = this.nodeStack.pop()!;\n    const result = { key: node.key, value: node.value };\n\n    if (this.isReverse) {\n      node = node.left;\n      while (!node.isEmpty()) {\n        this.nodeStack.push(node);\n        node = node.right;\n      }\n    } else {\n      node = node.right;\n      while (!node.isEmpty()) {\n        this.nodeStack.push(node);\n        node = node.left;\n      }\n    }\n\n    return result;\n  }\n\n  hasNext(): boolean {\n    return this.nodeStack.length > 0;\n  }\n\n  peek(): Entry<K, V> | null {\n    if (this.nodeStack.length === 0) {\n      return null;\n    }\n\n    const node = this.nodeStack[this.nodeStack.length - 1];\n    return { key: node.key, value: node.value };\n  }\n} // end SortedMapIterator\n\n// Represents a node in a Left-leaning Red-Black tree.\nexport class LLRBNode<K, V> {\n  readonly color: boolean;\n  readonly left: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  readonly right: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  readonly size: number;\n\n  // Empty node is shared between all LLRB trees.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  static EMPTY: LLRBEmptyNode<any, any> = null as any;\n\n  static RED = true;\n  static BLACK = false;\n\n  constructor(\n    public key: K,\n    public value: V,\n    color?: boolean,\n    left?: LLRBNode<K, V> | LLRBEmptyNode<K, V>,\n    right?: LLRBNode<K, V> | LLRBEmptyNode<K, V>\n  ) {\n    this.color = color != null ? color : LLRBNode.RED;\n    this.left = left != null ? left : LLRBNode.EMPTY;\n    this.right = right != null ? right : LLRBNode.EMPTY;\n    this.size = this.left.size + 1 + this.right.size;\n  }\n\n  // Returns a copy of the current node, optionally replacing pieces of it.\n  copy(\n    key: K | null,\n    value: V | null,\n    color: boolean | null,\n    left: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ): LLRBNode<K, V> {\n    return new LLRBNode<K, V>(\n      key != null ? key : this.key,\n      value != null ? value : this.value,\n      color != null ? color : this.color,\n      left != null ? left : this.left,\n      right != null ? right : this.right\n    );\n  }\n\n  isEmpty(): boolean {\n    return false;\n  }\n\n  // Traverses the tree in key order and calls the specified action function\n  // for each node. If action returns true, traversal is aborted.\n  // Returns the first truthy value returned by action, or the last falsey\n  // value returned by action.\n  inorderTraversal<T>(action: (k: K, v: V) => T): T {\n    return (\n      (this.left as LLRBNode<K, V>).inorderTraversal(action) ||\n      action(this.key, this.value) ||\n      (this.right as LLRBNode<K, V>).inorderTraversal(action)\n    );\n  }\n\n  // Traverses the tree in reverse key order and calls the specified action\n  // function for each node. If action returns true, traversal is aborted.\n  // Returns the first truthy value returned by action, or the last falsey\n  // value returned by action.\n  reverseTraversal<T>(action: (k: K, v: V) => T): T {\n    return (\n      (this.right as LLRBNode<K, V>).reverseTraversal(action) ||\n      action(this.key, this.value) ||\n      (this.left as LLRBNode<K, V>).reverseTraversal(action)\n    );\n  }\n\n  // Returns the minimum node in the tree.\n  private min(): LLRBNode<K, V> {\n    if (this.left.isEmpty()) {\n      return this;\n    } else {\n      return (this.left as LLRBNode<K, V>).min();\n    }\n  }\n\n  // Returns the maximum key in the tree.\n  minKey(): K | null {\n    return this.min().key;\n  }\n\n  // Returns the maximum key in the tree.\n  maxKey(): K | null {\n    if (this.right.isEmpty()) {\n      return this.key;\n    } else {\n      return this.right.maxKey();\n    }\n  }\n\n  // Returns new tree, with the key/value added.\n  insert(key: K, value: V, comparator: Comparator<K>): LLRBNode<K, V> {\n    let n: LLRBNode<K, V> = this;\n    const cmp = comparator(key, n.key);\n    if (cmp < 0) {\n      n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\n    } else if (cmp === 0) {\n      n = n.copy(null, value, null, null, null);\n    } else {\n      n = n.copy(\n        null,\n        null,\n        null,\n        null,\n        n.right.insert(key, value, comparator)\n      );\n    }\n    return n.fixUp();\n  }\n\n  private removeMin(): LLRBNode<K, V> | LLRBEmptyNode<K, V> {\n    if (this.left.isEmpty()) {\n      return LLRBNode.EMPTY;\n    }\n    let n: LLRBNode<K, V> = this;\n    if (!n.left.isRed() && !n.left.left.isRed()) {\n      n = n.moveRedLeft();\n    }\n    n = n.copy(null, null, null, (n.left as LLRBNode<K, V>).removeMin(), null);\n    return n.fixUp();\n  }\n\n  // Returns new tree, with the specified item removed.\n  remove(\n    key: K,\n    comparator: Comparator<K>\n  ): LLRBNode<K, V> | LLRBEmptyNode<K, V> {\n    let smallest: LLRBNode<K, V>;\n    let n: LLRBNode<K, V> = this;\n    if (comparator(key, n.key) < 0) {\n      if (!n.left.isEmpty() && !n.left.isRed() && !n.left.left.isRed()) {\n        n = n.moveRedLeft();\n      }\n      n = n.copy(null, null, null, n.left.remove(key, comparator), null);\n    } else {\n      if (n.left.isRed()) {\n        n = n.rotateRight();\n      }\n      if (!n.right.isEmpty() && !n.right.isRed() && !n.right.left.isRed()) {\n        n = n.moveRedRight();\n      }\n      if (comparator(key, n.key) === 0) {\n        if (n.right.isEmpty()) {\n          return LLRBNode.EMPTY;\n        } else {\n          smallest = (n.right as LLRBNode<K, V>).min();\n          n = n.copy(\n            smallest.key,\n            smallest.value,\n            null,\n            null,\n            (n.right as LLRBNode<K, V>).removeMin()\n          );\n        }\n      }\n      n = n.copy(null, null, null, null, n.right.remove(key, comparator));\n    }\n    return n.fixUp();\n  }\n\n  isRed(): boolean {\n    return this.color;\n  }\n\n  // Returns new tree after performing any needed rotations.\n  private fixUp(): LLRBNode<K, V> {\n    let n: LLRBNode<K, V> = this;\n    if (n.right.isRed() && !n.left.isRed()) {\n      n = n.rotateLeft();\n    }\n    if (n.left.isRed() && n.left.left.isRed()) {\n      n = n.rotateRight();\n    }\n    if (n.left.isRed() && n.right.isRed()) {\n      n = n.colorFlip();\n    }\n    return n;\n  }\n\n  private moveRedLeft(): LLRBNode<K, V> {\n    let n = this.colorFlip();\n    if (n.right.left.isRed()) {\n      n = n.copy(\n        null,\n        null,\n        null,\n        null,\n        (n.right as LLRBNode<K, V>).rotateRight()\n      );\n      n = n.rotateLeft();\n      n = n.colorFlip();\n    }\n    return n;\n  }\n\n  private moveRedRight(): LLRBNode<K, V> {\n    let n = this.colorFlip();\n    if (n.left.left.isRed()) {\n      n = n.rotateRight();\n      n = n.colorFlip();\n    }\n    return n;\n  }\n\n  private rotateLeft(): LLRBNode<K, V> {\n    const nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\n    return (this.right as LLRBNode<K, V>).copy(\n      null,\n      null,\n      this.color,\n      nl,\n      null\n    );\n  }\n\n  private rotateRight(): LLRBNode<K, V> {\n    const nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\n    return (this.left as LLRBNode<K, V>).copy(null, null, this.color, null, nr);\n  }\n\n  private colorFlip(): LLRBNode<K, V> {\n    const left = this.left.copy(null, null, !this.left.color, null, null);\n    const right = this.right.copy(null, null, !this.right.color, null, null);\n    return this.copy(null, null, !this.color, left, right);\n  }\n\n  // For testing.\n  checkMaxDepth(): boolean {\n    const blackDepth = this.check();\n    if (Math.pow(2.0, blackDepth) <= this.size + 1) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  // In a balanced RB tree, the black-depth (number of black nodes) from root to\n  // leaves is equal on both sides.  This function verifies that or asserts.\n  protected check(): number {\n    if (this.isRed() && this.left.isRed()) {\n      throw fail('Red node has red child(' + this.key + ',' + this.value + ')');\n    }\n    if (this.right.isRed()) {\n      throw fail('Right child of (' + this.key + ',' + this.value + ') is red');\n    }\n    const blackDepth = (this.left as LLRBNode<K, V>).check();\n    if (blackDepth !== (this.right as LLRBNode<K, V>).check()) {\n      throw fail('Black depths differ');\n    } else {\n      return blackDepth + (this.isRed() ? 0 : 1);\n    }\n  }\n} // end LLRBNode\n\n// Represents an empty node (a leaf node in the Red-Black Tree).\nexport class LLRBEmptyNode<K, V> {\n  get key(): never {\n    throw fail('LLRBEmptyNode has no key.');\n  }\n  get value(): never {\n    throw fail('LLRBEmptyNode has no value.');\n  }\n  get color(): never {\n    throw fail('LLRBEmptyNode has no color.');\n  }\n  get left(): never {\n    throw fail('LLRBEmptyNode has no left child.');\n  }\n  get right(): never {\n    throw fail('LLRBEmptyNode has no right child.');\n  }\n  size = 0;\n\n  // Returns a copy of the current node.\n  copy(\n    key: K | null,\n    value: V | null,\n    color: boolean | null,\n    left: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ): LLRBEmptyNode<K, V> {\n    return this;\n  }\n\n  // Returns a copy of the tree, with the specified key/value added.\n  insert(key: K, value: V, comparator: Comparator<K>): LLRBNode<K, V> {\n    return new LLRBNode<K, V>(key, value);\n  }\n\n  // Returns a copy of the tree, with the specified key removed.\n  remove(key: K, comparator: Comparator<K>): LLRBEmptyNode<K, V> {\n    return this;\n  }\n\n  isEmpty(): boolean {\n    return true;\n  }\n\n  inorderTraversal(action: (k: K, v: V) => boolean): boolean {\n    return false;\n  }\n\n  reverseTraversal(action: (k: K, v: V) => boolean): boolean {\n    return false;\n  }\n\n  minKey(): K | null {\n    return null;\n  }\n\n  maxKey(): K | null {\n    return null;\n  }\n\n  isRed(): boolean {\n    return false;\n  }\n\n  // For testing.\n  checkMaxDepth(): boolean {\n    return true;\n  }\n\n  protected check(): 0 {\n    return 0;\n  }\n} // end LLRBEmptyNode\n\nLLRBNode.EMPTY = new LLRBEmptyNode<unknown, unknown>();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SortedMap, SortedMapIterator } from './sorted_map';\n\n/**\n * SortedSet is an immutable (copy-on-write) collection that holds elements\n * in order specified by the provided comparator.\n *\n * NOTE: if provided comparator returns 0 for two elements, we consider them to\n * be equal!\n */\nexport class SortedSet<T> {\n  private data: SortedMap<T, boolean>;\n\n  constructor(private comparator: (left: T, right: T) => number) {\n    this.data = new SortedMap<T, boolean>(this.comparator);\n  }\n\n  has(elem: T): boolean {\n    return this.data.get(elem) !== null;\n  }\n\n  first(): T | null {\n    return this.data.minKey();\n  }\n\n  last(): T | null {\n    return this.data.maxKey();\n  }\n\n  get size(): number {\n    return this.data.size;\n  }\n\n  indexOf(elem: T): number {\n    return this.data.indexOf(elem);\n  }\n\n  /** Iterates elements in order defined by \"comparator\" */\n  forEach(cb: (elem: T) => void): void {\n    this.data.inorderTraversal((k: T, v: boolean) => {\n      cb(k);\n      return false;\n    });\n  }\n\n  /** Iterates over `elem`s such that: range[0] <= elem < range[1]. */\n  forEachInRange(range: [T, T], cb: (elem: T) => void): void {\n    const iter = this.data.getIteratorFrom(range[0]);\n    while (iter.hasNext()) {\n      const elem = iter.getNext();\n      if (this.comparator(elem.key, range[1]) >= 0) {\n        return;\n      }\n      cb(elem.key);\n    }\n  }\n\n  /**\n   * Iterates over `elem`s such that: start <= elem until false is returned.\n   */\n  forEachWhile(cb: (elem: T) => boolean, start?: T): void {\n    let iter: SortedMapIterator<T, boolean>;\n    if (start !== undefined) {\n      iter = this.data.getIteratorFrom(start);\n    } else {\n      iter = this.data.getIterator();\n    }\n    while (iter.hasNext()) {\n      const elem = iter.getNext();\n      const result = cb(elem.key);\n      if (!result) {\n        return;\n      }\n    }\n  }\n\n  /** Finds the least element greater than or equal to `elem`. */\n  firstAfterOrEqual(elem: T): T | null {\n    const iter = this.data.getIteratorFrom(elem);\n    return iter.hasNext() ? iter.getNext().key : null;\n  }\n\n  getIterator(): SortedSetIterator<T> {\n    return new SortedSetIterator<T>(this.data.getIterator());\n  }\n\n  getIteratorFrom(key: T): SortedSetIterator<T> {\n    return new SortedSetIterator<T>(this.data.getIteratorFrom(key));\n  }\n\n  /** Inserts or updates an element */\n  add(elem: T): SortedSet<T> {\n    return this.copy(this.data.remove(elem).insert(elem, true));\n  }\n\n  /** Deletes an element */\n  delete(elem: T): SortedSet<T> {\n    if (!this.has(elem)) {\n      return this;\n    }\n    return this.copy(this.data.remove(elem));\n  }\n\n  isEmpty(): boolean {\n    return this.data.isEmpty();\n  }\n\n  unionWith(other: SortedSet<T>): SortedSet<T> {\n    let result: SortedSet<T> = this;\n\n    // Make sure `result` always refers to the larger one of the two sets.\n    if (result.size < other.size) {\n      result = other;\n      other = this;\n    }\n\n    other.forEach(elem => {\n      result = result.add(elem);\n    });\n    return result;\n  }\n\n  isEqual(other: SortedSet<T>): boolean {\n    if (!(other instanceof SortedSet)) {\n      return false;\n    }\n    if (this.size !== other.size) {\n      return false;\n    }\n\n    const thisIt = this.data.getIterator();\n    const otherIt = other.data.getIterator();\n    while (thisIt.hasNext()) {\n      const thisElem = thisIt.getNext().key;\n      const otherElem = otherIt.getNext().key;\n      if (this.comparator(thisElem, otherElem) !== 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  toArray(): T[] {\n    const res: T[] = [];\n    this.forEach(targetId => {\n      res.push(targetId);\n    });\n    return res;\n  }\n\n  toString(): string {\n    const result: T[] = [];\n    this.forEach(elem => result.push(elem));\n    return 'SortedSet(' + result.toString() + ')';\n  }\n\n  private copy(data: SortedMap<T, boolean>): SortedSet<T> {\n    const result = new SortedSet(this.comparator);\n    result.data = data;\n    return result;\n  }\n}\n\nexport class SortedSetIterator<T> {\n  constructor(private iter: SortedMapIterator<T, boolean>) {}\n\n  getNext(): T {\n    return this.iter.getNext().key;\n  }\n\n  hasNext(): boolean {\n    return this.iter.hasNext();\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { SortedMap } from '../util/sorted_map';\nimport { SortedSet } from '../util/sorted_set';\n\nimport { TargetId } from '../core/types';\nimport { primitiveComparator } from '../util/misc';\nimport { Document, MaybeDocument } from './document';\nimport { DocumentKey } from './document_key';\n\n/** Miscellaneous collection types / constants. */\nexport interface DocumentSizeEntry {\n  maybeDocument: MaybeDocument;\n  size: number;\n}\n\nexport type MaybeDocumentMap = SortedMap<DocumentKey, MaybeDocument>;\nconst EMPTY_MAYBE_DOCUMENT_MAP = new SortedMap<DocumentKey, MaybeDocument>(\n  DocumentKey.comparator\n);\nexport function maybeDocumentMap(): MaybeDocumentMap {\n  return EMPTY_MAYBE_DOCUMENT_MAP;\n}\n\nexport type NullableMaybeDocumentMap = SortedMap<\n  DocumentKey,\n  MaybeDocument | null\n>;\n\nexport function nullableMaybeDocumentMap(): NullableMaybeDocumentMap {\n  return maybeDocumentMap();\n}\n\nexport interface DocumentSizeEntries {\n  maybeDocuments: NullableMaybeDocumentMap;\n  sizeMap: SortedMap<DocumentKey, number>;\n}\n\nexport type DocumentMap = SortedMap<DocumentKey, Document>;\nconst EMPTY_DOCUMENT_MAP = new SortedMap<DocumentKey, Document>(\n  DocumentKey.comparator\n);\nexport function documentMap(): DocumentMap {\n  return EMPTY_DOCUMENT_MAP;\n}\n\nexport type DocumentVersionMap = SortedMap<DocumentKey, SnapshotVersion>;\nconst EMPTY_DOCUMENT_VERSION_MAP = new SortedMap<DocumentKey, SnapshotVersion>(\n  DocumentKey.comparator\n);\nexport function documentVersionMap(): DocumentVersionMap {\n  return EMPTY_DOCUMENT_VERSION_MAP;\n}\n\nexport type DocumentKeySet = SortedSet<DocumentKey>;\nconst EMPTY_DOCUMENT_KEY_SET = new SortedSet(DocumentKey.comparator);\nexport function documentKeySet(...keys: DocumentKey[]): DocumentKeySet {\n  let set = EMPTY_DOCUMENT_KEY_SET;\n  for (const key of keys) {\n    set = set.add(key);\n  }\n  return set;\n}\n\nexport type TargetIdSet = SortedSet<TargetId>;\nconst EMPTY_TARGET_ID_SET = new SortedSet<TargetId>(primitiveComparator);\nexport function targetIdSet(): SortedSet<TargetId> {\n  return EMPTY_TARGET_ID_SET;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SortedMap } from '../util/sorted_map';\n\nimport { documentMap } from './collections';\nimport { Document } from './document';\nimport { DocumentComparator } from './document_comparator';\nimport { DocumentKey } from './document_key';\n\n/**\n * DocumentSet is an immutable (copy-on-write) collection that holds documents\n * in order specified by the provided comparator. We always add a document key\n * comparator on top of what is provided to guarantee document equality based on\n * the key.\n */\n\nexport class DocumentSet {\n  /**\n   * Returns an empty copy of the existing DocumentSet, using the same\n   * comparator.\n   */\n  static emptySet(oldSet: DocumentSet): DocumentSet {\n    return new DocumentSet(oldSet.comparator);\n  }\n\n  private comparator: DocumentComparator;\n  private keyedMap: SortedMap<DocumentKey, Document>;\n  private sortedSet: SortedMap<Document, null>;\n\n  /** The default ordering is by key if the comparator is omitted */\n  constructor(comp?: DocumentComparator) {\n    // We are adding document key comparator to the end as it's the only\n    // guaranteed unique property of a document.\n    if (comp) {\n      this.comparator = (d1: Document, d2: Document) =>\n        comp(d1, d2) || DocumentKey.comparator(d1.key, d2.key);\n    } else {\n      this.comparator = (d1: Document, d2: Document) =>\n        DocumentKey.comparator(d1.key, d2.key);\n    }\n\n    this.keyedMap = documentMap();\n    this.sortedSet = new SortedMap<Document, null>(this.comparator);\n  }\n\n  has(key: DocumentKey): boolean {\n    return this.keyedMap.get(key) != null;\n  }\n\n  get(key: DocumentKey): Document | null {\n    return this.keyedMap.get(key);\n  }\n\n  first(): Document | null {\n    return this.sortedSet.minKey();\n  }\n\n  last(): Document | null {\n    return this.sortedSet.maxKey();\n  }\n\n  isEmpty(): boolean {\n    return this.sortedSet.isEmpty();\n  }\n\n  /**\n   * Returns the index of the provided key in the document set, or -1 if the\n   * document key is not present in the set;\n   */\n  indexOf(key: DocumentKey): number {\n    const doc = this.keyedMap.get(key);\n    return doc ? this.sortedSet.indexOf(doc) : -1;\n  }\n\n  get size(): number {\n    return this.sortedSet.size;\n  }\n\n  /** Iterates documents in order defined by \"comparator\" */\n  forEach(cb: (doc: Document) => void): void {\n    this.sortedSet.inorderTraversal((k, v) => {\n      cb(k);\n      return false;\n    });\n  }\n\n  /** Inserts or updates a document with the same key */\n  add(doc: Document): DocumentSet {\n    // First remove the element if we have it.\n    const set = this.delete(doc.key);\n    return set.copy(\n      set.keyedMap.insert(doc.key, doc),\n      set.sortedSet.insert(doc, null)\n    );\n  }\n\n  /** Deletes a document with a given key */\n  delete(key: DocumentKey): DocumentSet {\n    const doc = this.get(key);\n    if (!doc) {\n      return this;\n    }\n\n    return this.copy(this.keyedMap.remove(key), this.sortedSet.remove(doc));\n  }\n\n  isEqual(other: DocumentSet | null | undefined): boolean {\n    if (!(other instanceof DocumentSet)) {\n      return false;\n    }\n    if (this.size !== other.size) {\n      return false;\n    }\n\n    const thisIt = this.sortedSet.getIterator();\n    const otherIt = other.sortedSet.getIterator();\n    while (thisIt.hasNext()) {\n      const thisDoc = thisIt.getNext().key;\n      const otherDoc = otherIt.getNext().key;\n      if (!thisDoc.isEqual(otherDoc)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  toString(): string {\n    const docStrings: string[] = [];\n    this.forEach(doc => {\n      docStrings.push(doc.toString());\n    });\n    if (docStrings.length === 0) {\n      return 'DocumentSet ()';\n    } else {\n      return 'DocumentSet (\\n  ' + docStrings.join('  \\n') + '\\n)';\n    }\n  }\n\n  private copy(\n    keyedMap: SortedMap<DocumentKey, Document>,\n    sortedSet: SortedMap<Document, null>\n  ): DocumentSet {\n    const newSet = new DocumentSet();\n    newSet.comparator = this.comparator;\n    newSet.keyedMap = keyedMap;\n    newSet.sortedSet = sortedSet;\n    return newSet;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Document } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { DocumentSet } from '../model/document_set';\nimport { fail } from '../util/assert';\nimport { SortedMap } from '../util/sorted_map';\n\nimport { DocumentKeySet } from '../model/collections';\nimport { Query } from './query';\n\nexport const enum ChangeType {\n  Added,\n  Removed,\n  Modified,\n  Metadata\n}\n\nexport interface DocumentViewChange {\n  type: ChangeType;\n  doc: Document;\n}\n\nexport const enum SyncState {\n  Local,\n  Synced\n}\n\n/**\n * DocumentChangeSet keeps track of a set of changes to docs in a query, merging\n * duplicate events for the same doc.\n */\nexport class DocumentChangeSet {\n  private changeMap = new SortedMap<DocumentKey, DocumentViewChange>(\n    DocumentKey.comparator\n  );\n\n  track(change: DocumentViewChange): void {\n    const key = change.doc.key;\n    const oldChange = this.changeMap.get(key);\n    if (!oldChange) {\n      this.changeMap = this.changeMap.insert(key, change);\n      return;\n    }\n\n    // Merge the new change with the existing change.\n    if (\n      change.type !== ChangeType.Added &&\n      oldChange.type === ChangeType.Metadata\n    ) {\n      this.changeMap = this.changeMap.insert(key, change);\n    } else if (\n      change.type === ChangeType.Metadata &&\n      oldChange.type !== ChangeType.Removed\n    ) {\n      this.changeMap = this.changeMap.insert(key, {\n        type: oldChange.type,\n        doc: change.doc\n      });\n    } else if (\n      change.type === ChangeType.Modified &&\n      oldChange.type === ChangeType.Modified\n    ) {\n      this.changeMap = this.changeMap.insert(key, {\n        type: ChangeType.Modified,\n        doc: change.doc\n      });\n    } else if (\n      change.type === ChangeType.Modified &&\n      oldChange.type === ChangeType.Added\n    ) {\n      this.changeMap = this.changeMap.insert(key, {\n        type: ChangeType.Added,\n        doc: change.doc\n      });\n    } else if (\n      change.type === ChangeType.Removed &&\n      oldChange.type === ChangeType.Added\n    ) {\n      this.changeMap = this.changeMap.remove(key);\n    } else if (\n      change.type === ChangeType.Removed &&\n      oldChange.type === ChangeType.Modified\n    ) {\n      this.changeMap = this.changeMap.insert(key, {\n        type: ChangeType.Removed,\n        doc: oldChange.doc\n      });\n    } else if (\n      change.type === ChangeType.Added &&\n      oldChange.type === ChangeType.Removed\n    ) {\n      this.changeMap = this.changeMap.insert(key, {\n        type: ChangeType.Modified,\n        doc: change.doc\n      });\n    } else {\n      // This includes these cases, which don't make sense:\n      // Added->Added\n      // Removed->Removed\n      // Modified->Added\n      // Removed->Modified\n      // Metadata->Added\n      // Removed->Metadata\n      fail(\n        'unsupported combination of changes: ' +\n          JSON.stringify(change) +\n          ' after ' +\n          JSON.stringify(oldChange)\n      );\n    }\n  }\n\n  getChanges(): DocumentViewChange[] {\n    const changes: DocumentViewChange[] = [];\n    this.changeMap.inorderTraversal(\n      (key: DocumentKey, change: DocumentViewChange) => {\n        changes.push(change);\n      }\n    );\n    return changes;\n  }\n}\n\nexport class ViewSnapshot {\n  constructor(\n    readonly query: Query,\n    readonly docs: DocumentSet,\n    readonly oldDocs: DocumentSet,\n    readonly docChanges: DocumentViewChange[],\n    readonly mutatedKeys: DocumentKeySet,\n    readonly fromCache: boolean,\n    readonly syncStateChanged: boolean,\n    readonly excludesMetadataChanges: boolean\n  ) {}\n\n  /** Returns a view snapshot as if all documents in the snapshot were added. */\n  static fromInitialDocuments(\n    query: Query,\n    documents: DocumentSet,\n    mutatedKeys: DocumentKeySet,\n    fromCache: boolean\n  ): ViewSnapshot {\n    const changes: DocumentViewChange[] = [];\n    documents.forEach(doc => {\n      changes.push({ type: ChangeType.Added, doc });\n    });\n\n    return new ViewSnapshot(\n      query,\n      documents,\n      DocumentSet.emptySet(documents),\n      changes,\n      mutatedKeys,\n      fromCache,\n      /* syncStateChanged= */ true,\n      /* excludesMetadataChanges= */ false\n    );\n  }\n\n  get hasPendingWrites(): boolean {\n    return !this.mutatedKeys.isEmpty();\n  }\n\n  isEqual(other: ViewSnapshot): boolean {\n    if (\n      this.fromCache !== other.fromCache ||\n      this.syncStateChanged !== other.syncStateChanged ||\n      !this.mutatedKeys.isEqual(other.mutatedKeys) ||\n      !this.query.isEqual(other.query) ||\n      !this.docs.isEqual(other.docs) ||\n      !this.oldDocs.isEqual(other.oldDocs)\n    ) {\n      return false;\n    }\n    const changes: DocumentViewChange[] = this.docChanges;\n    const otherChanges: DocumentViewChange[] = other.docChanges;\n    if (changes.length !== otherChanges.length) {\n      return false;\n    }\n    for (let i = 0; i < changes.length; i++) {\n      if (\n        changes[i].type !== otherChanges[i].type ||\n        !changes[i].doc.isEqual(otherChanges[i].doc)\n      ) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { TargetId } from '../core/types';\nimport {\n  documentKeySet,\n  DocumentKeySet,\n  maybeDocumentMap,\n  MaybeDocumentMap,\n  targetIdSet\n} from '../model/collections';\nimport { SortedSet } from '../util/sorted_set';\nimport { ByteString } from '../util/byte_string';\n\n/**\n * An event from the RemoteStore. It is split into targetChanges (changes to the\n * state or the set of documents in our watched targets) and documentUpdates\n * (changes to the actual documents).\n */\nexport class RemoteEvent {\n  constructor(\n    /**\n     * The snapshot version this event brings us up to, or MIN if not set.\n     */\n    readonly snapshotVersion: SnapshotVersion,\n    /**\n     * A map from target to changes to the target. See TargetChange.\n     */\n    readonly targetChanges: Map<TargetId, TargetChange>,\n    /**\n     * A set of targets that is known to be inconsistent. Listens for these\n     * targets should be re-established without resume tokens.\n     */\n    readonly targetMismatches: SortedSet<TargetId>,\n    /**\n     * A set of which documents have changed or been deleted, along with the\n     * doc's new values (if not deleted).\n     */\n    readonly documentUpdates: MaybeDocumentMap,\n    /**\n     * A set of which document updates are due only to limbo resolution targets.\n     */\n    readonly resolvedLimboDocuments: DocumentKeySet\n  ) {}\n\n  /**\n   * HACK: Views require RemoteEvents in order to determine whether the view is\n   * CURRENT, but secondary tabs don't receive remote events. So this method is\n   * used to create a synthesized RemoteEvent that can be used to apply a\n   * CURRENT status change to a View, for queries executed in a different tab.\n   */\n  // PORTING NOTE: Multi-tab only\n  static createSynthesizedRemoteEventForCurrentChange(\n    targetId: TargetId,\n    current: boolean\n  ): RemoteEvent {\n    const targetChanges = new Map<TargetId, TargetChange>();\n    targetChanges.set(\n      targetId,\n      TargetChange.createSynthesizedTargetChangeForCurrentChange(\n        targetId,\n        current\n      )\n    );\n    return new RemoteEvent(\n      SnapshotVersion.min(),\n      targetChanges,\n      targetIdSet(),\n      maybeDocumentMap(),\n      documentKeySet()\n    );\n  }\n}\n\n/**\n * A TargetChange specifies the set of changes for a specific target as part of\n * a RemoteEvent. These changes track which documents are added, modified or\n * removed, as well as the target's resume token and whether the target is\n * marked CURRENT.\n * The actual changes *to* documents are not part of the TargetChange since\n * documents may be part of multiple targets.\n */\nexport class TargetChange {\n  constructor(\n    /**\n     * An opaque, server-assigned token that allows watching a query to be resumed\n     * after disconnecting without retransmitting all the data that matches the\n     * query. The resume token essentially identifies a point in time from which\n     * the server should resume sending results.\n     */\n    readonly resumeToken: ByteString,\n    /**\n     * The \"current\" (synced) status of this target. Note that \"current\"\n     * has special meaning in the RPC protocol that implies that a target is\n     * both up-to-date and consistent with the rest of the watch stream.\n     */\n    readonly current: boolean,\n    /**\n     * The set of documents that were newly assigned to this target as part of\n     * this remote event.\n     */\n    readonly addedDocuments: DocumentKeySet,\n    /**\n     * The set of documents that were already assigned to this target but received\n     * an update during this remote event.\n     */\n    readonly modifiedDocuments: DocumentKeySet,\n    /**\n     * The set of documents that were removed from this target as part of this\n     * remote event.\n     */\n    readonly removedDocuments: DocumentKeySet\n  ) {}\n\n  /**\n   * This method is used to create a synthesized TargetChanges that can be used to\n   * apply a CURRENT status change to a View (for queries executed in a different\n   * tab) or for new queries (to raise snapshots with correct CURRENT status).\n   */\n  static createSynthesizedTargetChangeForCurrentChange(\n    targetId: TargetId,\n    current: boolean\n  ): TargetChange {\n    return new TargetChange(\n      ByteString.EMPTY_BYTE_STRING,\n      current,\n      documentKeySet(),\n      documentKeySet(),\n      documentKeySet()\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { TargetId } from '../core/types';\nimport { ChangeType } from '../core/view_snapshot';\nimport { TargetData, TargetPurpose } from '../local/target_data';\nimport {\n  documentKeySet,\n  DocumentKeySet,\n  maybeDocumentMap\n} from '../model/collections';\nimport { Document, MaybeDocument, NoDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { debugAssert, fail, hardAssert } from '../util/assert';\nimport { FirestoreError } from '../util/error';\nimport { logDebug } from '../util/log';\nimport { primitiveComparator } from '../util/misc';\nimport { SortedMap } from '../util/sorted_map';\nimport { SortedSet } from '../util/sorted_set';\nimport { ExistenceFilter } from './existence_filter';\nimport { RemoteEvent, TargetChange } from './remote_event';\nimport { ByteString } from '../util/byte_string';\n\n/**\n * Internal representation of the watcher API protocol buffers.\n */\nexport type WatchChange =\n  | DocumentWatchChange\n  | WatchTargetChange\n  | ExistenceFilterChange;\n\n/**\n * Represents a changed document and a list of target ids to which this change\n * applies.\n *\n * If document has been deleted NoDocument will be provided.\n */\nexport class DocumentWatchChange {\n  constructor(\n    /** The new document applies to all of these targets. */\n    public updatedTargetIds: TargetId[],\n    /** The new document is removed from all of these targets. */\n    public removedTargetIds: TargetId[],\n    /** The key of the document for this change. */\n    public key: DocumentKey,\n    /**\n     * The new document or NoDocument if it was deleted. Is null if the\n     * document went out of view without the server sending a new document.\n     */\n    public newDoc: MaybeDocument | null\n  ) {}\n}\n\nexport class ExistenceFilterChange {\n  constructor(\n    public targetId: TargetId,\n    public existenceFilter: ExistenceFilter\n  ) {}\n}\n\nexport const enum WatchTargetChangeState {\n  NoChange,\n  Added,\n  Removed,\n  Current,\n  Reset\n}\n\nexport class WatchTargetChange {\n  constructor(\n    /** What kind of change occurred to the watch target. */\n    public state: WatchTargetChangeState,\n    /** The target IDs that were added/removed/set. */\n    public targetIds: TargetId[],\n    /**\n     * An opaque, server-assigned token that allows watching a target to be\n     * resumed after disconnecting without retransmitting all the data that\n     * matches the target. The resume token essentially identifies a point in\n     * time from which the server should resume sending results.\n     */\n    public resumeToken: ByteString = ByteString.EMPTY_BYTE_STRING,\n    /** An RPC error indicating why the watch failed. */\n    public cause: FirestoreError | null = null\n  ) {}\n}\n\n/** Tracks the internal state of a Watch target. */\nclass TargetState {\n  /**\n   * The number of pending responses (adds or removes) that we are waiting on.\n   * We only consider targets active that have no pending responses.\n   */\n  private pendingResponses = 0;\n\n  /**\n   * Keeps track of the document changes since the last raised snapshot.\n   *\n   * These changes are continuously updated as we receive document updates and\n   * always reflect the current set of changes against the last issued snapshot.\n   */\n  private documentChanges: SortedMap<\n    DocumentKey,\n    ChangeType\n  > = snapshotChangesMap();\n\n  /** See public getters for explanations of these fields. */\n  private _resumeToken: ByteString = ByteString.EMPTY_BYTE_STRING;\n  private _current = false;\n\n  /**\n   * Whether this target state should be included in the next snapshot. We\n   * initialize to true so that newly-added targets are included in the next\n   * RemoteEvent.\n   */\n  private _hasPendingChanges = true;\n\n  /**\n   * Whether this target has been marked 'current'.\n   *\n   * 'Current' has special meaning in the RPC protocol: It implies that the\n   * Watch backend has sent us all changes up to the point at which the target\n   * was added and that the target is consistent with the rest of the watch\n   * stream.\n   */\n  get current(): boolean {\n    return this._current;\n  }\n\n  /** The last resume token sent to us for this target. */\n  get resumeToken(): ByteString {\n    return this._resumeToken;\n  }\n\n  /** Whether this target has pending target adds or target removes. */\n  get isPending(): boolean {\n    return this.pendingResponses !== 0;\n  }\n\n  /** Whether we have modified any state that should trigger a snapshot. */\n  get hasPendingChanges(): boolean {\n    return this._hasPendingChanges;\n  }\n\n  /**\n   * Applies the resume token to the TargetChange, but only when it has a new\n   * value. Empty resumeTokens are discarded.\n   */\n  updateResumeToken(resumeToken: ByteString): void {\n    if (resumeToken.approximateByteSize() > 0) {\n      this._hasPendingChanges = true;\n      this._resumeToken = resumeToken;\n    }\n  }\n\n  /**\n   * Creates a target change from the current set of changes.\n   *\n   * To reset the document changes after raising this snapshot, call\n   * `clearPendingChanges()`.\n   */\n  toTargetChange(): TargetChange {\n    let addedDocuments = documentKeySet();\n    let modifiedDocuments = documentKeySet();\n    let removedDocuments = documentKeySet();\n\n    this.documentChanges.forEach((key, changeType) => {\n      switch (changeType) {\n        case ChangeType.Added:\n          addedDocuments = addedDocuments.add(key);\n          break;\n        case ChangeType.Modified:\n          modifiedDocuments = modifiedDocuments.add(key);\n          break;\n        case ChangeType.Removed:\n          removedDocuments = removedDocuments.add(key);\n          break;\n        default:\n          fail('Encountered invalid change type: ' + changeType);\n      }\n    });\n\n    return new TargetChange(\n      this._resumeToken,\n      this._current,\n      addedDocuments,\n      modifiedDocuments,\n      removedDocuments\n    );\n  }\n\n  /**\n   * Resets the document changes and sets `hasPendingChanges` to false.\n   */\n  clearPendingChanges(): void {\n    this._hasPendingChanges = false;\n    this.documentChanges = snapshotChangesMap();\n  }\n\n  addDocumentChange(key: DocumentKey, changeType: ChangeType): void {\n    this._hasPendingChanges = true;\n    this.documentChanges = this.documentChanges.insert(key, changeType);\n  }\n\n  removeDocumentChange(key: DocumentKey): void {\n    this._hasPendingChanges = true;\n    this.documentChanges = this.documentChanges.remove(key);\n  }\n\n  recordPendingTargetRequest(): void {\n    this.pendingResponses += 1;\n  }\n\n  recordTargetResponse(): void {\n    this.pendingResponses -= 1;\n  }\n\n  markCurrent(): void {\n    this._hasPendingChanges = true;\n    this._current = true;\n  }\n}\n\n/**\n * Interface implemented by RemoteStore to expose target metadata to the\n * WatchChangeAggregator.\n */\nexport interface TargetMetadataProvider {\n  /**\n   * Returns the set of remote document keys for the given target ID as of the\n   * last raised snapshot.\n   */\n  getRemoteKeysForTarget(targetId: TargetId): DocumentKeySet;\n\n  /**\n   * Returns the TargetData for an active target ID or 'null' if this target\n   * has become inactive\n   */\n  getTargetDataForTarget(targetId: TargetId): TargetData | null;\n}\n\nconst LOG_TAG = 'WatchChangeAggregator';\n\n/**\n * A helper class to accumulate watch changes into a RemoteEvent.\n */\nexport class WatchChangeAggregator {\n  constructor(private metadataProvider: TargetMetadataProvider) {}\n\n  /** The internal state of all tracked targets. */\n  private targetStates = new Map<TargetId, TargetState>();\n\n  /** Keeps track of the documents to update since the last raised snapshot. */\n  private pendingDocumentUpdates = maybeDocumentMap();\n\n  /** A mapping of document keys to their set of target IDs. */\n  private pendingDocumentTargetMapping = documentTargetMap();\n\n  /**\n   * A list of targets with existence filter mismatches. These targets are\n   * known to be inconsistent and their listens needs to be re-established by\n   * RemoteStore.\n   */\n  private pendingTargetResets = new SortedSet<TargetId>(primitiveComparator);\n\n  /**\n   * Processes and adds the DocumentWatchChange to the current set of changes.\n   */\n  handleDocumentChange(docChange: DocumentWatchChange): void {\n    for (const targetId of docChange.updatedTargetIds) {\n      if (docChange.newDoc instanceof Document) {\n        this.addDocumentToTarget(targetId, docChange.newDoc);\n      } else if (docChange.newDoc instanceof NoDocument) {\n        this.removeDocumentFromTarget(\n          targetId,\n          docChange.key,\n          docChange.newDoc\n        );\n      }\n    }\n\n    for (const targetId of docChange.removedTargetIds) {\n      this.removeDocumentFromTarget(targetId, docChange.key, docChange.newDoc);\n    }\n  }\n\n  /** Processes and adds the WatchTargetChange to the current set of changes. */\n  handleTargetChange(targetChange: WatchTargetChange): void {\n    this.forEachTarget(targetChange, targetId => {\n      const targetState = this.ensureTargetState(targetId);\n      switch (targetChange.state) {\n        case WatchTargetChangeState.NoChange:\n          if (this.isActiveTarget(targetId)) {\n            targetState.updateResumeToken(targetChange.resumeToken);\n          }\n          break;\n        case WatchTargetChangeState.Added:\n          // We need to decrement the number of pending acks needed from watch\n          // for this targetId.\n          targetState.recordTargetResponse();\n          if (!targetState.isPending) {\n            // We have a freshly added target, so we need to reset any state\n            // that we had previously. This can happen e.g. when remove and add\n            // back a target for existence filter mismatches.\n            targetState.clearPendingChanges();\n          }\n          targetState.updateResumeToken(targetChange.resumeToken);\n          break;\n        case WatchTargetChangeState.Removed:\n          // We need to keep track of removed targets to we can post-filter and\n          // remove any target changes.\n          // We need to decrement the number of pending acks needed from watch\n          // for this targetId.\n          targetState.recordTargetResponse();\n          if (!targetState.isPending) {\n            this.removeTarget(targetId);\n          }\n          debugAssert(\n            !targetChange.cause,\n            'WatchChangeAggregator does not handle errored targets'\n          );\n          break;\n        case WatchTargetChangeState.Current:\n          if (this.isActiveTarget(targetId)) {\n            targetState.markCurrent();\n            targetState.updateResumeToken(targetChange.resumeToken);\n          }\n          break;\n        case WatchTargetChangeState.Reset:\n          if (this.isActiveTarget(targetId)) {\n            // Reset the target and synthesizes removes for all existing\n            // documents. The backend will re-add any documents that still\n            // match the target before it sends the next global snapshot.\n            this.resetTarget(targetId);\n            targetState.updateResumeToken(targetChange.resumeToken);\n          }\n          break;\n        default:\n          fail('Unknown target watch change state: ' + targetChange.state);\n      }\n    });\n  }\n\n  /**\n   * Iterates over all targetIds that the watch change applies to: either the\n   * targetIds explicitly listed in the change or the targetIds of all currently\n   * active targets.\n   */\n  forEachTarget(\n    targetChange: WatchTargetChange,\n    fn: (targetId: TargetId) => void\n  ): void {\n    if (targetChange.targetIds.length > 0) {\n      targetChange.targetIds.forEach(fn);\n    } else {\n      this.targetStates.forEach((_, targetId) => {\n        if (this.isActiveTarget(targetId)) {\n          fn(targetId);\n        }\n      });\n    }\n  }\n\n  /**\n   * Handles existence filters and synthesizes deletes for filter mismatches.\n   * Targets that are invalidated by filter mismatches are added to\n   * `pendingTargetResets`.\n   */\n  handleExistenceFilter(watchChange: ExistenceFilterChange): void {\n    const targetId = watchChange.targetId;\n    const expectedCount = watchChange.existenceFilter.count;\n\n    const targetData = this.targetDataForActiveTarget(targetId);\n    if (targetData) {\n      const target = targetData.target;\n      if (target.isDocumentQuery()) {\n        if (expectedCount === 0) {\n          // The existence filter told us the document does not exist. We deduce\n          // that this document does not exist and apply a deleted document to\n          // our updates. Without applying this deleted document there might be\n          // another query that will raise this document as part of a snapshot\n          // until it is resolved, essentially exposing inconsistency between\n          // queries.\n          const key = new DocumentKey(target.path);\n          this.removeDocumentFromTarget(\n            targetId,\n            key,\n            new NoDocument(key, SnapshotVersion.min())\n          );\n        } else {\n          hardAssert(\n            expectedCount === 1,\n            'Single document existence filter with count: ' + expectedCount\n          );\n        }\n      } else {\n        const currentSize = this.getCurrentDocumentCountForTarget(targetId);\n        if (currentSize !== expectedCount) {\n          // Existence filter mismatch: We reset the mapping and raise a new\n          // snapshot with `isFromCache:true`.\n          this.resetTarget(targetId);\n          this.pendingTargetResets = this.pendingTargetResets.add(targetId);\n        }\n      }\n    }\n  }\n\n  /**\n   * Converts the currently accumulated state into a remote event at the\n   * provided snapshot version. Resets the accumulated changes before returning.\n   */\n  createRemoteEvent(snapshotVersion: SnapshotVersion): RemoteEvent {\n    const targetChanges = new Map<TargetId, TargetChange>();\n\n    this.targetStates.forEach((targetState, targetId) => {\n      const targetData = this.targetDataForActiveTarget(targetId);\n      if (targetData) {\n        if (targetState.current && targetData.target.isDocumentQuery()) {\n          // Document queries for document that don't exist can produce an empty\n          // result set. To update our local cache, we synthesize a document\n          // delete if we have not previously received the document. This\n          // resolves the limbo state of the document, removing it from\n          // limboDocumentRefs.\n          //\n          // TODO(dimond): Ideally we would have an explicit lookup target\n          // instead resulting in an explicit delete message and we could\n          // remove this special logic.\n          const key = new DocumentKey(targetData.target.path);\n          if (\n            this.pendingDocumentUpdates.get(key) === null &&\n            !this.targetContainsDocument(targetId, key)\n          ) {\n            this.removeDocumentFromTarget(\n              targetId,\n              key,\n              new NoDocument(key, snapshotVersion)\n            );\n          }\n        }\n\n        if (targetState.hasPendingChanges) {\n          targetChanges.set(targetId, targetState.toTargetChange());\n          targetState.clearPendingChanges();\n        }\n      }\n    });\n\n    let resolvedLimboDocuments = documentKeySet();\n\n    // We extract the set of limbo-only document updates as the GC logic\n    // special-cases documents that do not appear in the target cache.\n    //\n    // TODO(gsoltis): Expand on this comment once GC is available in the JS\n    // client.\n    this.pendingDocumentTargetMapping.forEach((key, targets) => {\n      let isOnlyLimboTarget = true;\n\n      targets.forEachWhile(targetId => {\n        const targetData = this.targetDataForActiveTarget(targetId);\n        if (\n          targetData &&\n          targetData.purpose !== TargetPurpose.LimboResolution\n        ) {\n          isOnlyLimboTarget = false;\n          return false;\n        }\n\n        return true;\n      });\n\n      if (isOnlyLimboTarget) {\n        resolvedLimboDocuments = resolvedLimboDocuments.add(key);\n      }\n    });\n\n    const remoteEvent = new RemoteEvent(\n      snapshotVersion,\n      targetChanges,\n      this.pendingTargetResets,\n      this.pendingDocumentUpdates,\n      resolvedLimboDocuments\n    );\n\n    this.pendingDocumentUpdates = maybeDocumentMap();\n    this.pendingDocumentTargetMapping = documentTargetMap();\n    this.pendingTargetResets = new SortedSet<TargetId>(primitiveComparator);\n\n    return remoteEvent;\n  }\n\n  /**\n   * Adds the provided document to the internal list of document updates and\n   * its document key to the given target's mapping.\n   */\n  // Visible for testing.\n  addDocumentToTarget(targetId: TargetId, document: MaybeDocument): void {\n    if (!this.isActiveTarget(targetId)) {\n      return;\n    }\n\n    const changeType = this.targetContainsDocument(targetId, document.key)\n      ? ChangeType.Modified\n      : ChangeType.Added;\n\n    const targetState = this.ensureTargetState(targetId);\n    targetState.addDocumentChange(document.key, changeType);\n\n    this.pendingDocumentUpdates = this.pendingDocumentUpdates.insert(\n      document.key,\n      document\n    );\n\n    this.pendingDocumentTargetMapping = this.pendingDocumentTargetMapping.insert(\n      document.key,\n      this.ensureDocumentTargetMapping(document.key).add(targetId)\n    );\n  }\n\n  /**\n   * Removes the provided document from the target mapping. If the\n   * document no longer matches the target, but the document's state is still\n   * known (e.g. we know that the document was deleted or we received the change\n   * that caused the filter mismatch), the new document can be provided\n   * to update the remote document cache.\n   */\n  // Visible for testing.\n  removeDocumentFromTarget(\n    targetId: TargetId,\n    key: DocumentKey,\n    updatedDocument: MaybeDocument | null\n  ): void {\n    if (!this.isActiveTarget(targetId)) {\n      return;\n    }\n\n    const targetState = this.ensureTargetState(targetId);\n    if (this.targetContainsDocument(targetId, key)) {\n      targetState.addDocumentChange(key, ChangeType.Removed);\n    } else {\n      // The document may have entered and left the target before we raised a\n      // snapshot, so we can just ignore the change.\n      targetState.removeDocumentChange(key);\n    }\n\n    this.pendingDocumentTargetMapping = this.pendingDocumentTargetMapping.insert(\n      key,\n      this.ensureDocumentTargetMapping(key).delete(targetId)\n    );\n\n    if (updatedDocument) {\n      this.pendingDocumentUpdates = this.pendingDocumentUpdates.insert(\n        key,\n        updatedDocument\n      );\n    }\n  }\n\n  removeTarget(targetId: TargetId): void {\n    this.targetStates.delete(targetId);\n  }\n\n  /**\n   * Returns the current count of documents in the target. This includes both\n   * the number of documents that the LocalStore considers to be part of the\n   * target as well as any accumulated changes.\n   */\n  private getCurrentDocumentCountForTarget(targetId: TargetId): number {\n    const targetState = this.ensureTargetState(targetId);\n    const targetChange = targetState.toTargetChange();\n    return (\n      this.metadataProvider.getRemoteKeysForTarget(targetId).size +\n      targetChange.addedDocuments.size -\n      targetChange.removedDocuments.size\n    );\n  }\n\n  /**\n   * Increment the number of acks needed from watch before we can consider the\n   * server to be 'in-sync' with the client's active targets.\n   */\n  recordPendingTargetRequest(targetId: TargetId): void {\n    // For each request we get we need to record we need a response for it.\n    const targetState = this.ensureTargetState(targetId);\n    targetState.recordPendingTargetRequest();\n  }\n\n  private ensureTargetState(targetId: TargetId): TargetState {\n    let result = this.targetStates.get(targetId);\n    if (!result) {\n      result = new TargetState();\n      this.targetStates.set(targetId, result);\n    }\n    return result;\n  }\n\n  private ensureDocumentTargetMapping(key: DocumentKey): SortedSet<TargetId> {\n    let targetMapping = this.pendingDocumentTargetMapping.get(key);\n\n    if (!targetMapping) {\n      targetMapping = new SortedSet<TargetId>(primitiveComparator);\n      this.pendingDocumentTargetMapping = this.pendingDocumentTargetMapping.insert(\n        key,\n        targetMapping\n      );\n    }\n\n    return targetMapping;\n  }\n\n  /**\n   * Verifies that the user is still interested in this target (by calling\n   * `getTargetDataForTarget()`) and that we are not waiting for pending ADDs\n   * from watch.\n   */\n  protected isActiveTarget(targetId: TargetId): boolean {\n    const targetActive = this.targetDataForActiveTarget(targetId) !== null;\n    if (!targetActive) {\n      logDebug(LOG_TAG, 'Detected inactive target', targetId);\n    }\n    return targetActive;\n  }\n\n  /**\n   * Returns the TargetData for an active target (i.e. a target that the user\n   * is still interested in that has no outstanding target change requests).\n   */\n  protected targetDataForActiveTarget(targetId: TargetId): TargetData | null {\n    const targetState = this.targetStates.get(targetId);\n    return targetState && targetState.isPending\n      ? null\n      : this.metadataProvider.getTargetDataForTarget(targetId);\n  }\n\n  /**\n   * Resets the state of a Watch target to its initial state (e.g. sets\n   * 'current' to false, clears the resume token and removes its target mapping\n   * from all documents).\n   */\n  private resetTarget(targetId: TargetId): void {\n    debugAssert(\n      !this.targetStates.get(targetId)!.isPending,\n      'Should only reset active targets'\n    );\n    this.targetStates.set(targetId, new TargetState());\n\n    // Trigger removal for any documents currently mapped to this target.\n    // These removals will be part of the initial snapshot if Watch does not\n    // resend these documents.\n    const existingKeys = this.metadataProvider.getRemoteKeysForTarget(targetId);\n    existingKeys.forEach(key => {\n      this.removeDocumentFromTarget(targetId, key, /*updatedDocument=*/ null);\n    });\n  }\n  /**\n   * Returns whether the LocalStore considers the document to be part of the\n   * specified target.\n   */\n  private targetContainsDocument(\n    targetId: TargetId,\n    key: DocumentKey\n  ): boolean {\n    const existingKeys = this.metadataProvider.getRemoteKeysForTarget(targetId);\n    return existingKeys.has(key);\n  }\n}\n\nfunction documentTargetMap(): SortedMap<DocumentKey, SortedSet<TargetId>> {\n  return new SortedMap<DocumentKey, SortedSet<TargetId>>(\n    DocumentKey.comparator\n  );\n}\n\nfunction snapshotChangesMap(): SortedMap<DocumentKey, ChangeType> {\n  return new SortedMap<DocumentKey, ChangeType>(DocumentKey.comparator);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Blob } from '../api/blob';\nimport { Timestamp } from '../api/timestamp';\nimport { DatabaseId } from '../core/database_info';\nimport {\n  Bound,\n  Direction,\n  FieldFilter,\n  Filter,\n  LimitType,\n  Operator,\n  OrderBy,\n  Query\n} from '../core/query';\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { Target } from '../core/target';\nimport { TargetId } from '../core/types';\nimport { TargetData, TargetPurpose } from '../local/target_data';\nimport { Document, MaybeDocument, NoDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { ObjectValue } from '../model/object_value';\nimport {\n  DeleteMutation,\n  FieldMask,\n  FieldTransform,\n  Mutation,\n  MutationResult,\n  PatchMutation,\n  Precondition,\n  SetMutation,\n  TransformMutation,\n  VerifyMutation\n} from '../model/mutation';\nimport { FieldPath, ResourcePath } from '../model/path';\nimport * as api from '../protos/firestore_proto_api';\nimport { debugAssert, fail, hardAssert } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\nimport { ByteString } from '../util/byte_string';\nimport {\n  isNegativeZero,\n  isNullOrUndefined,\n  isSafeInteger\n} from '../util/types';\nimport {\n  ArrayRemoveTransformOperation,\n  ArrayUnionTransformOperation,\n  NumericIncrementTransformOperation,\n  ServerTimestampTransform,\n  TransformOperation\n} from '../model/transform_operation';\nimport { ExistenceFilter } from './existence_filter';\nimport { mapCodeFromRpcCode } from './rpc_error';\nimport {\n  DocumentWatchChange,\n  ExistenceFilterChange,\n  WatchChange,\n  WatchTargetChange,\n  WatchTargetChangeState\n} from './watch_change';\nimport { isNanValue, isNullValue, normalizeTimestamp } from '../model/values';\n\nconst DIRECTIONS = (() => {\n  const dirs: { [dir: string]: api.OrderDirection } = {};\n  dirs[Direction.ASCENDING] = 'ASCENDING';\n  dirs[Direction.DESCENDING] = 'DESCENDING';\n  return dirs;\n})();\n\nconst OPERATORS = (() => {\n  const ops: { [op: string]: api.FieldFilterOp } = {};\n  ops[Operator.LESS_THAN] = 'LESS_THAN';\n  ops[Operator.LESS_THAN_OR_EQUAL] = 'LESS_THAN_OR_EQUAL';\n  ops[Operator.GREATER_THAN] = 'GREATER_THAN';\n  ops[Operator.GREATER_THAN_OR_EQUAL] = 'GREATER_THAN_OR_EQUAL';\n  ops[Operator.EQUAL] = 'EQUAL';\n  ops[Operator.ARRAY_CONTAINS] = 'ARRAY_CONTAINS';\n  ops[Operator.IN] = 'IN';\n  ops[Operator.ARRAY_CONTAINS_ANY] = 'ARRAY_CONTAINS_ANY';\n  return ops;\n})();\n\nfunction assertPresent(value: unknown, description: string): asserts value {\n  debugAssert(!isNullOrUndefined(value), description + ' is missing');\n}\n\nexport interface SerializerOptions {\n  /**\n   * The serializer supports both Protobuf.js and Proto3 JSON formats. By\n   * setting this flag to true, the serializer will use the Proto3 JSON format.\n   *\n   * For a description of the Proto3 JSON format check\n   * https://developers.google.com/protocol-buffers/docs/proto3#json\n   */\n  useProto3Json: boolean;\n}\n\n/**\n * Generates JsonObject values for the Datastore API suitable for sending to\n * either GRPC stub methods or via the JSON/HTTP REST API.\n * TODO(klimt): We can remove the databaseId argument if we keep the full\n * resource name in documents.\n */\nexport class JsonProtoSerializer {\n  constructor(\n    private databaseId: DatabaseId,\n    private options: SerializerOptions\n  ) {}\n\n  fromRpcStatus(status: api.Status): FirestoreError {\n    const code =\n      status.code === undefined\n        ? Code.UNKNOWN\n        : mapCodeFromRpcCode(status.code);\n    return new FirestoreError(code, status.message || '');\n  }\n\n  /**\n   * Returns a value for a number (or null) that's appropriate to put into\n   * a google.protobuf.Int32Value proto.\n   * DO NOT USE THIS FOR ANYTHING ELSE.\n   * This method cheats. It's typed as returning \"number\" because that's what\n   * our generated proto interfaces say Int32Value must be. But GRPC actually\n   * expects a { value: <number> } struct.\n   */\n  private toInt32Proto(val: number | null): number | { value: number } | null {\n    if (this.options.useProto3Json || isNullOrUndefined(val)) {\n      return val;\n    } else {\n      return { value: val };\n    }\n  }\n\n  /**\n   * Returns a number (or null) from a google.protobuf.Int32Value proto.\n   */\n  private fromInt32Proto(\n    val: number | { value: number } | undefined\n  ): number | null {\n    let result;\n    if (typeof val === 'object') {\n      result = val.value;\n    } else {\n      result = val;\n    }\n    return isNullOrUndefined(result) ? null : result;\n  }\n\n  /**\n   * Returns an IntegerValue for `value`.\n   */\n  toInteger(value: number): api.Value {\n    return { integerValue: '' + value };\n  }\n\n  /**\n   * Returns an DoubleValue for `value` that is encoded based the serializer's\n   * `useProto3Json` setting.\n   */\n  toDouble(value: number): api.Value {\n    if (this.options.useProto3Json) {\n      if (isNaN(value)) {\n        return { doubleValue: 'NaN' };\n      } else if (value === Infinity) {\n        return { doubleValue: 'Infinity' };\n      } else if (value === -Infinity) {\n        return { doubleValue: '-Infinity' };\n      }\n    }\n    return { doubleValue: isNegativeZero(value) ? '-0' : value };\n  }\n\n  /**\n   * Returns a value for a number that's appropriate to put into a proto.\n   * The return value is an IntegerValue if it can safely represent the value,\n   * otherwise a DoubleValue is returned.\n   */\n  toNumber(value: number): api.Value {\n    return isSafeInteger(value) ? this.toInteger(value) : this.toDouble(value);\n  }\n\n  /**\n   * Returns a value for a Date that's appropriate to put into a proto.\n   */\n  toTimestamp(timestamp: Timestamp): api.Timestamp {\n    if (this.options.useProto3Json) {\n      // Serialize to ISO-8601 date format, but with full nano resolution.\n      // Since JS Date has only millis, let's only use it for the seconds and\n      // then manually add the fractions to the end.\n      const jsDateStr = new Date(timestamp.seconds * 1000).toISOString();\n      // Remove .xxx frac part and Z in the end.\n      const strUntilSeconds = jsDateStr.replace(/\\.\\d*/, '').replace('Z', '');\n      // Pad the fraction out to 9 digits (nanos).\n      const nanoStr = ('000000000' + timestamp.nanoseconds).slice(-9);\n\n      return `${strUntilSeconds}.${nanoStr}Z`;\n    } else {\n      return {\n        seconds: '' + timestamp.seconds,\n        nanos: timestamp.nanoseconds\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      } as any;\n    }\n  }\n\n  private fromTimestamp(date: api.Timestamp): Timestamp {\n    const timestamp = normalizeTimestamp(date);\n    return new Timestamp(timestamp.seconds, timestamp.nanos);\n  }\n\n  /**\n   * Returns a value for bytes that's appropriate to put in a proto.\n   *\n   * Visible for testing.\n   */\n  toBytes(bytes: Blob | ByteString): string | Uint8Array {\n    if (this.options.useProto3Json) {\n      return bytes.toBase64();\n    } else {\n      return bytes.toUint8Array();\n    }\n  }\n\n  /**\n   * Returns a ByteString based on the proto string value.\n   */\n  fromBytes(value: string | Uint8Array | undefined): ByteString {\n    if (this.options.useProto3Json) {\n      hardAssert(\n        value === undefined || typeof value === 'string',\n        'value must be undefined or a string when using proto3 Json'\n      );\n      return ByteString.fromBase64String(value ? value : '');\n    } else {\n      hardAssert(\n        value === undefined || value instanceof Uint8Array,\n        'value must be undefined or Uint8Array'\n      );\n      return ByteString.fromUint8Array(value ? value : new Uint8Array());\n    }\n  }\n\n  toVersion(version: SnapshotVersion): api.Timestamp {\n    return this.toTimestamp(version.toTimestamp());\n  }\n\n  fromVersion(version: api.Timestamp): SnapshotVersion {\n    hardAssert(!!version, \"Trying to deserialize version that isn't set\");\n    return SnapshotVersion.fromTimestamp(this.fromTimestamp(version));\n  }\n\n  toResourceName(path: ResourcePath, databaseId?: DatabaseId): string {\n    return this.fullyQualifiedPrefixPath(databaseId || this.databaseId)\n      .child('documents')\n      .child(path)\n      .canonicalString();\n  }\n\n  fromResourceName(name: string): ResourcePath {\n    const resource = ResourcePath.fromString(name);\n    hardAssert(\n      isValidResourceName(resource),\n      'Tried to deserialize invalid key ' + resource.toString()\n    );\n    return resource;\n  }\n\n  toName(key: DocumentKey): string {\n    return this.toResourceName(key.path);\n  }\n\n  fromName(name: string): DocumentKey {\n    const resource = this.fromResourceName(name);\n    hardAssert(\n      resource.get(1) === this.databaseId.projectId,\n      'Tried to deserialize key from different project: ' +\n        resource.get(1) +\n        ' vs ' +\n        this.databaseId.projectId\n    );\n    hardAssert(\n      (!resource.get(3) && !this.databaseId.database) ||\n        resource.get(3) === this.databaseId.database,\n      'Tried to deserialize key from different database: ' +\n        resource.get(3) +\n        ' vs ' +\n        this.databaseId.database\n    );\n    return new DocumentKey(this.extractLocalPathFromResourceName(resource));\n  }\n\n  toQueryPath(path: ResourcePath): string {\n    return this.toResourceName(path);\n  }\n\n  fromQueryPath(name: string): ResourcePath {\n    const resourceName = this.fromResourceName(name);\n    // In v1beta1 queries for collections at the root did not have a trailing\n    // \"/documents\". In v1 all resource paths contain \"/documents\". Preserve the\n    // ability to read the v1beta1 form for compatibility with queries persisted\n    // in the local target cache.\n    if (resourceName.length === 4) {\n      return ResourcePath.EMPTY_PATH;\n    }\n    return this.extractLocalPathFromResourceName(resourceName);\n  }\n\n  get encodedDatabaseId(): string {\n    const path = new ResourcePath([\n      'projects',\n      this.databaseId.projectId,\n      'databases',\n      this.databaseId.database\n    ]);\n    return path.canonicalString();\n  }\n\n  private fullyQualifiedPrefixPath(databaseId: DatabaseId): ResourcePath {\n    return new ResourcePath([\n      'projects',\n      databaseId.projectId,\n      'databases',\n      databaseId.database\n    ]);\n  }\n\n  private extractLocalPathFromResourceName(\n    resourceName: ResourcePath\n  ): ResourcePath {\n    hardAssert(\n      resourceName.length > 4 && resourceName.get(4) === 'documents',\n      'tried to deserialize invalid key ' + resourceName.toString()\n    );\n    return resourceName.popFirst(5);\n  }\n\n  /** Creates an api.Document from key and fields (but no create/update time) */\n  toMutationDocument(key: DocumentKey, fields: ObjectValue): api.Document {\n    return {\n      name: this.toName(key),\n      fields: fields.proto.mapValue.fields\n    };\n  }\n\n  toDocument(document: Document): api.Document {\n    debugAssert(\n      !document.hasLocalMutations,\n      \"Can't serialize documents with mutations.\"\n    );\n    return {\n      name: this.toName(document.key),\n      fields: document.toProto().mapValue.fields,\n      updateTime: this.toTimestamp(document.version.toTimestamp())\n    };\n  }\n\n  fromDocument(\n    document: api.Document,\n    hasCommittedMutations?: boolean\n  ): Document {\n    const key = this.fromName(document.name!);\n    const version = this.fromVersion(document.updateTime!);\n    const data = new ObjectValue({ mapValue: { fields: document.fields } });\n    return new Document(key, version, data, {\n      hasCommittedMutations: !!hasCommittedMutations\n    });\n  }\n\n  private fromFound(doc: api.BatchGetDocumentsResponse): Document {\n    hardAssert(\n      !!doc.found,\n      'Tried to deserialize a found document from a missing document.'\n    );\n    assertPresent(doc.found.name, 'doc.found.name');\n    assertPresent(doc.found.updateTime, 'doc.found.updateTime');\n    const key = this.fromName(doc.found.name);\n    const version = this.fromVersion(doc.found.updateTime);\n    const data = new ObjectValue({ mapValue: { fields: doc.found.fields } });\n    return new Document(key, version, data, {});\n  }\n\n  private fromMissing(result: api.BatchGetDocumentsResponse): NoDocument {\n    hardAssert(\n      !!result.missing,\n      'Tried to deserialize a missing document from a found document.'\n    );\n    hardAssert(\n      !!result.readTime,\n      'Tried to deserialize a missing document without a read time.'\n    );\n    const key = this.fromName(result.missing);\n    const version = this.fromVersion(result.readTime);\n    return new NoDocument(key, version);\n  }\n\n  fromMaybeDocument(result: api.BatchGetDocumentsResponse): MaybeDocument {\n    if ('found' in result) {\n      return this.fromFound(result);\n    } else if ('missing' in result) {\n      return this.fromMissing(result);\n    }\n    return fail('invalid batch get response: ' + JSON.stringify(result));\n  }\n\n  fromWatchChange(change: api.ListenResponse): WatchChange {\n    let watchChange: WatchChange;\n    if ('targetChange' in change) {\n      assertPresent(change.targetChange, 'targetChange');\n      // proto3 default value is unset in JSON (undefined), so use 'NO_CHANGE'\n      // if unset\n      const state = this.fromWatchTargetChangeState(\n        change.targetChange.targetChangeType || 'NO_CHANGE'\n      );\n      const targetIds: TargetId[] = change.targetChange.targetIds || [];\n\n      const resumeToken = this.fromBytes(change.targetChange.resumeToken);\n      const causeProto = change.targetChange!.cause;\n      const cause = causeProto && this.fromRpcStatus(causeProto);\n      watchChange = new WatchTargetChange(\n        state,\n        targetIds,\n        resumeToken,\n        cause || null\n      );\n    } else if ('documentChange' in change) {\n      assertPresent(change.documentChange, 'documentChange');\n      const entityChange = change.documentChange;\n      assertPresent(entityChange.document, 'documentChange.name');\n      assertPresent(entityChange.document.name, 'documentChange.document.name');\n      assertPresent(\n        entityChange.document.updateTime,\n        'documentChange.document.updateTime'\n      );\n      const key = this.fromName(entityChange.document.name);\n      const version = this.fromVersion(entityChange.document.updateTime);\n      const data = new ObjectValue({\n        mapValue: { fields: entityChange.document.fields }\n      });\n      const doc = new Document(key, version, data, {});\n      const updatedTargetIds = entityChange.targetIds || [];\n      const removedTargetIds = entityChange.removedTargetIds || [];\n      watchChange = new DocumentWatchChange(\n        updatedTargetIds,\n        removedTargetIds,\n        doc.key,\n        doc\n      );\n    } else if ('documentDelete' in change) {\n      assertPresent(change.documentDelete, 'documentDelete');\n      const docDelete = change.documentDelete;\n      assertPresent(docDelete.document, 'documentDelete.document');\n      const key = this.fromName(docDelete.document);\n      const version = docDelete.readTime\n        ? this.fromVersion(docDelete.readTime)\n        : SnapshotVersion.min();\n      const doc = new NoDocument(key, version);\n      const removedTargetIds = docDelete.removedTargetIds || [];\n      watchChange = new DocumentWatchChange([], removedTargetIds, doc.key, doc);\n    } else if ('documentRemove' in change) {\n      assertPresent(change.documentRemove, 'documentRemove');\n      const docRemove = change.documentRemove;\n      assertPresent(docRemove.document, 'documentRemove');\n      const key = this.fromName(docRemove.document);\n      const removedTargetIds = docRemove.removedTargetIds || [];\n      watchChange = new DocumentWatchChange([], removedTargetIds, key, null);\n    } else if ('filter' in change) {\n      // TODO(dimond): implement existence filter parsing with strategy.\n      assertPresent(change.filter, 'filter');\n      const filter = change.filter;\n      assertPresent(filter.targetId, 'filter.targetId');\n      const count = filter.count || 0;\n      const existenceFilter = new ExistenceFilter(count);\n      const targetId = filter.targetId;\n      watchChange = new ExistenceFilterChange(targetId, existenceFilter);\n    } else {\n      return fail('Unknown change type ' + JSON.stringify(change));\n    }\n    return watchChange;\n  }\n\n  fromWatchTargetChangeState(\n    state: api.TargetChangeTargetChangeType\n  ): WatchTargetChangeState {\n    if (state === 'NO_CHANGE') {\n      return WatchTargetChangeState.NoChange;\n    } else if (state === 'ADD') {\n      return WatchTargetChangeState.Added;\n    } else if (state === 'REMOVE') {\n      return WatchTargetChangeState.Removed;\n    } else if (state === 'CURRENT') {\n      return WatchTargetChangeState.Current;\n    } else if (state === 'RESET') {\n      return WatchTargetChangeState.Reset;\n    } else {\n      return fail('Got unexpected TargetChange.state: ' + state);\n    }\n  }\n\n  versionFromListenResponse(change: api.ListenResponse): SnapshotVersion {\n    // We have only reached a consistent snapshot for the entire stream if there\n    // is a read_time set and it applies to all targets (i.e. the list of\n    // targets is empty). The backend is guaranteed to send such responses.\n    if (!('targetChange' in change)) {\n      return SnapshotVersion.min();\n    }\n    const targetChange = change.targetChange!;\n    if (targetChange.targetIds && targetChange.targetIds.length) {\n      return SnapshotVersion.min();\n    }\n    if (!targetChange.readTime) {\n      return SnapshotVersion.min();\n    }\n    return this.fromVersion(targetChange.readTime);\n  }\n\n  toMutation(mutation: Mutation): api.Write {\n    let result: api.Write;\n    if (mutation instanceof SetMutation) {\n      result = {\n        update: this.toMutationDocument(mutation.key, mutation.value)\n      };\n    } else if (mutation instanceof DeleteMutation) {\n      result = { delete: this.toName(mutation.key) };\n    } else if (mutation instanceof PatchMutation) {\n      result = {\n        update: this.toMutationDocument(mutation.key, mutation.data),\n        updateMask: this.toDocumentMask(mutation.fieldMask)\n      };\n    } else if (mutation instanceof TransformMutation) {\n      result = {\n        transform: {\n          document: this.toName(mutation.key),\n          fieldTransforms: mutation.fieldTransforms.map(transform =>\n            this.toFieldTransform(transform)\n          )\n        }\n      };\n    } else if (mutation instanceof VerifyMutation) {\n      result = {\n        verify: this.toName(mutation.key)\n      };\n    } else {\n      return fail('Unknown mutation type ' + mutation.type);\n    }\n\n    if (!mutation.precondition.isNone) {\n      result.currentDocument = this.toPrecondition(mutation.precondition);\n    }\n\n    return result;\n  }\n\n  fromMutation(proto: api.Write): Mutation {\n    const precondition = proto.currentDocument\n      ? this.fromPrecondition(proto.currentDocument)\n      : Precondition.none();\n\n    if (proto.update) {\n      assertPresent(proto.update.name, 'name');\n      const key = this.fromName(proto.update.name);\n      const value = new ObjectValue({\n        mapValue: { fields: proto.update.fields }\n      });\n      if (proto.updateMask) {\n        const fieldMask = this.fromDocumentMask(proto.updateMask);\n        return new PatchMutation(key, value, fieldMask, precondition);\n      } else {\n        return new SetMutation(key, value, precondition);\n      }\n    } else if (proto.delete) {\n      const key = this.fromName(proto.delete);\n      return new DeleteMutation(key, precondition);\n    } else if (proto.transform) {\n      const key = this.fromName(proto.transform.document!);\n      const fieldTransforms = proto.transform.fieldTransforms!.map(transform =>\n        this.fromFieldTransform(transform)\n      );\n      hardAssert(\n        precondition.exists === true,\n        'Transforms only support precondition \"exists == true\"'\n      );\n      return new TransformMutation(key, fieldTransforms);\n    } else if (proto.verify) {\n      const key = this.fromName(proto.verify);\n      return new VerifyMutation(key, precondition);\n    } else {\n      return fail('unknown mutation proto: ' + JSON.stringify(proto));\n    }\n  }\n\n  private toPrecondition(precondition: Precondition): api.Precondition {\n    debugAssert(!precondition.isNone, \"Can't serialize an empty precondition\");\n    if (precondition.updateTime !== undefined) {\n      return {\n        updateTime: this.toVersion(precondition.updateTime)\n      };\n    } else if (precondition.exists !== undefined) {\n      return { exists: precondition.exists };\n    } else {\n      return fail('Unknown precondition');\n    }\n  }\n\n  private fromPrecondition(precondition: api.Precondition): Precondition {\n    if (precondition.updateTime !== undefined) {\n      return Precondition.updateTime(this.fromVersion(precondition.updateTime));\n    } else if (precondition.exists !== undefined) {\n      return Precondition.exists(precondition.exists);\n    } else {\n      return Precondition.none();\n    }\n  }\n\n  private fromWriteResult(\n    proto: api.WriteResult,\n    commitTime: api.Timestamp\n  ): MutationResult {\n    // NOTE: Deletes don't have an updateTime.\n    let version = proto.updateTime\n      ? this.fromVersion(proto.updateTime)\n      : this.fromVersion(commitTime);\n\n    if (version.isEqual(SnapshotVersion.min())) {\n      // The Firestore Emulator currently returns an update time of 0 for\n      // deletes of non-existing documents (rather than null). This breaks the\n      // test \"get deleted doc while offline with source=cache\" as NoDocuments\n      // with version 0 are filtered by IndexedDb's RemoteDocumentCache.\n      // TODO(#2149): Remove this when Emulator is fixed\n      version = this.fromVersion(commitTime);\n    }\n\n    let transformResults: api.Value[] | null = null;\n    if (proto.transformResults && proto.transformResults.length > 0) {\n      transformResults = proto.transformResults;\n    }\n    return new MutationResult(version, transformResults);\n  }\n\n  fromWriteResults(\n    protos: api.WriteResult[] | undefined,\n    commitTime?: api.Timestamp\n  ): MutationResult[] {\n    if (protos && protos.length > 0) {\n      hardAssert(\n        commitTime !== undefined,\n        'Received a write result without a commit time'\n      );\n      return protos.map(proto => this.fromWriteResult(proto, commitTime));\n    } else {\n      return [];\n    }\n  }\n\n  private toFieldTransform(fieldTransform: FieldTransform): api.FieldTransform {\n    const transform = fieldTransform.transform;\n    if (transform instanceof ServerTimestampTransform) {\n      return {\n        fieldPath: fieldTransform.field.canonicalString(),\n        setToServerValue: 'REQUEST_TIME'\n      };\n    } else if (transform instanceof ArrayUnionTransformOperation) {\n      return {\n        fieldPath: fieldTransform.field.canonicalString(),\n        appendMissingElements: {\n          values: transform.elements\n        }\n      };\n    } else if (transform instanceof ArrayRemoveTransformOperation) {\n      return {\n        fieldPath: fieldTransform.field.canonicalString(),\n        removeAllFromArray: {\n          values: transform.elements\n        }\n      };\n    } else if (transform instanceof NumericIncrementTransformOperation) {\n      return {\n        fieldPath: fieldTransform.field.canonicalString(),\n        increment: transform.operand\n      };\n    } else {\n      throw fail('Unknown transform: ' + fieldTransform.transform);\n    }\n  }\n\n  private fromFieldTransform(proto: api.FieldTransform): FieldTransform {\n    let transform: TransformOperation | null = null;\n    if ('setToServerValue' in proto) {\n      hardAssert(\n        proto.setToServerValue === 'REQUEST_TIME',\n        'Unknown server value transform proto: ' + JSON.stringify(proto)\n      );\n      transform = ServerTimestampTransform.instance;\n    } else if ('appendMissingElements' in proto) {\n      const values = proto.appendMissingElements!.values || [];\n      transform = new ArrayUnionTransformOperation(values);\n    } else if ('removeAllFromArray' in proto) {\n      const values = proto.removeAllFromArray!.values || [];\n      transform = new ArrayRemoveTransformOperation(values);\n    } else if ('increment' in proto) {\n      transform = new NumericIncrementTransformOperation(\n        this,\n        proto.increment!\n      );\n    } else {\n      fail('Unknown transform proto: ' + JSON.stringify(proto));\n    }\n    const fieldPath = FieldPath.fromServerFormat(proto.fieldPath!);\n    return new FieldTransform(fieldPath, transform!);\n  }\n\n  toDocumentsTarget(target: Target): api.DocumentsTarget {\n    return { documents: [this.toQueryPath(target.path)] };\n  }\n\n  fromDocumentsTarget(documentsTarget: api.DocumentsTarget): Target {\n    const count = documentsTarget.documents!.length;\n    hardAssert(\n      count === 1,\n      'DocumentsTarget contained other than 1 document: ' + count\n    );\n    const name = documentsTarget.documents![0];\n    return Query.atPath(this.fromQueryPath(name)).toTarget();\n  }\n\n  toQueryTarget(target: Target): api.QueryTarget {\n    // Dissect the path into parent, collectionId, and optional key filter.\n    const result: api.QueryTarget = { structuredQuery: {} };\n    const path = target.path;\n    if (target.collectionGroup !== null) {\n      debugAssert(\n        path.length % 2 === 0,\n        'Collection Group queries should be within a document path or root.'\n      );\n      result.parent = this.toQueryPath(path);\n      result.structuredQuery!.from = [\n        {\n          collectionId: target.collectionGroup,\n          allDescendants: true\n        }\n      ];\n    } else {\n      debugAssert(\n        path.length % 2 !== 0,\n        'Document queries with filters are not supported.'\n      );\n      result.parent = this.toQueryPath(path.popLast());\n      result.structuredQuery!.from = [{ collectionId: path.lastSegment() }];\n    }\n\n    const where = this.toFilter(target.filters);\n    if (where) {\n      result.structuredQuery!.where = where;\n    }\n\n    const orderBy = this.toOrder(target.orderBy);\n    if (orderBy) {\n      result.structuredQuery!.orderBy = orderBy;\n    }\n\n    const limit = this.toInt32Proto(target.limit);\n    if (limit !== null) {\n      result.structuredQuery!.limit = limit;\n    }\n\n    if (target.startAt) {\n      result.structuredQuery!.startAt = this.toCursor(target.startAt);\n    }\n    if (target.endAt) {\n      result.structuredQuery!.endAt = this.toCursor(target.endAt);\n    }\n\n    return result;\n  }\n\n  fromQueryTarget(target: api.QueryTarget): Target {\n    let path = this.fromQueryPath(target.parent!);\n\n    const query = target.structuredQuery!;\n    const fromCount = query.from ? query.from.length : 0;\n    let collectionGroup: string | null = null;\n    if (fromCount > 0) {\n      hardAssert(\n        fromCount === 1,\n        'StructuredQuery.from with more than one collection is not supported.'\n      );\n      const from = query.from![0];\n      if (from.allDescendants) {\n        collectionGroup = from.collectionId!;\n      } else {\n        path = path.child(from.collectionId!);\n      }\n    }\n\n    let filterBy: Filter[] = [];\n    if (query.where) {\n      filterBy = this.fromFilter(query.where);\n    }\n\n    let orderBy: OrderBy[] = [];\n    if (query.orderBy) {\n      orderBy = this.fromOrder(query.orderBy);\n    }\n\n    let limit: number | null = null;\n    if (query.limit) {\n      limit = this.fromInt32Proto(query.limit);\n    }\n\n    let startAt: Bound | null = null;\n    if (query.startAt) {\n      startAt = this.fromCursor(query.startAt);\n    }\n\n    let endAt: Bound | null = null;\n    if (query.endAt) {\n      endAt = this.fromCursor(query.endAt);\n    }\n\n    return new Query(\n      path,\n      collectionGroup,\n      orderBy,\n      filterBy,\n      limit,\n      LimitType.First,\n      startAt,\n      endAt\n    ).toTarget();\n  }\n\n  toListenRequestLabels(\n    targetData: TargetData\n  ): api.ApiClientObjectMap<string> | null {\n    const value = this.toLabel(targetData.purpose);\n    if (value == null) {\n      return null;\n    } else {\n      return {\n        'goog-listen-tags': value\n      };\n    }\n  }\n\n  private toLabel(purpose: TargetPurpose): string | null {\n    switch (purpose) {\n      case TargetPurpose.Listen:\n        return null;\n      case TargetPurpose.ExistenceFilterMismatch:\n        return 'existence-filter-mismatch';\n      case TargetPurpose.LimboResolution:\n        return 'limbo-document';\n      default:\n        return fail('Unrecognized query purpose: ' + purpose);\n    }\n  }\n\n  toTarget(targetData: TargetData): api.Target {\n    let result: api.Target;\n    const target = targetData.target;\n\n    if (target.isDocumentQuery()) {\n      result = { documents: this.toDocumentsTarget(target) };\n    } else {\n      result = { query: this.toQueryTarget(target) };\n    }\n\n    result.targetId = targetData.targetId;\n\n    if (targetData.resumeToken.approximateByteSize() > 0) {\n      result.resumeToken = this.toBytes(targetData.resumeToken);\n    }\n\n    return result;\n  }\n\n  private toFilter(filters: Filter[]): api.Filter | undefined {\n    if (filters.length === 0) {\n      return;\n    }\n    const protos = filters.map(filter => {\n      if (filter instanceof FieldFilter) {\n        return this.toUnaryOrFieldFilter(filter);\n      } else {\n        return fail('Unrecognized filter: ' + JSON.stringify(filter));\n      }\n    });\n    if (protos.length === 1) {\n      return protos[0];\n    }\n    return { compositeFilter: { op: 'AND', filters: protos } };\n  }\n\n  private fromFilter(filter: api.Filter | undefined): Filter[] {\n    if (!filter) {\n      return [];\n    } else if (filter.unaryFilter !== undefined) {\n      return [this.fromUnaryFilter(filter)];\n    } else if (filter.fieldFilter !== undefined) {\n      return [this.fromFieldFilter(filter)];\n    } else if (filter.compositeFilter !== undefined) {\n      return filter.compositeFilter\n        .filters!.map(f => this.fromFilter(f))\n        .reduce((accum, current) => accum.concat(current));\n    } else {\n      return fail('Unknown filter: ' + JSON.stringify(filter));\n    }\n  }\n\n  private toOrder(orderBys: OrderBy[]): api.Order[] | undefined {\n    if (orderBys.length === 0) {\n      return;\n    }\n    return orderBys.map(order => this.toPropertyOrder(order));\n  }\n\n  private fromOrder(orderBys: api.Order[]): OrderBy[] {\n    return orderBys.map(order => this.fromPropertyOrder(order));\n  }\n\n  private toCursor(cursor: Bound): api.Cursor {\n    return {\n      before: cursor.before,\n      values: cursor.position\n    };\n  }\n\n  private fromCursor(cursor: api.Cursor): Bound {\n    const before = !!cursor.before;\n    const position = cursor.values || [];\n    return new Bound(position, before);\n  }\n\n  // visible for testing\n  toDirection(dir: Direction): api.OrderDirection {\n    return DIRECTIONS[dir];\n  }\n\n  // visible for testing\n  fromDirection(dir: api.OrderDirection | undefined): Direction | undefined {\n    switch (dir) {\n      case 'ASCENDING':\n        return Direction.ASCENDING;\n      case 'DESCENDING':\n        return Direction.DESCENDING;\n      default:\n        return undefined;\n    }\n  }\n\n  // visible for testing\n  toOperatorName(op: Operator): api.FieldFilterOp {\n    return OPERATORS[op];\n  }\n\n  fromOperatorName(op: api.FieldFilterOp): Operator {\n    switch (op) {\n      case 'EQUAL':\n        return Operator.EQUAL;\n      case 'GREATER_THAN':\n        return Operator.GREATER_THAN;\n      case 'GREATER_THAN_OR_EQUAL':\n        return Operator.GREATER_THAN_OR_EQUAL;\n      case 'LESS_THAN':\n        return Operator.LESS_THAN;\n      case 'LESS_THAN_OR_EQUAL':\n        return Operator.LESS_THAN_OR_EQUAL;\n      case 'ARRAY_CONTAINS':\n        return Operator.ARRAY_CONTAINS;\n      case 'IN':\n        return Operator.IN;\n      case 'ARRAY_CONTAINS_ANY':\n        return Operator.ARRAY_CONTAINS_ANY;\n      case 'OPERATOR_UNSPECIFIED':\n        return fail('Unspecified operator');\n      default:\n        return fail('Unknown operator');\n    }\n  }\n\n  toFieldPathReference(path: FieldPath): api.FieldReference {\n    return { fieldPath: path.canonicalString() };\n  }\n\n  fromFieldPathReference(fieldReference: api.FieldReference): FieldPath {\n    return FieldPath.fromServerFormat(fieldReference.fieldPath!);\n  }\n\n  // visible for testing\n  toPropertyOrder(orderBy: OrderBy): api.Order {\n    return {\n      field: this.toFieldPathReference(orderBy.field),\n      direction: this.toDirection(orderBy.dir)\n    };\n  }\n\n  fromPropertyOrder(orderBy: api.Order): OrderBy {\n    return new OrderBy(\n      this.fromFieldPathReference(orderBy.field!),\n      this.fromDirection(orderBy.direction)\n    );\n  }\n\n  fromFieldFilter(filter: api.Filter): Filter {\n    return FieldFilter.create(\n      this.fromFieldPathReference(filter.fieldFilter!.field!),\n      this.fromOperatorName(filter.fieldFilter!.op!),\n      filter.fieldFilter!.value!\n    );\n  }\n\n  // visible for testing\n  toUnaryOrFieldFilter(filter: FieldFilter): api.Filter {\n    if (filter.op === Operator.EQUAL) {\n      if (isNanValue(filter.value)) {\n        return {\n          unaryFilter: {\n            field: this.toFieldPathReference(filter.field),\n            op: 'IS_NAN'\n          }\n        };\n      } else if (isNullValue(filter.value)) {\n        return {\n          unaryFilter: {\n            field: this.toFieldPathReference(filter.field),\n            op: 'IS_NULL'\n          }\n        };\n      }\n    }\n    return {\n      fieldFilter: {\n        field: this.toFieldPathReference(filter.field),\n        op: this.toOperatorName(filter.op),\n        value: filter.value\n      }\n    };\n  }\n\n  fromUnaryFilter(filter: api.Filter): Filter {\n    switch (filter.unaryFilter!.op!) {\n      case 'IS_NAN':\n        const nanField = this.fromFieldPathReference(\n          filter.unaryFilter!.field!\n        );\n        return FieldFilter.create(nanField, Operator.EQUAL, {\n          doubleValue: NaN\n        });\n      case 'IS_NULL':\n        const nullField = this.fromFieldPathReference(\n          filter.unaryFilter!.field!\n        );\n        return FieldFilter.create(nullField, Operator.EQUAL, {\n          nullValue: 'NULL_VALUE'\n        });\n      case 'OPERATOR_UNSPECIFIED':\n        return fail('Unspecified filter');\n      default:\n        return fail('Unknown filter');\n    }\n  }\n\n  toDocumentMask(fieldMask: FieldMask): api.DocumentMask {\n    const canonicalFields: string[] = [];\n    fieldMask.fields.forEach(field =>\n      canonicalFields.push(field.canonicalString())\n    );\n    return {\n      fieldPaths: canonicalFields\n    };\n  }\n\n  fromDocumentMask(proto: api.DocumentMask): FieldMask {\n    const paths = proto.fieldPaths || [];\n    return new FieldMask(paths.map(path => FieldPath.fromServerFormat(path)));\n  }\n}\n\nexport function isValidResourceName(path: ResourcePath): boolean {\n  // Resource names have at least 4 components (project ID, database ID)\n  return (\n    path.length >= 4 &&\n    path.get(0) === 'projects' &&\n    path.get(2) === 'databases'\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DatabaseId, DatabaseInfo } from '../core/database_info';\nimport { Connection } from '../remote/connection';\nimport { JsonProtoSerializer } from '../remote/serializer';\nimport { fail } from '../util/assert';\nimport { ConnectivityMonitor } from './../remote/connectivity_monitor';\n\n/**\n * Provides a common interface to load anything platform dependent, e.g.\n * the connection implementation.\n *\n * An implementation of this must be provided at compile time for the platform.\n */\n// TODO: Consider only exposing the APIs of 'document' and 'window' that we\n// use in our client.\nexport interface Platform {\n  loadConnection(databaseInfo: DatabaseInfo): Promise<Connection>;\n  newConnectivityMonitor(): ConnectivityMonitor;\n  newSerializer(databaseId: DatabaseId): JsonProtoSerializer;\n\n  /** Formats an object as a JSON string, suitable for logging. */\n  formatJSON(value: unknown): string;\n\n  /** Converts a Base64 encoded string to a binary string. */\n  atob(encoded: string): string;\n\n  /** Converts a binary string to a Base64 encoded string. */\n  btoa(raw: string): string;\n\n  /**\n   * Generates `nBytes` of random bytes.\n   *\n   * If `nBytes < 0` , an error will be thrown.\n   */\n  randomBytes(nBytes: number): Uint8Array;\n\n  /** The Platform's 'window' implementation or null if not available. */\n  readonly window: Window | null;\n\n  /** The Platform's 'document' implementation or null if not available. */\n  readonly document: Document | null;\n\n  /** True if and only if the Base64 conversion functions are available. */\n  readonly base64Available: boolean;\n}\n\n/**\n * Provides singleton helpers where setup code can inject a platform at runtime.\n * setPlatform needs to be set before Firestore is used and must be set exactly\n * once.\n */\nexport class PlatformSupport {\n  private static platform: Platform;\n  static setPlatform(platform: Platform): void {\n    if (PlatformSupport.platform) {\n      fail('Platform already defined');\n    }\n    PlatformSupport.platform = platform;\n  }\n\n  static getPlatform(): Platform {\n    if (!PlatformSupport.platform) {\n      fail('Platform not set');\n    }\n    return PlatformSupport.platform;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger, LogLevel, LogLevelString } from '@firebase/logger';\nimport { SDK_VERSION } from '../core/version';\nimport { PlatformSupport } from '../platform/platform';\n\nexport { LogLevel };\n\nconst logClient = new Logger('@firebase/firestore');\n\n// Helper methods are needed because variables can't be exported as read/write\nexport function getLogLevel(): LogLevel {\n  return logClient.logLevel;\n}\n\nexport function setLogLevel(newLevel: LogLevelString | LogLevel): void {\n  logClient.setLogLevel(newLevel);\n}\n\nexport function logDebug(msg: string, ...obj: unknown[]): void {\n  if (logClient.logLevel <= LogLevel.DEBUG) {\n    const args = obj.map(argToString);\n    logClient.debug(`Firestore (${SDK_VERSION}): ${msg}`, ...args);\n  }\n}\n\nexport function logError(msg: string, ...obj: unknown[]): void {\n  if (logClient.logLevel <= LogLevel.ERROR) {\n    const args = obj.map(argToString);\n    logClient.error(`Firestore (${SDK_VERSION}): ${msg}`, ...args);\n  }\n}\n\nexport function logWarn(msg: string, ...obj: unknown[]): void {\n  if (logClient.logLevel <= LogLevel.WARN) {\n    const args = obj.map(argToString);\n    logClient.warn(`Firestore (${SDK_VERSION}): ${msg}`, ...args);\n  }\n}\n\n/**\n * Converts an additional log parameter to a string representation.\n */\nfunction argToString(obj: unknown): string | unknown {\n  if (typeof obj === 'string') {\n    return obj;\n  } else {\n    const platform = PlatformSupport.getPlatform();\n    try {\n      return platform.formatJSON(obj);\n    } catch (e) {\n      // Converting to JSON failed, just log the object directly\n      return obj;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SDK_VERSION } from '../core/version';\nimport { logError } from './log';\n\n/**\n * Unconditionally fails, throwing an Error with the given message.\n * Messages are stripped in production builds.\n *\n * Returns `never` and can be used in expressions:\n * @example\n * let futureVar = fail('not implemented yet');\n */\nexport function fail(failure: string = 'Unexpected state'): never {\n  // Log the failure in addition to throw an exception, just in case the\n  // exception is swallowed.\n  const message =\n    `FIRESTORE (${SDK_VERSION}) INTERNAL ASSERTION FAILED: ` + failure;\n  logError(message);\n\n  // NOTE: We don't use FirestoreError here because these are internal failures\n  // that cannot be handled by the user. (Also it would create a circular\n  // dependency between the error and assert modules which doesn't work.)\n  throw new Error(message);\n}\n\n/**\n * Fails if the given assertion condition is false, throwing an Error with the\n * given message if it did.\n *\n * Messages are stripped in production builds.\n */\nexport function hardAssert(\n  assertion: boolean,\n  message?: string\n): asserts assertion {\n  if (!assertion) {\n    fail(message);\n  }\n}\n\n/**\n * Fails if the given assertion condition is false, throwing an Error with the\n * given message if it did.\n *\n * The code of callsites invoking this function are stripped out in production\n * builds. Any side-effects of code within the debugAssert() invocation will not\n * happen in this case.\n */\nexport function debugAssert(\n  assertion: boolean,\n  message: string\n): asserts assertion {\n  if (!assertion) {\n    fail(message);\n  }\n}\n\n/**\n * Casts `obj` to `T`. In non-production builds, verifies that `obj` is an\n * instance of `T` before casting.\n */\nexport function debugCast<T>(\n  obj: object,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  constructor: { new (...args: any[]): T }\n): T | never {\n  debugAssert(\n    obj instanceof constructor,\n    `Expected type '${constructor.name}', but was '${obj.constructor.name}'`\n  );\n  return obj as T;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { debugAssert } from './assert';\nimport { PlatformSupport } from '../platform/platform';\n\nexport type EventHandler<E> = (value: E) => void;\nexport interface Indexable {\n  [k: string]: unknown;\n}\n\nexport class AutoId {\n  static newId(): string {\n    // Alphanumeric characters\n    const chars =\n      'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    // The largest byte value that is a multiple of `char.length`.\n    const maxMultiple = Math.floor(256 / chars.length) * chars.length;\n    debugAssert(\n      0 < maxMultiple && maxMultiple < 256,\n      `Expect maxMultiple to be (0, 256), but got ${maxMultiple}`\n    );\n\n    let autoId = '';\n    const targetLength = 20;\n    while (autoId.length < targetLength) {\n      const bytes = PlatformSupport.getPlatform().randomBytes(40);\n      for (let i = 0; i < bytes.length; ++i) {\n        // Only accept values that are [0, maxMultiple), this ensures they can\n        // be evenly mapped to indices of `chars` via a modulo operation.\n        if (autoId.length < targetLength && bytes[i] < maxMultiple) {\n          autoId += chars.charAt(bytes[i] % chars.length);\n        }\n      }\n    }\n    debugAssert(autoId.length === targetLength, 'Invalid auto ID: ' + autoId);\n\n    return autoId;\n  }\n}\n\nexport function primitiveComparator<T>(left: T, right: T): number {\n  if (left < right) {\n    return -1;\n  }\n  if (left > right) {\n    return 1;\n  }\n  return 0;\n}\n\nexport interface Equatable<T> {\n  isEqual(other: T): boolean;\n}\n\n/** Helper to compare arrays using isEqual(). */\nexport function arrayEquals<T>(\n  left: T[],\n  right: T[],\n  comparator: (l: T, r: T) => boolean\n): boolean {\n  if (left.length !== right.length) {\n    return false;\n  }\n  return left.every((value, index) => comparator(value, right[index]));\n}\n/**\n * Returns the immediate lexicographically-following string. This is useful to\n * construct an inclusive range for indexeddb iterators.\n */\nexport function immediateSuccessor(s: string): string {\n  // Return the input string, with an additional NUL byte appended.\n  return s + '\\0';\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { primitiveComparator } from '../util/misc';\n\nexport class DatabaseInfo {\n  /**\n   * Constructs a DatabaseInfo using the provided host, databaseId and\n   * persistenceKey.\n   *\n   * @param databaseId The database to use.\n   * @param persistenceKey A unique identifier for this Firestore's local\n   * storage (used in conjunction with the databaseId).\n   * @param host The Firestore backend host to connect to.\n   * @param ssl Whether to use SSL when connecting.\n   * @param forceLongPolling Whether to use the forceLongPolling option\n   * when using WebChannel as the network transport.\n   */\n  constructor(\n    readonly databaseId: DatabaseId,\n    readonly persistenceKey: string,\n    readonly host: string,\n    readonly ssl: boolean,\n    readonly forceLongPolling: boolean\n  ) {}\n}\n\n/** The default database name for a project. */\nconst DEFAULT_DATABASE_NAME = '(default)';\n\n/** Represents the database ID a Firestore client is associated with. */\nexport class DatabaseId {\n  readonly database: string;\n  constructor(readonly projectId: string, database?: string) {\n    this.database = database ? database : DEFAULT_DATABASE_NAME;\n  }\n\n  get isDefaultDatabase(): boolean {\n    return this.database === DEFAULT_DATABASE_NAME;\n  }\n\n  isEqual(other: {}): boolean {\n    return (\n      other instanceof DatabaseId &&\n      other.projectId === this.projectId &&\n      other.database === this.database\n    );\n  }\n\n  compareTo(other: DatabaseId): number {\n    return (\n      primitiveComparator(this.projectId, other.projectId) ||\n      primitiveComparator(this.database, other.database)\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Equatable } from './misc';\nimport { forEach, isEmpty } from './obj';\n\ntype Entry<K, V> = [K, V];\n\n/**\n * A map implementation that uses objects as keys. Objects must implement the\n * Equatable interface and must be immutable. Entries in the map are stored\n * together with the key being produced from the mapKeyFn. This map\n * automatically handles collisions of keys.\n */\nexport class ObjectMap<KeyType extends Equatable<KeyType>, ValueType> {\n  /**\n   * The inner map for a key -> value pair. Due to the possibility of\n   * collisions we keep a list of entries that we do a linear search through\n   * to find an actual match. Note that collisions should be rare, so we still\n   * expect near constant time lookups in practice.\n   */\n  private inner: {\n    [canonicalId: string]: Array<Entry<KeyType, ValueType>>;\n  } = {};\n\n  constructor(private mapKeyFn: (key: KeyType) => string) {}\n\n  /** Get a value for this key, or undefined if it does not exist. */\n  get(key: KeyType): ValueType | undefined {\n    const id = this.mapKeyFn(key);\n    const matches = this.inner[id];\n    if (matches === undefined) {\n      return undefined;\n    }\n    for (const [otherKey, value] of matches) {\n      if (otherKey.isEqual(key)) {\n        return value;\n      }\n    }\n    return undefined;\n  }\n\n  has(key: KeyType): boolean {\n    return this.get(key) !== undefined;\n  }\n\n  /** Put this key and value in the map. */\n  set(key: KeyType, value: ValueType): void {\n    const id = this.mapKeyFn(key);\n    const matches = this.inner[id];\n    if (matches === undefined) {\n      this.inner[id] = [[key, value]];\n      return;\n    }\n    for (let i = 0; i < matches.length; i++) {\n      if (matches[i][0].isEqual(key)) {\n        matches[i] = [key, value];\n        return;\n      }\n    }\n    matches.push([key, value]);\n  }\n\n  /**\n   * Remove this key from the map. Returns a boolean if anything was deleted.\n   */\n  delete(key: KeyType): boolean {\n    const id = this.mapKeyFn(key);\n    const matches = this.inner[id];\n    if (matches === undefined) {\n      return false;\n    }\n    for (let i = 0; i < matches.length; i++) {\n      if (matches[i][0].isEqual(key)) {\n        if (matches.length === 1) {\n          delete this.inner[id];\n        } else {\n          matches.splice(i, 1);\n        }\n        return true;\n      }\n    }\n    return false;\n  }\n\n  forEach(fn: (key: KeyType, val: ValueType) => void): void {\n    forEach(this.inner, (_, entries) => {\n      for (const [k, v] of entries) {\n        fn(k, v);\n      }\n    });\n  }\n\n  isEmpty(): boolean {\n    return isEmpty(this.inner);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Timestamp } from '../api/timestamp';\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { BatchId } from '../core/types';\nimport { hardAssert, debugAssert } from '../util/assert';\nimport { arrayEquals } from '../util/misc';\nimport {\n  documentKeySet,\n  DocumentKeySet,\n  DocumentVersionMap,\n  documentVersionMap,\n  MaybeDocumentMap\n} from './collections';\nimport { MaybeDocument } from './document';\nimport { DocumentKey } from './document_key';\nimport { Mutation, MutationResult } from './mutation';\n\nexport const BATCHID_UNKNOWN = -1;\n\n/**\n * A batch of mutations that will be sent as one unit to the backend.\n */\nexport class MutationBatch {\n  /**\n   * @param batchId The unique ID of this mutation batch.\n   * @param localWriteTime The original write time of this mutation.\n   * @param baseMutations Mutations that are used to populate the base\n   * values when this mutation is applied locally. This can be used to locally\n   * overwrite values that are persisted in the remote document cache. Base\n   * mutations are never sent to the backend.\n   * @param mutations The user-provided mutations in this mutation batch.\n   * User-provided mutations are applied both locally and remotely on the\n   * backend.\n   */\n  constructor(\n    public batchId: BatchId,\n    public localWriteTime: Timestamp,\n    public baseMutations: Mutation[],\n    public mutations: Mutation[]\n  ) {\n    debugAssert(mutations.length > 0, 'Cannot create an empty mutation batch');\n  }\n\n  /**\n   * Applies all the mutations in this MutationBatch to the specified document\n   * to create a new remote document\n   *\n   * @param docKey The key of the document to apply mutations to.\n   * @param maybeDoc The document to apply mutations to.\n   * @param batchResult The result of applying the MutationBatch to the\n   * backend.\n   */\n  applyToRemoteDocument(\n    docKey: DocumentKey,\n    maybeDoc: MaybeDocument | null,\n    batchResult: MutationBatchResult\n  ): MaybeDocument | null {\n    if (maybeDoc) {\n      debugAssert(\n        maybeDoc.key.isEqual(docKey),\n        `applyToRemoteDocument: key ${docKey} should match maybeDoc key\n        ${maybeDoc.key}`\n      );\n    }\n\n    const mutationResults = batchResult.mutationResults;\n    debugAssert(\n      mutationResults.length === this.mutations.length,\n      `Mismatch between mutations length\n      (${this.mutations.length}) and mutation results length\n      (${mutationResults.length}).`\n    );\n\n    for (let i = 0; i < this.mutations.length; i++) {\n      const mutation = this.mutations[i];\n      if (mutation.key.isEqual(docKey)) {\n        const mutationResult = mutationResults[i];\n        maybeDoc = mutation.applyToRemoteDocument(maybeDoc, mutationResult);\n      }\n    }\n    return maybeDoc;\n  }\n\n  /**\n   * Computes the local view of a document given all the mutations in this\n   * batch.\n   *\n   * @param docKey The key of the document to apply mutations to.\n   * @param maybeDoc The document to apply mutations to.\n   */\n  applyToLocalView(\n    docKey: DocumentKey,\n    maybeDoc: MaybeDocument | null\n  ): MaybeDocument | null {\n    if (maybeDoc) {\n      debugAssert(\n        maybeDoc.key.isEqual(docKey),\n        `applyToLocalDocument: key ${docKey} should match maybeDoc key\n        ${maybeDoc.key}`\n      );\n    }\n\n    // First, apply the base state. This allows us to apply non-idempotent\n    // transform against a consistent set of values.\n    for (const mutation of this.baseMutations) {\n      if (mutation.key.isEqual(docKey)) {\n        maybeDoc = mutation.applyToLocalView(\n          maybeDoc,\n          maybeDoc,\n          this.localWriteTime\n        );\n      }\n    }\n\n    const baseDoc = maybeDoc;\n\n    // Second, apply all user-provided mutations.\n    for (const mutation of this.mutations) {\n      if (mutation.key.isEqual(docKey)) {\n        maybeDoc = mutation.applyToLocalView(\n          maybeDoc,\n          baseDoc,\n          this.localWriteTime\n        );\n      }\n    }\n    return maybeDoc;\n  }\n\n  /**\n   * Computes the local view for all provided documents given the mutations in\n   * this batch.\n   */\n  applyToLocalDocumentSet(maybeDocs: MaybeDocumentMap): MaybeDocumentMap {\n    // TODO(mrschmidt): This implementation is O(n^2). If we apply the mutations\n    // directly (as done in `applyToLocalView()`), we can reduce the complexity\n    // to O(n).\n    let mutatedDocuments = maybeDocs;\n    this.mutations.forEach(m => {\n      const mutatedDocument = this.applyToLocalView(\n        m.key,\n        maybeDocs.get(m.key)\n      );\n      if (mutatedDocument) {\n        mutatedDocuments = mutatedDocuments.insert(m.key, mutatedDocument);\n      }\n    });\n    return mutatedDocuments;\n  }\n\n  keys(): DocumentKeySet {\n    return this.mutations.reduce(\n      (keys, m) => keys.add(m.key),\n      documentKeySet()\n    );\n  }\n\n  isEqual(other: MutationBatch): boolean {\n    return (\n      this.batchId === other.batchId &&\n      arrayEquals(this.mutations, other.mutations, (l, r) => l.isEqual(r)) &&\n      arrayEquals(this.baseMutations, other.baseMutations, (l, r) =>\n        l.isEqual(r)\n      )\n    );\n  }\n}\n\n/** The result of applying a mutation batch to the backend. */\nexport class MutationBatchResult {\n  private constructor(\n    readonly batch: MutationBatch,\n    readonly commitVersion: SnapshotVersion,\n    readonly mutationResults: MutationResult[],\n    /**\n     * A pre-computed mapping from each mutated document to the resulting\n     * version.\n     */\n    readonly docVersions: DocumentVersionMap\n  ) {}\n\n  /**\n   * Creates a new MutationBatchResult for the given batch and results. There\n   * must be one result for each mutation in the batch. This static factory\n   * caches a document=>version mapping (docVersions).\n   */\n  static from(\n    batch: MutationBatch,\n    commitVersion: SnapshotVersion,\n    results: MutationResult[]\n  ): MutationBatchResult {\n    hardAssert(\n      batch.mutations.length === results.length,\n      'Mutations sent ' +\n        batch.mutations.length +\n        ' must equal results received ' +\n        results.length\n    );\n\n    let versionMap = documentVersionMap();\n    const mutations = batch.mutations;\n    for (let i = 0; i < mutations.length; i++) {\n      versionMap = versionMap.insert(mutations[i].key, results[i].version);\n    }\n\n    return new MutationBatchResult(batch, commitVersion, results, versionMap);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { fail } from '../util/assert';\n\nexport type FulfilledHandler<T, R> =\n  | ((result: T) => R | PersistencePromise<R>)\n  | null;\nexport type RejectedHandler<R> =\n  | ((reason: Error) => R | PersistencePromise<R>)\n  | null;\nexport type Resolver<T> = (value?: T) => void;\nexport type Rejector = (error: Error) => void;\n\n/**\n * PersistencePromise<> is essentially a re-implementation of Promise<> except\n * it has a .next() method instead of .then() and .next() and .catch() callbacks\n * are executed synchronously when a PersistencePromise resolves rather than\n * asynchronously (Promise<> implementations use setImmediate() or similar).\n *\n * This is necessary to interoperate with IndexedDB which will automatically\n * commit transactions if control is returned to the event loop without\n * synchronously initiating another operation on the transaction.\n *\n * NOTE: .then() and .catch() only allow a single consumer, unlike normal\n * Promises.\n */\nexport class PersistencePromise<T> {\n  // NOTE: next/catchCallback will always point to our own wrapper functions,\n  // not the user's raw next() or catch() callbacks.\n  private nextCallback: FulfilledHandler<T, unknown> = null;\n  private catchCallback: RejectedHandler<unknown> = null;\n\n  // When the operation resolves, we'll set result or error and mark isDone.\n  private result: T | undefined = undefined;\n  private error: Error | undefined = undefined;\n  private isDone = false;\n\n  // Set to true when .then() or .catch() are called and prevents additional\n  // chaining.\n  private callbackAttached = false;\n\n  constructor(callback: (resolve: Resolver<T>, reject: Rejector) => void) {\n    callback(\n      value => {\n        this.isDone = true;\n        this.result = value;\n        if (this.nextCallback) {\n          // value should be defined unless T is Void, but we can't express\n          // that in the type system.\n          this.nextCallback(value!);\n        }\n      },\n      error => {\n        this.isDone = true;\n        this.error = error;\n        if (this.catchCallback) {\n          this.catchCallback(error);\n        }\n      }\n    );\n  }\n\n  catch<R>(\n    fn: (error: Error) => R | PersistencePromise<R>\n  ): PersistencePromise<R> {\n    return this.next(undefined, fn);\n  }\n\n  next<R>(\n    nextFn?: FulfilledHandler<T, R>,\n    catchFn?: RejectedHandler<R>\n  ): PersistencePromise<R> {\n    if (this.callbackAttached) {\n      fail('Called next() or catch() twice for PersistencePromise');\n    }\n    this.callbackAttached = true;\n    if (this.isDone) {\n      if (!this.error) {\n        return this.wrapSuccess(nextFn, this.result!);\n      } else {\n        return this.wrapFailure(catchFn, this.error);\n      }\n    } else {\n      return new PersistencePromise<R>((resolve, reject) => {\n        this.nextCallback = (value: T) => {\n          this.wrapSuccess(nextFn, value).next(resolve, reject);\n        };\n        this.catchCallback = (error: Error) => {\n          this.wrapFailure(catchFn, error).next(resolve, reject);\n        };\n      });\n    }\n  }\n\n  toPromise(): Promise<T> {\n    return new Promise((resolve, reject) => {\n      this.next(resolve, reject);\n    });\n  }\n\n  private wrapUserFunction<R>(\n    fn: () => R | PersistencePromise<R>\n  ): PersistencePromise<R> {\n    try {\n      const result = fn();\n      if (result instanceof PersistencePromise) {\n        return result;\n      } else {\n        return PersistencePromise.resolve(result);\n      }\n    } catch (e) {\n      return PersistencePromise.reject<R>(e);\n    }\n  }\n\n  private wrapSuccess<R>(\n    nextFn: FulfilledHandler<T, R> | undefined,\n    value: T\n  ): PersistencePromise<R> {\n    if (nextFn) {\n      return this.wrapUserFunction(() => nextFn(value));\n    } else {\n      // If there's no nextFn, then R must be the same as T\n      return PersistencePromise.resolve<R>((value as unknown) as R);\n    }\n  }\n\n  private wrapFailure<R>(\n    catchFn: RejectedHandler<R> | undefined,\n    error: Error\n  ): PersistencePromise<R> {\n    if (catchFn) {\n      return this.wrapUserFunction(() => catchFn(error));\n    } else {\n      return PersistencePromise.reject<R>(error);\n    }\n  }\n\n  static resolve(): PersistencePromise<void>;\n  static resolve<R>(result: R): PersistencePromise<R>;\n  static resolve<R>(result?: R): PersistencePromise<R | void> {\n    return new PersistencePromise<R | void>((resolve, reject) => {\n      resolve(result);\n    });\n  }\n\n  static reject<R>(error: Error): PersistencePromise<R> {\n    return new PersistencePromise<R>((resolve, reject) => {\n      reject(error);\n    });\n  }\n\n  static waitFor(\n    // Accept all Promise types in waitFor().\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    all: { forEach: (cb: (el: PersistencePromise<any>) => void) => void }\n  ): PersistencePromise<void> {\n    return new PersistencePromise<void>((resolve, reject) => {\n      let expectedCount = 0;\n      let resolvedCount = 0;\n      let done = false;\n\n      all.forEach(element => {\n        ++expectedCount;\n        element.next(\n          () => {\n            ++resolvedCount;\n            if (done && resolvedCount === expectedCount) {\n              resolve();\n            }\n          },\n          err => reject(err)\n        );\n      });\n\n      done = true;\n      if (resolvedCount === expectedCount) {\n        resolve();\n      }\n    });\n  }\n\n  /**\n   * Given an array of predicate functions that asynchronously evaluate to a\n   * boolean, implements a short-circuiting `or` between the results. Predicates\n   * will be evaluated until one of them returns `true`, then stop. The final\n   * result will be whether any of them returned `true`.\n   */\n  static or(\n    predicates: Array<() => PersistencePromise<boolean>>\n  ): PersistencePromise<boolean> {\n    let p: PersistencePromise<boolean> = PersistencePromise.resolve<boolean>(\n      false\n    );\n    for (const predicate of predicates) {\n      p = p.next(isTrue => {\n        if (isTrue) {\n          return PersistencePromise.resolve<boolean>(isTrue);\n        } else {\n          return predicate();\n        }\n      });\n    }\n    return p;\n  }\n\n  /**\n   * Given an iterable, call the given function on each element in the\n   * collection and wait for all of the resulting concurrent PersistencePromises\n   * to resolve.\n   */\n  static forEach<R, S>(\n    collection: { forEach: (cb: (r: R, s: S) => void) => void },\n    f:\n      | ((r: R, s: S) => PersistencePromise<void>)\n      | ((r: R) => PersistencePromise<void>)\n  ): PersistencePromise<void>;\n  static forEach<R>(\n    collection: { forEach: (cb: (r: R) => void) => void },\n    f: (r: R) => PersistencePromise<void>\n  ): PersistencePromise<void>;\n  static forEach<R, S>(\n    collection: { forEach: (cb: (r: R, s?: S) => void) => void },\n    f: (r: R, s?: S) => PersistencePromise<void>\n  ): PersistencePromise<void> {\n    const promises: Array<PersistencePromise<void>> = [];\n    collection.forEach((r, s) => {\n      promises.push(f.call(this, r, s));\n    });\n    return this.waitFor(promises);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DocumentKeySet, NullableMaybeDocumentMap } from '../model/collections';\nimport { MaybeDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { debugAssert } from '../util/assert';\nimport { ObjectMap } from '../util/obj_map';\n\nimport { PersistenceTransaction } from './persistence';\nimport { PersistencePromise } from './persistence_promise';\nimport { SnapshotVersion } from '../core/snapshot_version';\n\n/**\n * An in-memory buffer of entries to be written to a RemoteDocumentCache.\n * It can be used to batch up a set of changes to be written to the cache, but\n * additionally supports reading entries back with the `getEntry()` method,\n * falling back to the underlying RemoteDocumentCache if no entry is\n * buffered.\n *\n * Entries added to the cache *must* be read first. This is to facilitate\n * calculating the size delta of the pending changes.\n *\n * PORTING NOTE: This class was implemented then removed from other platforms.\n * If byte-counting ends up being needed on the other platforms, consider\n * porting this class as part of that implementation work.\n */\nexport abstract class RemoteDocumentChangeBuffer {\n  // A mapping of document key to the new cache entry that should be written (or null if any\n  // existing cache entry should be removed).\n  protected changes: ObjectMap<\n    DocumentKey,\n    MaybeDocument | null\n  > = new ObjectMap(key => key.toString());\n\n  // The read time to use for all added documents in this change buffer.\n  private _readTime: SnapshotVersion | undefined;\n\n  private changesApplied = false;\n\n  protected abstract getFromCache(\n    transaction: PersistenceTransaction,\n    documentKey: DocumentKey\n  ): PersistencePromise<MaybeDocument | null>;\n\n  protected abstract getAllFromCache(\n    transaction: PersistenceTransaction,\n    documentKeys: DocumentKeySet\n  ): PersistencePromise<NullableMaybeDocumentMap>;\n\n  protected abstract applyChanges(\n    transaction: PersistenceTransaction\n  ): PersistencePromise<void>;\n\n  protected set readTime(value: SnapshotVersion) {\n    // Right now (for simplicity) we just track a single readTime for all the\n    // added entries since we expect them to all be the same, but we could\n    // rework to store per-entry readTimes if necessary.\n    debugAssert(\n      this._readTime === undefined || this._readTime.isEqual(value),\n      'All changes in a RemoteDocumentChangeBuffer must have the same read time'\n    );\n    this._readTime = value;\n  }\n\n  protected get readTime(): SnapshotVersion {\n    debugAssert(\n      this._readTime !== undefined,\n      'Read time is not set. All removeEntry() calls must include a readTime if `trackRemovals` is used.'\n    );\n    return this._readTime;\n  }\n\n  /**\n   * Buffers a `RemoteDocumentCache.addEntry()` call.\n   *\n   * You can only modify documents that have already been retrieved via\n   * `getEntry()/getEntries()` (enforced via IndexedDbs `apply()`).\n   */\n  addEntry(maybeDocument: MaybeDocument, readTime: SnapshotVersion): void {\n    this.assertNotApplied();\n    this.readTime = readTime;\n    this.changes.set(maybeDocument.key, maybeDocument);\n  }\n\n  /**\n   * Buffers a `RemoteDocumentCache.removeEntry()` call.\n   *\n   * You can only remove documents that have already been retrieved via\n   * `getEntry()/getEntries()` (enforced via IndexedDbs `apply()`).\n   */\n  removeEntry(key: DocumentKey, readTime?: SnapshotVersion): void {\n    this.assertNotApplied();\n    if (readTime) {\n      this.readTime = readTime;\n    }\n    this.changes.set(key, null);\n  }\n\n  /**\n   * Looks up an entry in the cache. The buffered changes will first be checked,\n   * and if no buffered change applies, this will forward to\n   * `RemoteDocumentCache.getEntry()`.\n   *\n   * @param transaction The transaction in which to perform any persistence\n   *     operations.\n   * @param documentKey The key of the entry to look up.\n   * @return The cached Document or NoDocument entry, or null if we have nothing\n   * cached.\n   */\n  getEntry(\n    transaction: PersistenceTransaction,\n    documentKey: DocumentKey\n  ): PersistencePromise<MaybeDocument | null> {\n    this.assertNotApplied();\n    const bufferedEntry = this.changes.get(documentKey);\n    if (bufferedEntry !== undefined) {\n      return PersistencePromise.resolve<MaybeDocument | null>(bufferedEntry);\n    } else {\n      return this.getFromCache(transaction, documentKey);\n    }\n  }\n\n  /**\n   * Looks up several entries in the cache, forwarding to\n   * `RemoteDocumentCache.getEntry()`.\n   *\n   * @param transaction The transaction in which to perform any persistence\n   *     operations.\n   * @param documentKeys The keys of the entries to look up.\n   * @return A map of cached `Document`s or `NoDocument`s, indexed by key. If an\n   *     entry cannot be found, the corresponding key will be mapped to a null\n   *     value.\n   */\n  getEntries(\n    transaction: PersistenceTransaction,\n    documentKeys: DocumentKeySet\n  ): PersistencePromise<NullableMaybeDocumentMap> {\n    return this.getAllFromCache(transaction, documentKeys);\n  }\n\n  /**\n   * Applies buffered changes to the underlying RemoteDocumentCache, using\n   * the provided transaction.\n   */\n  apply(transaction: PersistenceTransaction): PersistencePromise<void> {\n    this.assertNotApplied();\n    this.changesApplied = true;\n    return this.applyChanges(transaction);\n  }\n\n  /** Helper to assert this.changes is not null  */\n  protected assertNotApplied(): void {\n    debugAssert(!this.changesApplied, 'Changes have already been applied.');\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { User } from '../auth/user';\nimport { ListenSequenceNumber, TargetId } from '../core/types';\nimport { DocumentKey } from '../model/document_key';\nimport { IndexManager } from './index_manager';\nimport { LocalStore } from './local_store';\nimport { MutationQueue } from './mutation_queue';\nimport { PersistencePromise } from './persistence_promise';\nimport { TargetCache } from './target_cache';\nimport { RemoteDocumentCache } from './remote_document_cache';\nimport { TargetData } from './target_data';\n\nexport const PRIMARY_LEASE_LOST_ERROR_MSG =\n  'The current tab is not in the required state to perform this operation. ' +\n  'It might be necessary to refresh the browser tab.';\n\n/**\n * A base class representing a persistence transaction, encapsulating both the\n * transaction's sequence numbers as well as a list of onCommitted listeners.\n *\n * When you call Persistence.runTransaction(), it will create a transaction and\n * pass it to your callback. You then pass it to any method that operates\n * on persistence.\n */\nexport abstract class PersistenceTransaction {\n  private readonly onCommittedListeners: Array<() => void> = [];\n\n  abstract readonly currentSequenceNumber: ListenSequenceNumber;\n\n  addOnCommittedListener(listener: () => void): void {\n    this.onCommittedListeners.push(listener);\n  }\n\n  raiseOnCommittedEvent(): void {\n    this.onCommittedListeners.forEach(listener => listener());\n  }\n}\n\n/** The different modes supported by `IndexedDbPersistence.runTransaction()`. */\nexport type PersistenceTransactionMode =\n  | 'readonly'\n  | 'readwrite'\n  | 'readwrite-primary';\n\n/**\n * Callback type for primary state notifications. This callback can be\n * registered with the persistence layer to get notified when we transition from\n * primary to secondary state and vice versa.\n *\n * Note: Instances can only toggle between Primary and Secondary state if\n * IndexedDB persistence is enabled and multiple clients are active. If this\n * listener is registered with MemoryPersistence, the callback will be called\n * exactly once marking the current instance as Primary.\n */\nexport type PrimaryStateListener = (isPrimary: boolean) => Promise<void>;\n\n/**\n * A ReferenceDelegate instance handles all of the hooks into the document-reference lifecycle. This\n * includes being added to a target, being removed from a target, being subject to mutation, and\n * being mutated by the user.\n *\n * Different implementations may do different things with each of these events. Not every\n * implementation needs to do something with every lifecycle hook.\n *\n * PORTING NOTE: since sequence numbers are attached to transactions in this\n * client, the ReferenceDelegate does not need to deal in transactional\n * semantics (onTransactionStarted/Committed()), nor does it need to track and\n * generate sequence numbers (getCurrentSequenceNumber()).\n */\nexport interface ReferenceDelegate {\n  /** Notify the delegate that the given document was added to a target. */\n  addReference(\n    txn: PersistenceTransaction,\n    targetId: TargetId,\n    doc: DocumentKey\n  ): PersistencePromise<void>;\n\n  /** Notify the delegate that the given document was removed from a target. */\n  removeReference(\n    txn: PersistenceTransaction,\n    targetId: TargetId,\n    doc: DocumentKey\n  ): PersistencePromise<void>;\n\n  /**\n   * Notify the delegate that a target was removed. The delegate may, but is not obligated to,\n   * actually delete the target and associated data.\n   */\n  removeTarget(\n    txn: PersistenceTransaction,\n    targetData: TargetData\n  ): PersistencePromise<void>;\n\n  /**\n   * Notify the delegate that a document may no longer be part of any views or\n   * have any mutations associated.\n   */\n  markPotentiallyOrphaned(\n    txn: PersistenceTransaction,\n    doc: DocumentKey\n  ): PersistencePromise<void>;\n\n  /** Notify the delegate that a limbo document was updated. */\n  updateLimboDocument(\n    txn: PersistenceTransaction,\n    doc: DocumentKey\n  ): PersistencePromise<void>;\n}\n\n/**\n * Persistence is the lowest-level shared interface to persistent storage in\n * Firestore.\n *\n * Persistence is used to create MutationQueue and RemoteDocumentCache\n * instances backed by persistence (which might be in-memory or LevelDB).\n *\n * Persistence also exposes an API to create and run PersistenceTransactions\n * against persistence. All read / write operations must be wrapped in a\n * transaction. Implementations of PersistenceTransaction / Persistence only\n * need to guarantee that writes made against the transaction are not made to\n * durable storage until the transaction resolves its PersistencePromise.\n * Since memory-only storage components do not alter durable storage, they are\n * free to ignore the transaction.\n *\n * This contract is enough to allow the LocalStore be be written\n * independently of whether or not the stored state actually is durably\n * persisted. If persistent storage is enabled, writes are grouped together to\n * avoid inconsistent state that could cause crashes.\n *\n * Concretely, when persistent storage is enabled, the persistent versions of\n * MutationQueue, RemoteDocumentCache, and others (the mutators) will\n * defer their writes into a transaction. Once the local store has completed\n * one logical operation, it commits the transaction.\n *\n * When persistent storage is disabled, the non-persistent versions of the\n * mutators ignore the transaction. This short-cut is allowed because\n * memory-only storage leaves no state so it cannot be inconsistent.\n *\n * This simplifies the implementations of the mutators and allows memory-only\n * implementations to supplement the persistent ones without requiring any\n * special dual-store implementation of Persistence. The cost is that the\n * LocalStore needs to be slightly careful about the order of its reads and\n * writes in order to avoid relying on being able to read back uncommitted\n * writes.\n */\nexport interface Persistence {\n  /**\n   * Whether or not this persistence instance has been started.\n   */\n  readonly started: boolean;\n\n  readonly referenceDelegate: ReferenceDelegate;\n\n  /** Starts persistence. */\n  start(): Promise<void>;\n\n  /**\n   * Releases any resources held during eager shutdown.\n   */\n  shutdown(): Promise<void>;\n\n  /**\n   * Registers a listener that gets called when the database receives a\n   * version change event indicating that it has deleted.\n   *\n   * PORTING NOTE: This is only used for Web multi-tab.\n   */\n  setDatabaseDeletedListener(\n    databaseDeletedListener: () => Promise<void>\n  ): void;\n\n  /**\n   * Returns a MutationQueue representing the persisted mutations for the\n   * given user.\n   *\n   * Note: The implementation is free to return the same instance every time\n   * this is called for a given user. In particular, the memory-backed\n   * implementation does this to emulate the persisted implementation to the\n   * extent possible (e.g. in the case of uid switching from\n   * sally=>jack=>sally, sally's mutation queue will be preserved).\n   */\n  getMutationQueue(user: User): MutationQueue;\n\n  /**\n   * Returns a TargetCache representing the persisted cache of targets.\n   *\n   * Note: The implementation is free to return the same instance every time\n   * this is called. In particular, the memory-backed implementation does this\n   * to emulate the persisted implementation to the extent possible.\n   */\n  getTargetCache(): TargetCache;\n\n  /**\n   * Returns a RemoteDocumentCache representing the persisted cache of remote\n   * documents.\n   *\n   * Note: The implementation is free to return the same instance every time\n   * this is called. In particular, the memory-backed implementation does this\n   * to emulate the persisted implementation to the extent possible.\n   */\n  getRemoteDocumentCache(): RemoteDocumentCache;\n\n  /**\n   * Returns an IndexManager instance that manages our persisted query indexes.\n   *\n   * Note: The implementation is free to return the same instance every time\n   * this is called. In particular, the memory-backed implementation does this\n   * to emulate the persisted implementation to the extent possible.\n   */\n  getIndexManager(): IndexManager;\n\n  /**\n   * Performs an operation inside a persistence transaction. Any reads or writes\n   * against persistence must be performed within a transaction. Writes will be\n   * committed atomically once the transaction completes.\n   *\n   * Persistence operations are asynchronous and therefore the provided\n   * transactionOperation must return a PersistencePromise. When it is resolved,\n   * the transaction will be committed and the Promise returned by this method\n   * will resolve.\n   *\n   * @param action A description of the action performed by this transaction,\n   * used for logging.\n   * @param mode The underlying mode of the IndexedDb transaction. Can be\n   * 'readonly`, 'readwrite' or 'readwrite-primary'. Transactions marked\n   * 'readwrite-primary' can only be executed by the primary client. In this\n   * mode, the transactionOperation will not be run if the primary lease cannot\n   * be acquired and the returned promise will be rejected with a\n   * FAILED_PRECONDITION error.\n   * @param transactionOperation The operation to run inside a transaction.\n   * @return A promise that is resolved once the transaction completes.\n   */\n  runTransaction<T>(\n    action: string,\n    mode: PersistenceTransactionMode,\n    transactionOperation: (\n      transaction: PersistenceTransaction\n    ) => PersistencePromise<T>\n  ): Promise<T>;\n}\n\n/**\n * Interface implemented by the LRU scheduler to start(), stop() and restart\n * garbage collection.\n */\nexport interface GarbageCollectionScheduler {\n  readonly started: boolean;\n  start(localStore: LocalStore): void;\n  stop(): void;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Query } from '../core/query';\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport {\n  DocumentKeySet,\n  documentKeySet,\n  DocumentMap,\n  documentMap,\n  MaybeDocumentMap,\n  maybeDocumentMap,\n  NullableMaybeDocumentMap,\n  nullableMaybeDocumentMap\n} from '../model/collections';\nimport { Document, MaybeDocument, NoDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { MutationBatch } from '../model/mutation_batch';\nimport { ResourcePath } from '../model/path';\n\nimport { debugAssert } from '../util/assert';\nimport { IndexManager } from './index_manager';\nimport { MutationQueue } from './mutation_queue';\nimport { PatchMutation } from '../model/mutation';\nimport { PersistenceTransaction } from './persistence';\nimport { PersistencePromise } from './persistence_promise';\nimport { RemoteDocumentCache } from './remote_document_cache';\n\n/**\n * A readonly view of the local state of all documents we're tracking (i.e. we\n * have a cached version in remoteDocumentCache or local mutations for the\n * document). The view is computed by applying the mutations in the\n * MutationQueue to the RemoteDocumentCache.\n */\nexport class LocalDocumentsView {\n  constructor(\n    readonly remoteDocumentCache: RemoteDocumentCache,\n    readonly mutationQueue: MutationQueue,\n    readonly indexManager: IndexManager\n  ) {}\n\n  /**\n   * Get the local view of the document identified by `key`.\n   *\n   * @return Local view of the document or null if we don't have any cached\n   * state for it.\n   */\n  getDocument(\n    transaction: PersistenceTransaction,\n    key: DocumentKey\n  ): PersistencePromise<MaybeDocument | null> {\n    return this.mutationQueue\n      .getAllMutationBatchesAffectingDocumentKey(transaction, key)\n      .next(batches => this.getDocumentInternal(transaction, key, batches));\n  }\n\n  /** Internal version of `getDocument` that allows reusing batches. */\n  private getDocumentInternal(\n    transaction: PersistenceTransaction,\n    key: DocumentKey,\n    inBatches: MutationBatch[]\n  ): PersistencePromise<MaybeDocument | null> {\n    return this.remoteDocumentCache.getEntry(transaction, key).next(doc => {\n      for (const batch of inBatches) {\n        doc = batch.applyToLocalView(key, doc);\n      }\n      return doc;\n    });\n  }\n\n  // Returns the view of the given `docs` as they would appear after applying\n  // all mutations in the given `batches`.\n  private applyLocalMutationsToDocuments(\n    transaction: PersistenceTransaction,\n    docs: NullableMaybeDocumentMap,\n    batches: MutationBatch[]\n  ): NullableMaybeDocumentMap {\n    let results = nullableMaybeDocumentMap();\n    docs.forEach((key, localView) => {\n      for (const batch of batches) {\n        localView = batch.applyToLocalView(key, localView);\n      }\n      results = results.insert(key, localView);\n    });\n    return results;\n  }\n\n  /**\n   * Gets the local view of the documents identified by `keys`.\n   *\n   * If we don't have cached state for a document in `keys`, a NoDocument will\n   * be stored for that key in the resulting set.\n   */\n  getDocuments(\n    transaction: PersistenceTransaction,\n    keys: DocumentKeySet\n  ): PersistencePromise<MaybeDocumentMap> {\n    return this.remoteDocumentCache\n      .getEntries(transaction, keys)\n      .next(docs => this.getLocalViewOfDocuments(transaction, docs));\n  }\n\n  /**\n   * Similar to `getDocuments`, but creates the local view from the given\n   * `baseDocs` without retrieving documents from the local store.\n   */\n  getLocalViewOfDocuments(\n    transaction: PersistenceTransaction,\n    baseDocs: NullableMaybeDocumentMap\n  ): PersistencePromise<MaybeDocumentMap> {\n    return this.mutationQueue\n      .getAllMutationBatchesAffectingDocumentKeys(transaction, baseDocs)\n      .next(batches => {\n        const docs = this.applyLocalMutationsToDocuments(\n          transaction,\n          baseDocs,\n          batches\n        );\n        let results = maybeDocumentMap();\n        docs.forEach((key, maybeDoc) => {\n          // TODO(http://b/32275378): Don't conflate missing / deleted.\n          if (!maybeDoc) {\n            maybeDoc = new NoDocument(key, SnapshotVersion.min());\n          }\n          results = results.insert(key, maybeDoc);\n        });\n\n        return results;\n      });\n  }\n\n  /**\n   * Performs a query against the local view of all documents.\n   *\n   * @param transaction The persistence transaction.\n   * @param query The query to match documents against.\n   * @param sinceReadTime If not set to SnapshotVersion.min(), return only\n   *     documents that have been read since this snapshot version (exclusive).\n   */\n  getDocumentsMatchingQuery(\n    transaction: PersistenceTransaction,\n    query: Query,\n    sinceReadTime: SnapshotVersion\n  ): PersistencePromise<DocumentMap> {\n    if (query.isDocumentQuery()) {\n      return this.getDocumentsMatchingDocumentQuery(transaction, query.path);\n    } else if (query.isCollectionGroupQuery()) {\n      return this.getDocumentsMatchingCollectionGroupQuery(\n        transaction,\n        query,\n        sinceReadTime\n      );\n    } else {\n      return this.getDocumentsMatchingCollectionQuery(\n        transaction,\n        query,\n        sinceReadTime\n      );\n    }\n  }\n\n  private getDocumentsMatchingDocumentQuery(\n    transaction: PersistenceTransaction,\n    docPath: ResourcePath\n  ): PersistencePromise<DocumentMap> {\n    // Just do a simple document lookup.\n    return this.getDocument(transaction, new DocumentKey(docPath)).next(\n      maybeDoc => {\n        let result = documentMap();\n        if (maybeDoc instanceof Document) {\n          result = result.insert(maybeDoc.key, maybeDoc);\n        }\n        return result;\n      }\n    );\n  }\n\n  private getDocumentsMatchingCollectionGroupQuery(\n    transaction: PersistenceTransaction,\n    query: Query,\n    sinceReadTime: SnapshotVersion\n  ): PersistencePromise<DocumentMap> {\n    debugAssert(\n      query.path.isEmpty(),\n      'Currently we only support collection group queries at the root.'\n    );\n    const collectionId = query.collectionGroup!;\n    let results = documentMap();\n    return this.indexManager\n      .getCollectionParents(transaction, collectionId)\n      .next(parents => {\n        // Perform a collection query against each parent that contains the\n        // collectionId and aggregate the results.\n        return PersistencePromise.forEach(parents, (parent: ResourcePath) => {\n          const collectionQuery = query.asCollectionQueryAtPath(\n            parent.child(collectionId)\n          );\n          return this.getDocumentsMatchingCollectionQuery(\n            transaction,\n            collectionQuery,\n            sinceReadTime\n          ).next(r => {\n            r.forEach((key, doc) => {\n              results = results.insert(key, doc);\n            });\n          });\n        }).next(() => results);\n      });\n  }\n\n  private getDocumentsMatchingCollectionQuery(\n    transaction: PersistenceTransaction,\n    query: Query,\n    sinceReadTime: SnapshotVersion\n  ): PersistencePromise<DocumentMap> {\n    // Query the remote documents and overlay mutations.\n    let results: DocumentMap;\n    let mutationBatches: MutationBatch[];\n    return this.remoteDocumentCache\n      .getDocumentsMatchingQuery(transaction, query, sinceReadTime)\n      .next(queryResults => {\n        results = queryResults;\n        return this.mutationQueue.getAllMutationBatchesAffectingQuery(\n          transaction,\n          query\n        );\n      })\n      .next(matchingMutationBatches => {\n        mutationBatches = matchingMutationBatches;\n        // It is possible that a PatchMutation can make a document match a query, even if\n        // the version in the RemoteDocumentCache is not a match yet (waiting for server\n        // to ack). To handle this, we find all document keys affected by the PatchMutations\n        // that are not in `result` yet, and back fill them via `remoteDocumentCache.getEntries`,\n        // otherwise those `PatchMutations` will be ignored because no base document can be found,\n        // and lead to missing result for the query.\n        return this.addMissingBaseDocuments(\n          transaction,\n          mutationBatches,\n          results\n        ).next(mergedDocuments => {\n          results = mergedDocuments;\n\n          for (const batch of mutationBatches) {\n            for (const mutation of batch.mutations) {\n              const key = mutation.key;\n              const baseDoc = results.get(key);\n              const mutatedDoc = mutation.applyToLocalView(\n                baseDoc,\n                baseDoc,\n                batch.localWriteTime\n              );\n              if (mutatedDoc instanceof Document) {\n                results = results.insert(key, mutatedDoc);\n              } else {\n                results = results.remove(key);\n              }\n            }\n          }\n        });\n      })\n      .next(() => {\n        // Finally, filter out any documents that don't actually match\n        // the query.\n        results.forEach((key, doc) => {\n          if (!query.matches(doc)) {\n            results = results.remove(key);\n          }\n        });\n\n        return results;\n      });\n  }\n\n  private addMissingBaseDocuments(\n    transaction: PersistenceTransaction,\n    matchingMutationBatches: MutationBatch[],\n    existingDocuments: DocumentMap\n  ): PersistencePromise<DocumentMap> {\n    let missingBaseDocEntriesForPatching = documentKeySet();\n    for (const batch of matchingMutationBatches) {\n      for (const mutation of batch.mutations) {\n        if (\n          mutation instanceof PatchMutation &&\n          existingDocuments.get(mutation.key) === null\n        ) {\n          missingBaseDocEntriesForPatching = missingBaseDocEntriesForPatching.add(\n            mutation.key\n          );\n        }\n      }\n    }\n\n    let mergedDocuments = existingDocuments;\n    return this.remoteDocumentCache\n      .getEntries(transaction, missingBaseDocEntriesForPatching)\n      .next(missingBaseDocs => {\n        missingBaseDocs.forEach((key, doc) => {\n          if (doc !== null && doc instanceof Document) {\n            mergedDocuments = mergedDocuments.insert(key, doc);\n          }\n        });\n        return mergedDocuments;\n      });\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { TargetId } from '../core/types';\nimport { ChangeType, ViewSnapshot } from '../core/view_snapshot';\nimport { documentKeySet, DocumentKeySet } from '../model/collections';\n\n/**\n * A set of changes to what documents are currently in view and out of view for\n * a given query. These changes are sent to the LocalStore by the View (via\n * the SyncEngine) and are used to pin / unpin documents as appropriate.\n */\nexport class LocalViewChanges {\n  constructor(\n    readonly targetId: TargetId,\n    readonly fromCache: boolean,\n    readonly addedKeys: DocumentKeySet,\n    readonly removedKeys: DocumentKeySet\n  ) {}\n\n  static fromSnapshot(\n    targetId: TargetId,\n    viewSnapshot: ViewSnapshot\n  ): LocalViewChanges {\n    let addedKeys = documentKeySet();\n    let removedKeys = documentKeySet();\n\n    for (const docChange of viewSnapshot.docChanges) {\n      switch (docChange.type) {\n        case ChangeType.Added:\n          addedKeys = addedKeys.add(docChange.doc.key);\n          break;\n        case ChangeType.Removed:\n          removedKeys = removedKeys.add(docChange.doc.key);\n          break;\n        default:\n        // do nothing\n      }\n    }\n\n    return new LocalViewChanges(\n      targetId,\n      viewSnapshot.fromCache,\n      addedKeys,\n      removedKeys\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ListenSequenceNumber } from './types';\n\n/**\n * `SequenceNumberSyncer` defines the methods required to keep multiple instances of a\n * `ListenSequence` in sync.\n */\nexport interface SequenceNumberSyncer {\n  // Notify the syncer that a new sequence number has been used.\n  writeSequenceNumber(sequenceNumber: ListenSequenceNumber): void;\n  // Setting this property allows the syncer to notify when a sequence number has been used, and\n  // and lets the ListenSequence adjust its internal previous value accordingly.\n  sequenceNumberHandler:\n    | ((sequenceNumber: ListenSequenceNumber) => void)\n    | null;\n}\n\n/**\n * `ListenSequence` is a monotonic sequence. It is initialized with a minimum value to\n * exceed. All subsequent calls to next will return increasing values. If provided with a\n * `SequenceNumberSyncer`, it will additionally bump its next value when told of a new value, as\n * well as write out sequence numbers that it produces via `next()`.\n */\nexport class ListenSequence {\n  static readonly INVALID: ListenSequenceNumber = -1;\n\n  private writeNewSequenceNumber?: (\n    newSequenceNumber: ListenSequenceNumber\n  ) => void;\n\n  constructor(\n    private previousValue: ListenSequenceNumber,\n    sequenceNumberSyncer?: SequenceNumberSyncer\n  ) {\n    if (sequenceNumberSyncer) {\n      sequenceNumberSyncer.sequenceNumberHandler = sequenceNumber =>\n        this.setPreviousValue(sequenceNumber);\n      this.writeNewSequenceNumber = sequenceNumber =>\n        sequenceNumberSyncer.writeSequenceNumber(sequenceNumber);\n    }\n  }\n\n  private setPreviousValue(\n    externalPreviousValue: ListenSequenceNumber\n  ): ListenSequenceNumber {\n    this.previousValue = Math.max(externalPreviousValue, this.previousValue);\n    return this.previousValue;\n  }\n\n  next(): ListenSequenceNumber {\n    const nextValue = ++this.previousValue;\n    if (this.writeNewSequenceNumber) {\n      this.writeNewSequenceNumber(nextValue);\n    }\n    return nextValue;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport interface Resolver<R> {\n  (value?: R | Promise<R>): void;\n}\n\nexport interface Rejecter {\n  (reason?: Error): void;\n}\n\nexport class Deferred<R = void> {\n  promise: Promise<R>;\n  // Assigned synchronously in constructor by Promise constructor callback.\n  resolve!: Resolver<R>;\n  reject!: Rejecter;\n\n  constructor() {\n    this.promise = new Promise((resolve: Resolver<R>, reject: Rejecter) => {\n      this.resolve = resolve;\n      this.reject = reject;\n    });\n  }\n}\n\n/**\n * Takes an array of values and a function from a value to a Promise. The function is run on each\n * value sequentially, waiting for the previous promise to resolve before starting the next one.\n * The returned promise resolves once the function has been run on all values.\n */\nexport function sequence<T>(\n  values: T[],\n  fn: (value: T) => Promise<void>\n): Promise<void> {\n  let p = Promise.resolve();\n  for (const value of values) {\n    p = p.then(() => fn(value));\n  }\n  return p;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AsyncQueue, DelayedOperation, TimerId } from '../util/async_queue';\nimport { logDebug } from '../util/log';\n\nconst LOG_TAG = 'ExponentialBackoff';\n\n/**\n * Initial backoff time in milliseconds after an error.\n * Set to 1s according to https://cloud.google.com/apis/design/errors.\n */\nconst DEFAULT_BACKOFF_INITIAL_DELAY_MS = 1000;\n\nconst DEFAULT_BACKOFF_FACTOR = 1.5;\n\n/** Maximum backoff time in milliseconds */\nconst DEFAULT_BACKOFF_MAX_DELAY_MS = 60 * 1000;\n\n/**\n * A helper for running delayed tasks following an exponential backoff curve\n * between attempts.\n *\n * Each delay is made up of a \"base\" delay which follows the exponential\n * backoff curve, and a +/- 50% \"jitter\" that is calculated and added to the\n * base delay. This prevents clients from accidentally synchronizing their\n * delays causing spikes of load to the backend.\n */\nexport class ExponentialBackoff {\n  private currentBaseMs: number = 0;\n  private timerPromise: DelayedOperation<void> | null = null;\n  /** The last backoff attempt, as epoch milliseconds. */\n  private lastAttemptTime = Date.now();\n\n  constructor(\n    /**\n     * The AsyncQueue to run backoff operations on.\n     */\n    private readonly queue: AsyncQueue,\n    /**\n     * The ID to use when scheduling backoff operations on the AsyncQueue.\n     */\n    private readonly timerId: TimerId,\n    /**\n     * The initial delay (used as the base delay on the first retry attempt).\n     * Note that jitter will still be applied, so the actual delay could be as\n     * little as 0.5*initialDelayMs.\n     */\n    private readonly initialDelayMs: number = DEFAULT_BACKOFF_INITIAL_DELAY_MS,\n    /**\n     * The multiplier to use to determine the extended base delay after each\n     * attempt.\n     */\n    private readonly backoffFactor: number = DEFAULT_BACKOFF_FACTOR,\n    /**\n     * The maximum base delay after which no further backoff is performed.\n     * Note that jitter will still be applied, so the actual delay could be as\n     * much as 1.5*maxDelayMs.\n     */\n    private readonly maxDelayMs: number = DEFAULT_BACKOFF_MAX_DELAY_MS\n  ) {\n    this.reset();\n  }\n\n  /**\n   * Resets the backoff delay.\n   *\n   * The very next backoffAndWait() will have no delay. If it is called again\n   * (i.e. due to an error), initialDelayMs (plus jitter) will be used, and\n   * subsequent ones will increase according to the backoffFactor.\n   */\n  reset(): void {\n    this.currentBaseMs = 0;\n  }\n\n  /**\n   * Resets the backoff delay to the maximum delay (e.g. for use after a\n   * RESOURCE_EXHAUSTED error).\n   */\n  resetToMax(): void {\n    this.currentBaseMs = this.maxDelayMs;\n  }\n\n  /**\n   * Returns a promise that resolves after currentDelayMs, and increases the\n   * delay for any subsequent attempts. If there was a pending backoff operation\n   * already, it will be canceled.\n   */\n  backoffAndRun(op: () => Promise<void>): void {\n    // Cancel any pending backoff operation.\n    this.cancel();\n\n    // First schedule using the current base (which may be 0 and should be\n    // honored as such).\n    const desiredDelayWithJitterMs = Math.floor(\n      this.currentBaseMs + this.jitterDelayMs()\n    );\n\n    // Guard against lastAttemptTime being in the future due to a clock change.\n    const delaySoFarMs = Math.max(0, Date.now() - this.lastAttemptTime);\n\n    // Guard against the backoff delay already being past.\n    const remainingDelayMs = Math.max(\n      0,\n      desiredDelayWithJitterMs - delaySoFarMs\n    );\n\n    if (remainingDelayMs > 0) {\n      logDebug(\n        LOG_TAG,\n        `Backing off for ${remainingDelayMs} ms ` +\n          `(base delay: ${this.currentBaseMs} ms, ` +\n          `delay with jitter: ${desiredDelayWithJitterMs} ms, ` +\n          `last attempt: ${delaySoFarMs} ms ago)`\n      );\n    }\n\n    this.timerPromise = this.queue.enqueueAfterDelay(\n      this.timerId,\n      remainingDelayMs,\n      () => {\n        this.lastAttemptTime = Date.now();\n        return op();\n      }\n    );\n\n    // Apply backoff factor to determine next delay and ensure it is within\n    // bounds.\n    this.currentBaseMs *= this.backoffFactor;\n    if (this.currentBaseMs < this.initialDelayMs) {\n      this.currentBaseMs = this.initialDelayMs;\n    }\n    if (this.currentBaseMs > this.maxDelayMs) {\n      this.currentBaseMs = this.maxDelayMs;\n    }\n  }\n\n  skipBackoff(): void {\n    if (this.timerPromise !== null) {\n      this.timerPromise.skipDelay();\n      this.timerPromise = null;\n    }\n  }\n\n  cancel(): void {\n    if (this.timerPromise !== null) {\n      this.timerPromise.cancel();\n      this.timerPromise = null;\n    }\n  }\n\n  /** Returns a random value in the range [-currentBaseMs/2, currentBaseMs/2] */\n  private jitterDelayMs(): number {\n    return (Math.random() - 0.5) * this.currentBaseMs;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ResourcePath } from '../model/path';\nimport { fail, hardAssert } from '../util/assert';\n\n/**\n * Helpers for dealing with resource paths stored in IndexedDB.\n *\n * Resource paths in their canonical string form do not sort as the server\n * sorts them. Specifically the server splits paths into segments first and then\n * sorts, putting end-of-segment before any character. In a UTF-8 string\n * encoding the slash ('/') that denotes the end-of-segment naturally comes\n * after other characters so the intent here is to encode the path delimiters in\n * such a way that the resulting strings sort naturally.\n *\n * Resource paths are also used for prefix scans so it's important to\n * distinguish whole segments from any longer segments of which they might be a\n * prefix. For example, it's important to make it possible to scan documents in\n * a collection \"foo\" without encountering documents in a collection \"foobar\".\n *\n * Separate from the concerns about resource path ordering and separation,\n * On Android, SQLite imposes additional restrictions since it does not handle\n * keys with embedded NUL bytes particularly well. Rather than change the\n * implementation we keep the encoding identical to keep the ports similar.\n *\n * Taken together this means resource paths when encoded for storage in\n * IndexedDB have the following characteristics:\n *\n *   * Segment separators (\"/\") sort before everything else.\n *   * All paths have a trailing separator.\n *   * NUL bytes do not exist in the output, since IndexedDB doesn't treat them\n * well.\n *\n * Therefore resource paths are encoded into string form using the following\n * rules:\n *\n *   * '\\x01' is used as an escape character.\n *   * Path separators are encoded as \"\\x01\\x01\"\n *   * NUL bytes are encoded as \"\\x01\\x10\"\n *   * '\\x01' is encoded as \"\\x01\\x11\"\n *\n * This encoding leaves some room between path separators and the NUL byte\n * just in case we decide to support integer document ids after all.\n *\n * Note that characters treated specially by the backend ('.', '/', and '~')\n * are not treated specially here. This class assumes that any unescaping of\n * resource path strings into actual ResourcePath objects will handle these\n * characters there.\n */\nexport type EncodedResourcePath = string;\n\nconst escapeChar = '\\u0001';\nconst encodedSeparatorChar = '\\u0001';\nconst encodedNul = '\\u0010';\nconst encodedEscape = '\\u0011';\n\n/**\n * Encodes a resource path into a IndexedDb-compatible string form.\n */\nexport function encodeResourcePath(path: ResourcePath): EncodedResourcePath {\n  let result = '';\n  for (let i = 0; i < path.length; i++) {\n    if (result.length > 0) {\n      result = encodeSeparator(result);\n    }\n    result = encodeSegment(path.get(i), result);\n  }\n  return encodeSeparator(result);\n}\n\n/** Encodes a single segment of a resource path into the given result */\nfunction encodeSegment(segment: string, resultBuf: string): string {\n  let result = resultBuf;\n  const length = segment.length;\n  for (let i = 0; i < length; i++) {\n    const c = segment.charAt(i);\n    switch (c) {\n      case '\\0':\n        result += escapeChar + encodedNul;\n        break;\n      case escapeChar:\n        result += escapeChar + encodedEscape;\n        break;\n      default:\n        result += c;\n    }\n  }\n  return result;\n}\n\n/** Encodes a path separator into the given result */\nfunction encodeSeparator(result: string): string {\n  return result + escapeChar + encodedSeparatorChar;\n}\n\n/**\n * Decodes the given IndexedDb-compatible string form of a resource path into\n * a ResourcePath instance. Note that this method is not suitable for use with\n * decoding resource names from the server; those are One Platform format\n * strings.\n */\nexport function decodeResourcePath(path: EncodedResourcePath): ResourcePath {\n  // Event the empty path must encode as a path of at least length 2. A path\n  // with exactly 2 must be the empty path.\n  const length = path.length;\n  hardAssert(length >= 2, 'Invalid path ' + path);\n  if (length === 2) {\n    hardAssert(\n      path.charAt(0) === escapeChar && path.charAt(1) === encodedSeparatorChar,\n      'Non-empty path ' + path + ' had length 2'\n    );\n    return ResourcePath.EMPTY_PATH;\n  }\n\n  // Escape characters cannot exist past the second-to-last position in the\n  // source value.\n  const lastReasonableEscapeIndex = length - 2;\n\n  const segments: string[] = [];\n  let segmentBuilder = '';\n\n  for (let start = 0; start < length; ) {\n    // The last two characters of a valid encoded path must be a separator, so\n    // there must be an end to this segment.\n    const end = path.indexOf(escapeChar, start);\n    if (end < 0 || end > lastReasonableEscapeIndex) {\n      fail('Invalid encoded resource path: \"' + path + '\"');\n    }\n\n    const next = path.charAt(end + 1);\n    switch (next) {\n      case encodedSeparatorChar:\n        const currentPiece = path.substring(start, end);\n        let segment;\n        if (segmentBuilder.length === 0) {\n          // Avoid copying for the common case of a segment that excludes \\0\n          // and \\001\n          segment = currentPiece;\n        } else {\n          segmentBuilder += currentPiece;\n          segment = segmentBuilder;\n          segmentBuilder = '';\n        }\n        segments.push(segment);\n        break;\n      case encodedNul:\n        segmentBuilder += path.substring(start, end);\n        segmentBuilder += '\\0';\n        break;\n      case encodedEscape:\n        // The escape character can be used in the output to encode itself.\n        segmentBuilder += path.substring(start, end + 1);\n        break;\n      default:\n        fail('Invalid encoded resource path: \"' + path + '\"');\n    }\n\n    start = end + 2;\n  }\n\n  return new ResourcePath(segments);\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ResourcePath } from '../model/path';\nimport { debugAssert } from '../util/assert';\nimport { SortedSet } from '../util/sorted_set';\nimport { IndexManager } from './index_manager';\nimport { PersistenceTransaction } from './persistence';\nimport { PersistencePromise } from './persistence_promise';\n\n/**\n * An in-memory implementation of IndexManager.\n */\nexport class MemoryIndexManager implements IndexManager {\n  private collectionParentIndex = new MemoryCollectionParentIndex();\n\n  addToCollectionParentIndex(\n    transaction: PersistenceTransaction,\n    collectionPath: ResourcePath\n  ): PersistencePromise<void> {\n    this.collectionParentIndex.add(collectionPath);\n    return PersistencePromise.resolve();\n  }\n\n  getCollectionParents(\n    transaction: PersistenceTransaction,\n    collectionId: string\n  ): PersistencePromise<ResourcePath[]> {\n    return PersistencePromise.resolve(\n      this.collectionParentIndex.getEntries(collectionId)\n    );\n  }\n}\n\n/**\n * Internal implementation of the collection-parent index exposed by MemoryIndexManager.\n * Also used for in-memory caching by IndexedDbIndexManager and initial index population\n * in indexeddb_schema.ts\n */\nexport class MemoryCollectionParentIndex {\n  private index = {} as {\n    [collectionId: string]: SortedSet<ResourcePath>;\n  };\n\n  // Returns false if the entry already existed.\n  add(collectionPath: ResourcePath): boolean {\n    debugAssert(collectionPath.length % 2 === 1, 'Expected a collection path.');\n    const collectionId = collectionPath.lastSegment();\n    const parentPath = collectionPath.popLast();\n    const existingParents =\n      this.index[collectionId] ||\n      new SortedSet<ResourcePath>(ResourcePath.comparator);\n    const added = !existingParents.has(parentPath);\n    this.index[collectionId] = existingParents.add(parentPath);\n    return added;\n  }\n\n  has(collectionPath: ResourcePath): boolean {\n    const collectionId = collectionPath.lastSegment();\n    const parentPath = collectionPath.popLast();\n    const existingParents = this.index[collectionId];\n    return existingParents && existingParents.has(parentPath);\n  }\n\n  getEntries(collectionId: string): ResourcePath[] {\n    const parentPaths =\n      this.index[collectionId] ||\n      new SortedSet<ResourcePath>(ResourcePath.comparator);\n    return parentPaths.toArray();\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ResourcePath } from '../model/path';\nimport { debugAssert } from '../util/assert';\nimport { immediateSuccessor } from '../util/misc';\nimport {\n  decodeResourcePath,\n  encodeResourcePath\n} from './encoded_resource_path';\nimport { IndexManager } from './index_manager';\nimport { IndexedDbPersistence } from './indexeddb_persistence';\nimport { DbCollectionParent, DbCollectionParentKey } from './indexeddb_schema';\nimport { MemoryCollectionParentIndex } from './memory_index_manager';\nimport { PersistenceTransaction } from './persistence';\nimport { PersistencePromise } from './persistence_promise';\nimport { SimpleDbStore } from './simple_db';\n\n/**\n * A persisted implementation of IndexManager.\n */\nexport class IndexedDbIndexManager implements IndexManager {\n  /**\n   * An in-memory copy of the index entries we've already written since the SDK\n   * launched. Used to avoid re-writing the same entry repeatedly.\n   *\n   * This is *NOT* a complete cache of what's in persistence and so can never be used to\n   * satisfy reads.\n   */\n  private collectionParentsCache = new MemoryCollectionParentIndex();\n\n  /**\n   * Adds a new entry to the collection parent index.\n   *\n   * Repeated calls for the same collectionPath should be avoided within a\n   * transaction as IndexedDbIndexManager only caches writes once a transaction\n   * has been committed.\n   */\n  addToCollectionParentIndex(\n    transaction: PersistenceTransaction,\n    collectionPath: ResourcePath\n  ): PersistencePromise<void> {\n    debugAssert(collectionPath.length % 2 === 1, 'Expected a collection path.');\n    if (!this.collectionParentsCache.has(collectionPath)) {\n      const collectionId = collectionPath.lastSegment();\n      const parentPath = collectionPath.popLast();\n\n      transaction.addOnCommittedListener(() => {\n        // Add the collection to the in memory cache only if the transaction was\n        // successfully committed.\n        this.collectionParentsCache.add(collectionPath);\n      });\n\n      const collectionParent: DbCollectionParent = {\n        collectionId,\n        parent: encodeResourcePath(parentPath)\n      };\n      return collectionParentsStore(transaction).put(collectionParent);\n    }\n    return PersistencePromise.resolve();\n  }\n\n  getCollectionParents(\n    transaction: PersistenceTransaction,\n    collectionId: string\n  ): PersistencePromise<ResourcePath[]> {\n    const parentPaths = [] as ResourcePath[];\n    const range = IDBKeyRange.bound(\n      [collectionId, ''],\n      [immediateSuccessor(collectionId), ''],\n      /*lowerOpen=*/ false,\n      /*upperOpen=*/ true\n    );\n    return collectionParentsStore(transaction)\n      .loadAll(range)\n      .next(entries => {\n        for (const entry of entries) {\n          // This collectionId guard shouldn't be necessary (and isn't as long\n          // as we're running in a real browser), but there's a bug in\n          // indexeddbshim that breaks our range in our tests running in node:\n          // https://github.com/axemclion/IndexedDBShim/issues/334\n          if (entry.collectionId !== collectionId) {\n            break;\n          }\n          parentPaths.push(decodeResourcePath(entry.parent));\n        }\n        return parentPaths;\n      });\n  }\n}\n\n/**\n * Helper to get a typed SimpleDbStore for the collectionParents\n * document store.\n */\nfunction collectionParentsStore(\n  txn: PersistenceTransaction\n): SimpleDbStore<DbCollectionParentKey, DbCollectionParent> {\n  return IndexedDbPersistence.getStore<\n    DbCollectionParentKey,\n    DbCollectionParent\n  >(txn, DbCollectionParent.store);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Query } from '../core/query';\nimport {\n  DocumentKeySet,\n  DocumentMap,\n  documentMap,\n  DocumentSizeEntries,\n  DocumentSizeEntry,\n  MaybeDocumentMap,\n  maybeDocumentMap,\n  nullableMaybeDocumentMap,\n  NullableMaybeDocumentMap\n} from '../model/collections';\nimport { Document, MaybeDocument, NoDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { ResourcePath } from '../model/path';\nimport { primitiveComparator } from '../util/misc';\nimport { SortedMap } from '../util/sorted_map';\nimport { SortedSet } from '../util/sorted_set';\n\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { debugAssert, fail, hardAssert } from '../util/assert';\nimport { IndexManager } from './index_manager';\nimport { IndexedDbPersistence } from './indexeddb_persistence';\nimport {\n  DbRemoteDocument,\n  DbRemoteDocumentGlobal,\n  DbRemoteDocumentGlobalKey,\n  DbRemoteDocumentKey\n} from './indexeddb_schema';\nimport { LocalSerializer } from './local_serializer';\nimport { PersistenceTransaction } from './persistence';\nimport { PersistencePromise } from './persistence_promise';\nimport { RemoteDocumentCache } from './remote_document_cache';\nimport { RemoteDocumentChangeBuffer } from './remote_document_change_buffer';\nimport { IterateOptions, SimpleDbStore } from './simple_db';\nimport { ObjectMap } from '../util/obj_map';\n\nexport class IndexedDbRemoteDocumentCache implements RemoteDocumentCache {\n  /**\n   * @param {LocalSerializer} serializer The document serializer.\n   * @param {IndexManager} indexManager The query indexes that need to be maintained.\n   */\n  constructor(\n    readonly serializer: LocalSerializer,\n    private readonly indexManager: IndexManager\n  ) {}\n\n  /**\n   * Adds the supplied entries to the cache.\n   *\n   * All calls of `addEntry` are required to go through the RemoteDocumentChangeBuffer\n   * returned by `newChangeBuffer()` to ensure proper accounting of metadata.\n   */\n  private addEntry(\n    transaction: PersistenceTransaction,\n    key: DocumentKey,\n    doc: DbRemoteDocument\n  ): PersistencePromise<void> {\n    const documentStore = remoteDocumentsStore(transaction);\n    return documentStore.put(dbKey(key), doc);\n  }\n\n  /**\n   * Removes a document from the cache.\n   *\n   * All calls of `removeEntry`  are required to go through the RemoteDocumentChangeBuffer\n   * returned by `newChangeBuffer()` to ensure proper accounting of metadata.\n   */\n  private removeEntry(\n    transaction: PersistenceTransaction,\n    documentKey: DocumentKey\n  ): PersistencePromise<void> {\n    const store = remoteDocumentsStore(transaction);\n    const key = dbKey(documentKey);\n    return store.delete(key);\n  }\n\n  /**\n   * Updates the current cache size.\n   *\n   * Callers to `addEntry()` and `removeEntry()` *must* call this afterwards to update the\n   * cache's metadata.\n   */\n  private updateMetadata(\n    transaction: PersistenceTransaction,\n    sizeDelta: number\n  ): PersistencePromise<void> {\n    return this.getMetadata(transaction).next(metadata => {\n      metadata.byteSize += sizeDelta;\n      return this.setMetadata(transaction, metadata);\n    });\n  }\n\n  getEntry(\n    transaction: PersistenceTransaction,\n    documentKey: DocumentKey\n  ): PersistencePromise<MaybeDocument | null> {\n    return remoteDocumentsStore(transaction)\n      .get(dbKey(documentKey))\n      .next(dbRemoteDoc => {\n        return this.maybeDecodeDocument(dbRemoteDoc);\n      });\n  }\n\n  /**\n   * Looks up an entry in the cache.\n   *\n   * @param documentKey The key of the entry to look up.\n   * @return The cached MaybeDocument entry and its size, or null if we have nothing cached.\n   */\n  getSizedEntry(\n    transaction: PersistenceTransaction,\n    documentKey: DocumentKey\n  ): PersistencePromise<DocumentSizeEntry | null> {\n    return remoteDocumentsStore(transaction)\n      .get(dbKey(documentKey))\n      .next(dbRemoteDoc => {\n        const doc = this.maybeDecodeDocument(dbRemoteDoc);\n        return doc\n          ? {\n              maybeDocument: doc,\n              size: dbDocumentSize(dbRemoteDoc!)\n            }\n          : null;\n      });\n  }\n\n  getEntries(\n    transaction: PersistenceTransaction,\n    documentKeys: DocumentKeySet\n  ): PersistencePromise<NullableMaybeDocumentMap> {\n    let results = nullableMaybeDocumentMap();\n    return this.forEachDbEntry(\n      transaction,\n      documentKeys,\n      (key, dbRemoteDoc) => {\n        const doc = this.maybeDecodeDocument(dbRemoteDoc);\n        results = results.insert(key, doc);\n      }\n    ).next(() => results);\n  }\n\n  /**\n   * Looks up several entries in the cache.\n   *\n   * @param documentKeys The set of keys entries to look up.\n   * @return A map of MaybeDocuments indexed by key (if a document cannot be\n   *     found, the key will be mapped to null) and a map of sizes indexed by\n   *     key (zero if the key cannot be found).\n   */\n  getSizedEntries(\n    transaction: PersistenceTransaction,\n    documentKeys: DocumentKeySet\n  ): PersistencePromise<DocumentSizeEntries> {\n    let results = nullableMaybeDocumentMap();\n    let sizeMap = new SortedMap<DocumentKey, number>(DocumentKey.comparator);\n    return this.forEachDbEntry(\n      transaction,\n      documentKeys,\n      (key, dbRemoteDoc) => {\n        const doc = this.maybeDecodeDocument(dbRemoteDoc);\n        if (doc) {\n          results = results.insert(key, doc);\n          sizeMap = sizeMap.insert(key, dbDocumentSize(dbRemoteDoc!));\n        } else {\n          results = results.insert(key, null);\n          sizeMap = sizeMap.insert(key, 0);\n        }\n      }\n    ).next(() => {\n      return { maybeDocuments: results, sizeMap };\n    });\n  }\n\n  private forEachDbEntry(\n    transaction: PersistenceTransaction,\n    documentKeys: DocumentKeySet,\n    callback: (key: DocumentKey, doc: DbRemoteDocument | null) => void\n  ): PersistencePromise<void> {\n    if (documentKeys.isEmpty()) {\n      return PersistencePromise.resolve();\n    }\n\n    const range = IDBKeyRange.bound(\n      documentKeys.first()!.path.toArray(),\n      documentKeys.last()!.path.toArray()\n    );\n    const keyIter = documentKeys.getIterator();\n    let nextKey: DocumentKey | null = keyIter.getNext();\n\n    return remoteDocumentsStore(transaction)\n      .iterate({ range }, (potentialKeyRaw, dbRemoteDoc, control) => {\n        const potentialKey = DocumentKey.fromSegments(potentialKeyRaw);\n\n        // Go through keys not found in cache.\n        while (nextKey && DocumentKey.comparator(nextKey!, potentialKey) < 0) {\n          callback(nextKey!, null);\n          nextKey = keyIter.getNext();\n        }\n\n        if (nextKey && nextKey!.isEqual(potentialKey)) {\n          // Key found in cache.\n          callback(nextKey!, dbRemoteDoc);\n          nextKey = keyIter.hasNext() ? keyIter.getNext() : null;\n        }\n\n        // Skip to the next key (if there is one).\n        if (nextKey) {\n          control.skip(nextKey!.path.toArray());\n        } else {\n          control.done();\n        }\n      })\n      .next(() => {\n        // The rest of the keys are not in the cache. One case where `iterate`\n        // above won't go through them is when the cache is empty.\n        while (nextKey) {\n          callback(nextKey!, null);\n          nextKey = keyIter.hasNext() ? keyIter.getNext() : null;\n        }\n      });\n  }\n\n  getDocumentsMatchingQuery(\n    transaction: PersistenceTransaction,\n    query: Query,\n    sinceReadTime: SnapshotVersion\n  ): PersistencePromise<DocumentMap> {\n    debugAssert(\n      !query.isCollectionGroupQuery(),\n      'CollectionGroup queries should be handled in LocalDocumentsView'\n    );\n    let results = documentMap();\n\n    const immediateChildrenPathLength = query.path.length + 1;\n\n    const iterationOptions: IterateOptions = {};\n    if (sinceReadTime.isEqual(SnapshotVersion.min())) {\n      // Documents are ordered by key, so we can use a prefix scan to narrow\n      // down the documents we need to match the query against.\n      const startKey = query.path.toArray();\n      iterationOptions.range = IDBKeyRange.lowerBound(startKey);\n    } else {\n      // Execute an index-free query and filter by read time. This is safe\n      // since all document changes to queries that have a\n      // lastLimboFreeSnapshotVersion (`sinceReadTime`) have a read time set.\n      const collectionKey = query.path.toArray();\n      const readTimeKey = this.serializer.toDbTimestampKey(sinceReadTime);\n      iterationOptions.range = IDBKeyRange.lowerBound(\n        [collectionKey, readTimeKey],\n        /* open= */ true\n      );\n      iterationOptions.index = DbRemoteDocument.collectionReadTimeIndex;\n    }\n\n    return remoteDocumentsStore(transaction)\n      .iterate(iterationOptions, (key, dbRemoteDoc, control) => {\n        // The query is actually returning any path that starts with the query\n        // path prefix which may include documents in subcollections. For\n        // example, a query on 'rooms' will return rooms/abc/messages/xyx but we\n        // shouldn't match it. Fix this by discarding rows with document keys\n        // more than one segment longer than the query path.\n        if (key.length !== immediateChildrenPathLength) {\n          return;\n        }\n\n        const maybeDoc = this.serializer.fromDbRemoteDocument(dbRemoteDoc);\n        if (!query.path.isPrefixOf(maybeDoc.key.path)) {\n          control.done();\n        } else if (maybeDoc instanceof Document && query.matches(maybeDoc)) {\n          results = results.insert(maybeDoc.key, maybeDoc);\n        }\n      })\n      .next(() => results);\n  }\n\n  /**\n   * Returns the set of documents that have changed since the specified read\n   * time.\n   */\n  // PORTING NOTE: This is only used for multi-tab synchronization.\n  getNewDocumentChanges(\n    transaction: PersistenceTransaction,\n    sinceReadTime: SnapshotVersion\n  ): PersistencePromise<{\n    changedDocs: MaybeDocumentMap;\n    readTime: SnapshotVersion;\n  }> {\n    let changedDocs = maybeDocumentMap();\n\n    let lastReadTime = this.serializer.toDbTimestampKey(sinceReadTime);\n\n    const documentsStore = remoteDocumentsStore(transaction);\n    const range = IDBKeyRange.lowerBound(lastReadTime, true);\n    return documentsStore\n      .iterate(\n        { index: DbRemoteDocument.readTimeIndex, range },\n        (_, dbRemoteDoc) => {\n          // Unlike `getEntry()` and others, `getNewDocumentChanges()` parses\n          // the documents directly since we want to keep sentinel deletes.\n          const doc = this.serializer.fromDbRemoteDocument(dbRemoteDoc);\n          changedDocs = changedDocs.insert(doc.key, doc);\n          lastReadTime = dbRemoteDoc.readTime!;\n        }\n      )\n      .next(() => {\n        return {\n          changedDocs,\n          readTime: this.serializer.fromDbTimestampKey(lastReadTime)\n        };\n      });\n  }\n\n  /**\n   * Returns the read time of the most recently read document in the cache, or\n   * SnapshotVersion.min() if not available.\n   */\n  // PORTING NOTE: This is only used for multi-tab synchronization.\n  getLastReadTime(\n    transaction: PersistenceTransaction\n  ): PersistencePromise<SnapshotVersion> {\n    const documentsStore = remoteDocumentsStore(transaction);\n\n    // If there are no existing entries, we return SnapshotVersion.min().\n    let readTime = SnapshotVersion.min();\n\n    return documentsStore\n      .iterate(\n        { index: DbRemoteDocument.readTimeIndex, reverse: true },\n        (key, dbRemoteDoc, control) => {\n          if (dbRemoteDoc.readTime) {\n            readTime = this.serializer.fromDbTimestampKey(dbRemoteDoc.readTime);\n          }\n          control.done();\n        }\n      )\n      .next(() => readTime);\n  }\n\n  newChangeBuffer(options?: {\n    trackRemovals: boolean;\n  }): RemoteDocumentChangeBuffer {\n    return new IndexedDbRemoteDocumentCache.RemoteDocumentChangeBuffer(\n      this,\n      !!options && options.trackRemovals\n    );\n  }\n\n  getSize(txn: PersistenceTransaction): PersistencePromise<number> {\n    return this.getMetadata(txn).next(metadata => metadata.byteSize);\n  }\n\n  private getMetadata(\n    txn: PersistenceTransaction\n  ): PersistencePromise<DbRemoteDocumentGlobal> {\n    return documentGlobalStore(txn)\n      .get(DbRemoteDocumentGlobal.key)\n      .next(metadata => {\n        hardAssert(!!metadata, 'Missing document cache metadata');\n        return metadata!;\n      });\n  }\n\n  private setMetadata(\n    txn: PersistenceTransaction,\n    metadata: DbRemoteDocumentGlobal\n  ): PersistencePromise<void> {\n    return documentGlobalStore(txn).put(DbRemoteDocumentGlobal.key, metadata);\n  }\n\n  /**\n   * Decodes `remoteDoc` and returns the document (or null, if the document\n   * corresponds to the format used for sentinel deletes).\n   */\n  private maybeDecodeDocument(\n    dbRemoteDoc: DbRemoteDocument | null\n  ): MaybeDocument | null {\n    if (dbRemoteDoc) {\n      const doc = this.serializer.fromDbRemoteDocument(dbRemoteDoc);\n      if (\n        doc instanceof NoDocument &&\n        doc.version.isEqual(SnapshotVersion.min())\n      ) {\n        // The document is a sentinel removal and should only be used in the\n        // `getNewDocumentChanges()`.\n        return null;\n      }\n\n      return doc;\n    }\n    return null;\n  }\n\n  /**\n   * Handles the details of adding and updating documents in the IndexedDbRemoteDocumentCache.\n   *\n   * Unlike the MemoryRemoteDocumentChangeBuffer, the IndexedDb implementation computes the size\n   * delta for all submitted changes. This avoids having to re-read all documents from IndexedDb\n   * when we apply the changes.\n   */\n  private static RemoteDocumentChangeBuffer = class extends RemoteDocumentChangeBuffer {\n    // A map of document sizes prior to applying the changes in this buffer.\n    protected documentSizes: ObjectMap<\n      DocumentKey,\n      number\n    > = new ObjectMap(key => key.toString());\n\n    /**\n     * @param documentCache The IndexedDbRemoteDocumentCache to apply the changes to.\n     * @param trackRemovals Whether to create sentinel deletes that can be tracked by\n     * `getNewDocumentChanges()`.\n     */\n    constructor(\n      private readonly documentCache: IndexedDbRemoteDocumentCache,\n      private readonly trackRemovals: boolean\n    ) {\n      super();\n    }\n\n    protected applyChanges(\n      transaction: PersistenceTransaction\n    ): PersistencePromise<void> {\n      const promises: Array<PersistencePromise<void>> = [];\n\n      let sizeDelta = 0;\n\n      let collectionParents = new SortedSet<ResourcePath>((l, r) =>\n        primitiveComparator(l.canonicalString(), r.canonicalString())\n      );\n\n      this.changes.forEach((key, maybeDocument) => {\n        const previousSize = this.documentSizes.get(key);\n        debugAssert(\n          previousSize !== undefined,\n          `Cannot modify a document that wasn't read (for ${key})`\n        );\n        if (maybeDocument) {\n          debugAssert(\n            !this.readTime.isEqual(SnapshotVersion.min()),\n            'Cannot add a document with a read time of zero'\n          );\n          const doc = this.documentCache.serializer.toDbRemoteDocument(\n            maybeDocument,\n            this.readTime\n          );\n          collectionParents = collectionParents.add(key.path.popLast());\n\n          const size = dbDocumentSize(doc);\n          sizeDelta += size - previousSize!;\n          promises.push(this.documentCache.addEntry(transaction, key, doc));\n        } else {\n          sizeDelta -= previousSize!;\n          if (this.trackRemovals) {\n            // In order to track removals, we store a \"sentinel delete\" in the\n            // RemoteDocumentCache. This entry is represented by a NoDocument\n            // with a version of 0 and ignored by `maybeDecodeDocument()` but\n            // preserved in `getNewDocumentChanges()`.\n            const deletedDoc = this.documentCache.serializer.toDbRemoteDocument(\n              new NoDocument(key, SnapshotVersion.min()),\n              this.readTime\n            );\n            promises.push(\n              this.documentCache.addEntry(transaction, key, deletedDoc)\n            );\n          } else {\n            promises.push(this.documentCache.removeEntry(transaction, key));\n          }\n        }\n      });\n\n      collectionParents.forEach(parent => {\n        promises.push(\n          this.documentCache.indexManager.addToCollectionParentIndex(\n            transaction,\n            parent\n          )\n        );\n      });\n\n      promises.push(this.documentCache.updateMetadata(transaction, sizeDelta));\n\n      return PersistencePromise.waitFor(promises);\n    }\n\n    protected getFromCache(\n      transaction: PersistenceTransaction,\n      documentKey: DocumentKey\n    ): PersistencePromise<MaybeDocument | null> {\n      // Record the size of everything we load from the cache so we can compute a delta later.\n      return this.documentCache\n        .getSizedEntry(transaction, documentKey)\n        .next(getResult => {\n          if (getResult === null) {\n            this.documentSizes.set(documentKey, 0);\n            return null;\n          } else {\n            this.documentSizes.set(documentKey, getResult.size);\n            return getResult.maybeDocument;\n          }\n        });\n    }\n\n    protected getAllFromCache(\n      transaction: PersistenceTransaction,\n      documentKeys: DocumentKeySet\n    ): PersistencePromise<NullableMaybeDocumentMap> {\n      // Record the size of everything we load from the cache so we can compute\n      // a delta later.\n      return this.documentCache\n        .getSizedEntries(transaction, documentKeys)\n        .next(({ maybeDocuments, sizeMap }) => {\n          // Note: `getAllFromCache` returns two maps instead of a single map from\n          // keys to `DocumentSizeEntry`s. This is to allow returning the\n          // `NullableMaybeDocumentMap` directly, without a conversion.\n          sizeMap.forEach((documentKey, size) => {\n            this.documentSizes.set(documentKey, size);\n          });\n          return maybeDocuments;\n        });\n    }\n  };\n}\n\nfunction documentGlobalStore(\n  txn: PersistenceTransaction\n): SimpleDbStore<DbRemoteDocumentGlobalKey, DbRemoteDocumentGlobal> {\n  return IndexedDbPersistence.getStore<\n    DbRemoteDocumentGlobalKey,\n    DbRemoteDocumentGlobal\n  >(txn, DbRemoteDocumentGlobal.store);\n}\n\n/**\n * Helper to get a typed SimpleDbStore for the remoteDocuments object store.\n */\nfunction remoteDocumentsStore(\n  txn: PersistenceTransaction\n): SimpleDbStore<DbRemoteDocumentKey, DbRemoteDocument> {\n  return IndexedDbPersistence.getStore<DbRemoteDocumentKey, DbRemoteDocument>(\n    txn,\n    DbRemoteDocument.store\n  );\n}\n\nfunction dbKey(docKey: DocumentKey): DbRemoteDocumentKey {\n  return docKey.path.toArray();\n}\n\n/**\n * Retrusn an approximate size for the given document.\n */\nexport function dbDocumentSize(doc: DbRemoteDocument): number {\n  let value: unknown;\n  if (doc.document) {\n    value = doc.document;\n  } else if (doc.unknownDocument) {\n    value = doc.unknownDocument;\n  } else if (doc.noDocument) {\n    value = doc.noDocument;\n  } else {\n    throw fail('Unknown remote document type');\n  }\n  return JSON.stringify(value).length;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { TargetId } from './types';\n\n/** Offset to ensure non-overlapping target ids. */\nconst OFFSET = 2;\n\n/**\n * Generates monotonically increasing target IDs for sending targets to the\n * watch stream.\n *\n * The client constructs two generators, one for the target cache, and one for\n * for the sync engine (to generate limbo documents targets). These\n * generators produce non-overlapping IDs (by using even and odd IDs\n * respectively).\n *\n * By separating the target ID space, the query cache can generate target IDs\n * that persist across client restarts, while sync engine can independently\n * generate in-memory target IDs that are transient and can be reused after a\n * restart.\n */\nexport class TargetIdGenerator {\n  constructor(private lastId: number) {}\n\n  next(): TargetId {\n    this.lastId += OFFSET;\n    return this.lastId;\n  }\n\n  static forTargetCache(): TargetIdGenerator {\n    // The target cache generator must return '2' in its first call to `next()`\n    // as there is no differentiation in the protocol layer between an unset\n    // number and the number '0'. If we were to sent a target with target ID\n    // '0', the backend would consider it unset and replace it with its own ID.\n    return new TargetIdGenerator(2 - OFFSET);\n  }\n\n  static forSyncEngine(): TargetIdGenerator {\n    // Sync engine assigns target IDs for limbo document detection.\n    return new TargetIdGenerator(1 - OFFSET);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Timestamp } from '../api/timestamp';\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { ListenSequenceNumber, TargetId } from '../core/types';\nimport { DocumentKeySet, documentKeySet } from '../model/collections';\nimport { DocumentKey } from '../model/document_key';\nimport { hardAssert } from '../util/assert';\nimport { immediateSuccessor } from '../util/misc';\nimport { TargetIdGenerator } from '../core/target_id_generator';\nimport {\n  decodeResourcePath,\n  encodeResourcePath\n} from './encoded_resource_path';\nimport {\n  IndexedDbLruDelegate,\n  IndexedDbPersistence\n} from './indexeddb_persistence';\nimport {\n  DbTarget,\n  DbTargetDocument,\n  DbTargetDocumentKey,\n  DbTargetGlobal,\n  DbTargetGlobalKey,\n  DbTargetKey\n} from './indexeddb_schema';\nimport { LocalSerializer } from './local_serializer';\nimport { ActiveTargets } from './lru_garbage_collector';\nimport { PersistenceTransaction } from './persistence';\nimport { PersistencePromise } from './persistence_promise';\nimport { TargetCache } from './target_cache';\nimport { TargetData } from './target_data';\nimport { SimpleDbStore } from './simple_db';\nimport { Target } from '../core/target';\n\nexport class IndexedDbTargetCache implements TargetCache {\n  constructor(\n    private readonly referenceDelegate: IndexedDbLruDelegate,\n    private serializer: LocalSerializer\n  ) {}\n\n  // PORTING NOTE: We don't cache global metadata for the target cache, since\n  // some of it (in particular `highestTargetId`) can be modified by secondary\n  // tabs. We could perhaps be more granular (and e.g. still cache\n  // `lastRemoteSnapshotVersion` in memory) but for simplicity we currently go\n  // to IndexedDb whenever we need to read metadata. We can revisit if it turns\n  // out to have a meaningful performance impact.\n\n  allocateTargetId(\n    transaction: PersistenceTransaction\n  ): PersistencePromise<TargetId> {\n    return this.retrieveMetadata(transaction).next(metadata => {\n      const targetIdGenerator = new TargetIdGenerator(metadata.highestTargetId);\n      metadata.highestTargetId = targetIdGenerator.next();\n      return this.saveMetadata(transaction, metadata).next(\n        () => metadata.highestTargetId\n      );\n    });\n  }\n\n  getLastRemoteSnapshotVersion(\n    transaction: PersistenceTransaction\n  ): PersistencePromise<SnapshotVersion> {\n    return this.retrieveMetadata(transaction).next(metadata => {\n      return SnapshotVersion.fromTimestamp(\n        new Timestamp(\n          metadata.lastRemoteSnapshotVersion.seconds,\n          metadata.lastRemoteSnapshotVersion.nanoseconds\n        )\n      );\n    });\n  }\n\n  getHighestSequenceNumber(\n    transaction: PersistenceTransaction\n  ): PersistencePromise<ListenSequenceNumber> {\n    return this.retrieveMetadata(transaction).next(\n      targetGlobal => targetGlobal.highestListenSequenceNumber\n    );\n  }\n\n  setTargetsMetadata(\n    transaction: PersistenceTransaction,\n    highestListenSequenceNumber: number,\n    lastRemoteSnapshotVersion?: SnapshotVersion\n  ): PersistencePromise<void> {\n    return this.retrieveMetadata(transaction).next(metadata => {\n      metadata.highestListenSequenceNumber = highestListenSequenceNumber;\n      if (lastRemoteSnapshotVersion) {\n        metadata.lastRemoteSnapshotVersion = lastRemoteSnapshotVersion.toTimestamp();\n      }\n      if (highestListenSequenceNumber > metadata.highestListenSequenceNumber) {\n        metadata.highestListenSequenceNumber = highestListenSequenceNumber;\n      }\n      return this.saveMetadata(transaction, metadata);\n    });\n  }\n\n  addTargetData(\n    transaction: PersistenceTransaction,\n    targetData: TargetData\n  ): PersistencePromise<void> {\n    return this.saveTargetData(transaction, targetData).next(() => {\n      return this.retrieveMetadata(transaction).next(metadata => {\n        metadata.targetCount += 1;\n        this.updateMetadataFromTargetData(targetData, metadata);\n        return this.saveMetadata(transaction, metadata);\n      });\n    });\n  }\n\n  updateTargetData(\n    transaction: PersistenceTransaction,\n    targetData: TargetData\n  ): PersistencePromise<void> {\n    return this.saveTargetData(transaction, targetData);\n  }\n\n  removeTargetData(\n    transaction: PersistenceTransaction,\n    targetData: TargetData\n  ): PersistencePromise<void> {\n    return this.removeMatchingKeysForTargetId(transaction, targetData.targetId)\n      .next(() => targetsStore(transaction).delete(targetData.targetId))\n      .next(() => this.retrieveMetadata(transaction))\n      .next(metadata => {\n        hardAssert(\n          metadata.targetCount > 0,\n          'Removing from an empty target cache'\n        );\n        metadata.targetCount -= 1;\n        return this.saveMetadata(transaction, metadata);\n      });\n  }\n\n  /**\n   * Drops any targets with sequence number less than or equal to the upper bound, excepting those\n   * present in `activeTargetIds`. Document associations for the removed targets are also removed.\n   * Returns the number of targets removed.\n   */\n  removeTargets(\n    txn: PersistenceTransaction,\n    upperBound: ListenSequenceNumber,\n    activeTargetIds: ActiveTargets\n  ): PersistencePromise<number> {\n    let count = 0;\n    const promises: Array<PersistencePromise<void>> = [];\n    return targetsStore(txn)\n      .iterate((key, value) => {\n        const targetData = this.serializer.fromDbTarget(value);\n        if (\n          targetData.sequenceNumber <= upperBound &&\n          activeTargetIds.get(targetData.targetId) === null\n        ) {\n          count++;\n          promises.push(this.removeTargetData(txn, targetData));\n        }\n      })\n      .next(() => PersistencePromise.waitFor(promises))\n      .next(() => count);\n  }\n\n  /**\n   * Call provided function with each `TargetData` that we have cached.\n   */\n  forEachTarget(\n    txn: PersistenceTransaction,\n    f: (q: TargetData) => void\n  ): PersistencePromise<void> {\n    return targetsStore(txn).iterate((key, value) => {\n      const targetData = this.serializer.fromDbTarget(value);\n      f(targetData);\n    });\n  }\n\n  private retrieveMetadata(\n    transaction: PersistenceTransaction\n  ): PersistencePromise<DbTargetGlobal> {\n    return globalTargetStore(transaction)\n      .get(DbTargetGlobal.key)\n      .next(metadata => {\n        hardAssert(metadata !== null, 'Missing metadata row.');\n        return metadata;\n      });\n  }\n\n  private saveMetadata(\n    transaction: PersistenceTransaction,\n    metadata: DbTargetGlobal\n  ): PersistencePromise<void> {\n    return globalTargetStore(transaction).put(DbTargetGlobal.key, metadata);\n  }\n\n  private saveTargetData(\n    transaction: PersistenceTransaction,\n    targetData: TargetData\n  ): PersistencePromise<void> {\n    return targetsStore(transaction).put(\n      this.serializer.toDbTarget(targetData)\n    );\n  }\n\n  /**\n   * In-place updates the provided metadata to account for values in the given\n   * TargetData. Saving is done separately. Returns true if there were any\n   * changes to the metadata.\n   */\n  private updateMetadataFromTargetData(\n    targetData: TargetData,\n    metadata: DbTargetGlobal\n  ): boolean {\n    let updated = false;\n    if (targetData.targetId > metadata.highestTargetId) {\n      metadata.highestTargetId = targetData.targetId;\n      updated = true;\n    }\n\n    if (targetData.sequenceNumber > metadata.highestListenSequenceNumber) {\n      metadata.highestListenSequenceNumber = targetData.sequenceNumber;\n      updated = true;\n    }\n    return updated;\n  }\n\n  getTargetCount(\n    transaction: PersistenceTransaction\n  ): PersistencePromise<number> {\n    return this.retrieveMetadata(transaction).next(\n      metadata => metadata.targetCount\n    );\n  }\n\n  getTargetData(\n    transaction: PersistenceTransaction,\n    target: Target\n  ): PersistencePromise<TargetData | null> {\n    // Iterating by the canonicalId may yield more than one result because\n    // canonicalId values are not required to be unique per target. This query\n    // depends on the queryTargets index to be efficient.\n    const canonicalId = target.canonicalId();\n    const range = IDBKeyRange.bound(\n      [canonicalId, Number.NEGATIVE_INFINITY],\n      [canonicalId, Number.POSITIVE_INFINITY]\n    );\n    let result: TargetData | null = null;\n    return targetsStore(transaction)\n      .iterate(\n        { range, index: DbTarget.queryTargetsIndexName },\n        (key, value, control) => {\n          const found = this.serializer.fromDbTarget(value);\n          // After finding a potential match, check that the target is\n          // actually equal to the requested target.\n          if (target.isEqual(found.target)) {\n            result = found;\n            control.done();\n          }\n        }\n      )\n      .next(() => result);\n  }\n\n  addMatchingKeys(\n    txn: PersistenceTransaction,\n    keys: DocumentKeySet,\n    targetId: TargetId\n  ): PersistencePromise<void> {\n    // PORTING NOTE: The reverse index (documentsTargets) is maintained by\n    // IndexedDb.\n    const promises: Array<PersistencePromise<void>> = [];\n    const store = documentTargetStore(txn);\n    keys.forEach(key => {\n      const path = encodeResourcePath(key.path);\n      promises.push(store.put(new DbTargetDocument(targetId, path)));\n      promises.push(this.referenceDelegate.addReference(txn, targetId, key));\n    });\n    return PersistencePromise.waitFor(promises);\n  }\n\n  removeMatchingKeys(\n    txn: PersistenceTransaction,\n    keys: DocumentKeySet,\n    targetId: TargetId\n  ): PersistencePromise<void> {\n    // PORTING NOTE: The reverse index (documentsTargets) is maintained by\n    // IndexedDb.\n    const store = documentTargetStore(txn);\n    return PersistencePromise.forEach(keys, (key: DocumentKey) => {\n      const path = encodeResourcePath(key.path);\n      return PersistencePromise.waitFor([\n        store.delete([targetId, path]),\n        this.referenceDelegate.removeReference(txn, targetId, key)\n      ]);\n    });\n  }\n\n  removeMatchingKeysForTargetId(\n    txn: PersistenceTransaction,\n    targetId: TargetId\n  ): PersistencePromise<void> {\n    const store = documentTargetStore(txn);\n    const range = IDBKeyRange.bound(\n      [targetId],\n      [targetId + 1],\n      /*lowerOpen=*/ false,\n      /*upperOpen=*/ true\n    );\n    return store.delete(range);\n  }\n\n  getMatchingKeysForTargetId(\n    txn: PersistenceTransaction,\n    targetId: TargetId\n  ): PersistencePromise<DocumentKeySet> {\n    const range = IDBKeyRange.bound(\n      [targetId],\n      [targetId + 1],\n      /*lowerOpen=*/ false,\n      /*upperOpen=*/ true\n    );\n    const store = documentTargetStore(txn);\n    let result = documentKeySet();\n\n    return store\n      .iterate({ range, keysOnly: true }, (key, _, control) => {\n        const path = decodeResourcePath(key[1]);\n        const docKey = new DocumentKey(path);\n        result = result.add(docKey);\n      })\n      .next(() => result);\n  }\n\n  containsKey(\n    txn: PersistenceTransaction,\n    key: DocumentKey\n  ): PersistencePromise<boolean> {\n    const path = encodeResourcePath(key.path);\n    const range = IDBKeyRange.bound(\n      [path],\n      [immediateSuccessor(path)],\n      /*lowerOpen=*/ false,\n      /*upperOpen=*/ true\n    );\n    let count = 0;\n    return documentTargetStore(txn!)\n      .iterate(\n        {\n          index: DbTargetDocument.documentTargetsIndex,\n          keysOnly: true,\n          range\n        },\n        ([targetId, path], _, control) => {\n          // Having a sentinel row for a document does not count as containing that document;\n          // For the target cache, containing the document means the document is part of some\n          // target.\n          if (targetId !== 0) {\n            count++;\n            control.done();\n          }\n        }\n      )\n      .next(() => count > 0);\n  }\n\n  /**\n   * Looks up a TargetData entry by target ID.\n   *\n   * @param targetId The target ID of the TargetData entry to look up.\n   * @return The cached TargetData entry, or null if the cache has no entry for\n   * the target.\n   */\n  // PORTING NOTE: Multi-tab only.\n  getTargetDataForTarget(\n    transaction: PersistenceTransaction,\n    targetId: TargetId\n  ): PersistencePromise<TargetData | null> {\n    return targetsStore(transaction)\n      .get(targetId)\n      .next(found => {\n        if (found) {\n          return this.serializer.fromDbTarget(found);\n        } else {\n          return null;\n        }\n      });\n  }\n}\n\n/**\n * Helper to get a typed SimpleDbStore for the queries object store.\n */\nfunction targetsStore(\n  txn: PersistenceTransaction\n): SimpleDbStore<DbTargetKey, DbTarget> {\n  return IndexedDbPersistence.getStore<DbTargetKey, DbTarget>(\n    txn,\n    DbTarget.store\n  );\n}\n\n/**\n * Helper to get a typed SimpleDbStore for the target globals object store.\n */\nfunction globalTargetStore(\n  txn: PersistenceTransaction\n): SimpleDbStore<DbTargetGlobalKey, DbTargetGlobal> {\n  return IndexedDbPersistence.getStore<DbTargetGlobalKey, DbTargetGlobal>(\n    txn,\n    DbTargetGlobal.store\n  );\n}\n\n/**\n * Helper to get a typed SimpleDbStore for the document target object store.\n */\nexport function documentTargetStore(\n  txn: PersistenceTransaction\n): SimpleDbStore<DbTargetDocumentKey, DbTargetDocument> {\n  return IndexedDbPersistence.getStore<DbTargetDocumentKey, DbTargetDocument>(\n    txn,\n    DbTargetDocument.store\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Timestamp } from '../api/timestamp';\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport {\n  Document,\n  MaybeDocument,\n  NoDocument,\n  UnknownDocument\n} from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { MutationBatch } from '../model/mutation_batch';\nimport * as api from '../protos/firestore_proto_api';\nimport { JsonProtoSerializer } from '../remote/serializer';\nimport { debugAssert, fail } from '../util/assert';\nimport { ByteString } from '../util/byte_string';\nimport { Target } from '../core/target';\nimport {\n  DbMutationBatch,\n  DbNoDocument,\n  DbQuery,\n  DbRemoteDocument,\n  DbTarget,\n  DbTimestamp,\n  DbTimestampKey,\n  DbUnknownDocument\n} from './indexeddb_schema';\nimport { TargetData, TargetPurpose } from './target_data';\n\n/** Serializer for values stored in the LocalStore. */\nexport class LocalSerializer {\n  constructor(private remoteSerializer: JsonProtoSerializer) {}\n\n  /** Decodes a remote document from storage locally to a Document. */\n  fromDbRemoteDocument(remoteDoc: DbRemoteDocument): MaybeDocument {\n    if (remoteDoc.document) {\n      return this.remoteSerializer.fromDocument(\n        remoteDoc.document,\n        !!remoteDoc.hasCommittedMutations\n      );\n    } else if (remoteDoc.noDocument) {\n      const key = DocumentKey.fromSegments(remoteDoc.noDocument.path);\n      const version = this.fromDbTimestamp(remoteDoc.noDocument.readTime);\n      return new NoDocument(key, version, {\n        hasCommittedMutations: !!remoteDoc.hasCommittedMutations\n      });\n    } else if (remoteDoc.unknownDocument) {\n      const key = DocumentKey.fromSegments(remoteDoc.unknownDocument.path);\n      const version = this.fromDbTimestamp(remoteDoc.unknownDocument.version);\n      return new UnknownDocument(key, version);\n    } else {\n      return fail('Unexpected DbRemoteDocument');\n    }\n  }\n\n  /** Encodes a document for storage locally. */\n  toDbRemoteDocument(\n    maybeDoc: MaybeDocument,\n    readTime: SnapshotVersion\n  ): DbRemoteDocument {\n    const dbReadTime = this.toDbTimestampKey(readTime);\n    const parentPath = maybeDoc.key.path.popLast().toArray();\n    if (maybeDoc instanceof Document) {\n      const doc = this.remoteSerializer.toDocument(maybeDoc);\n      const hasCommittedMutations = maybeDoc.hasCommittedMutations;\n      return new DbRemoteDocument(\n        /* unknownDocument= */ null,\n        /* noDocument= */ null,\n        doc,\n        hasCommittedMutations,\n        dbReadTime,\n        parentPath\n      );\n    } else if (maybeDoc instanceof NoDocument) {\n      const path = maybeDoc.key.path.toArray();\n      const readTime = this.toDbTimestamp(maybeDoc.version);\n      const hasCommittedMutations = maybeDoc.hasCommittedMutations;\n      return new DbRemoteDocument(\n        /* unknownDocument= */ null,\n        new DbNoDocument(path, readTime),\n        /* document= */ null,\n        hasCommittedMutations,\n        dbReadTime,\n        parentPath\n      );\n    } else if (maybeDoc instanceof UnknownDocument) {\n      const path = maybeDoc.key.path.toArray();\n      const readTime = this.toDbTimestamp(maybeDoc.version);\n      return new DbRemoteDocument(\n        new DbUnknownDocument(path, readTime),\n        /* noDocument= */ null,\n        /* document= */ null,\n        /* hasCommittedMutations= */ true,\n        dbReadTime,\n        parentPath\n      );\n    } else {\n      return fail('Unexpected MaybeDocument');\n    }\n  }\n\n  toDbTimestampKey(snapshotVersion: SnapshotVersion): DbTimestampKey {\n    const timestamp = snapshotVersion.toTimestamp();\n    return [timestamp.seconds, timestamp.nanoseconds];\n  }\n\n  fromDbTimestampKey(dbTimestampKey: DbTimestampKey): SnapshotVersion {\n    const timestamp = new Timestamp(dbTimestampKey[0], dbTimestampKey[1]);\n    return SnapshotVersion.fromTimestamp(timestamp);\n  }\n\n  private toDbTimestamp(snapshotVersion: SnapshotVersion): DbTimestamp {\n    const timestamp = snapshotVersion.toTimestamp();\n    return new DbTimestamp(timestamp.seconds, timestamp.nanoseconds);\n  }\n\n  private fromDbTimestamp(dbTimestamp: DbTimestamp): SnapshotVersion {\n    const timestamp = new Timestamp(\n      dbTimestamp.seconds,\n      dbTimestamp.nanoseconds\n    );\n    return SnapshotVersion.fromTimestamp(timestamp);\n  }\n\n  /** Encodes a batch of mutations into a DbMutationBatch for local storage. */\n  toDbMutationBatch(userId: string, batch: MutationBatch): DbMutationBatch {\n    const serializedBaseMutations = batch.baseMutations.map(m =>\n      this.remoteSerializer.toMutation(m)\n    );\n    const serializedMutations = batch.mutations.map(m =>\n      this.remoteSerializer.toMutation(m)\n    );\n    return new DbMutationBatch(\n      userId,\n      batch.batchId,\n      batch.localWriteTime.toMillis(),\n      serializedBaseMutations,\n      serializedMutations\n    );\n  }\n\n  /** Decodes a DbMutationBatch into a MutationBatch */\n  fromDbMutationBatch(dbBatch: DbMutationBatch): MutationBatch {\n    const baseMutations = (dbBatch.baseMutations || []).map(m =>\n      this.remoteSerializer.fromMutation(m)\n    );\n    const mutations = dbBatch.mutations.map(m =>\n      this.remoteSerializer.fromMutation(m)\n    );\n    const timestamp = Timestamp.fromMillis(dbBatch.localWriteTimeMs);\n    return new MutationBatch(\n      dbBatch.batchId,\n      timestamp,\n      baseMutations,\n      mutations\n    );\n  }\n\n  /** Decodes a DbTarget into TargetData */\n  fromDbTarget(dbTarget: DbTarget): TargetData {\n    const version = this.fromDbTimestamp(dbTarget.readTime);\n    const lastLimboFreeSnapshotVersion =\n      dbTarget.lastLimboFreeSnapshotVersion !== undefined\n        ? this.fromDbTimestamp(dbTarget.lastLimboFreeSnapshotVersion)\n        : SnapshotVersion.min();\n\n    let target: Target;\n    if (isDocumentQuery(dbTarget.query)) {\n      target = this.remoteSerializer.fromDocumentsTarget(dbTarget.query);\n    } else {\n      target = this.remoteSerializer.fromQueryTarget(dbTarget.query);\n    }\n    return new TargetData(\n      target,\n      dbTarget.targetId,\n      TargetPurpose.Listen,\n      dbTarget.lastListenSequenceNumber,\n      version,\n      lastLimboFreeSnapshotVersion,\n      ByteString.fromBase64String(dbTarget.resumeToken)\n    );\n  }\n\n  /** Encodes TargetData into a DbTarget for storage locally. */\n  toDbTarget(targetData: TargetData): DbTarget {\n    debugAssert(\n      TargetPurpose.Listen === targetData.purpose,\n      'Only queries with purpose ' +\n        TargetPurpose.Listen +\n        ' may be stored, got ' +\n        targetData.purpose\n    );\n    const dbTimestamp = this.toDbTimestamp(targetData.snapshotVersion);\n    const dbLastLimboFreeTimestamp = this.toDbTimestamp(\n      targetData.lastLimboFreeSnapshotVersion\n    );\n    let queryProto: DbQuery;\n    if (targetData.target.isDocumentQuery()) {\n      queryProto = this.remoteSerializer.toDocumentsTarget(targetData.target);\n    } else {\n      queryProto = this.remoteSerializer.toQueryTarget(targetData.target);\n    }\n\n    // We can't store the resumeToken as a ByteString in IndexedDb, so we\n    // convert it to a base64 string for storage.\n    const resumeToken = targetData.resumeToken.toBase64();\n\n    // lastListenSequenceNumber is always 0 until we do real GC.\n    return new DbTarget(\n      targetData.targetId,\n      targetData.target.canonicalId(),\n      dbTimestamp,\n      resumeToken,\n      targetData.sequenceNumber,\n      dbLastLimboFreeTimestamp,\n      queryProto\n    );\n  }\n}\n\n/**\n * A helper function for figuring out what kind of query has been stored.\n */\nfunction isDocumentQuery(dbQuery: DbQuery): dbQuery is api.DocumentsTarget {\n  return (dbQuery as api.DocumentsTarget).documents !== undefined;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { User } from '../auth/user';\nimport { DatabaseInfo } from '../core/database_info';\nimport { ListenSequence, SequenceNumberSyncer } from '../core/listen_sequence';\nimport { ListenSequenceNumber, TargetId } from '../core/types';\nimport { DocumentKey } from '../model/document_key';\nimport { Platform } from '../platform/platform';\nimport { JsonProtoSerializer } from '../remote/serializer';\nimport { debugAssert, fail } from '../util/assert';\nimport { AsyncQueue, DelayedOperation, TimerId } from '../util/async_queue';\nimport { Code, FirestoreError } from '../util/error';\nimport { logDebug, logError } from '../util/log';\nimport {\n  decodeResourcePath,\n  EncodedResourcePath,\n  encodeResourcePath\n} from './encoded_resource_path';\nimport { IndexedDbIndexManager } from './indexeddb_index_manager';\nimport {\n  IndexedDbMutationQueue,\n  mutationQueuesContainKey\n} from './indexeddb_mutation_queue';\nimport { IndexedDbRemoteDocumentCache } from './indexeddb_remote_document_cache';\nimport {\n  ALL_STORES,\n  DbClientMetadata,\n  DbClientMetadataKey,\n  DbPrimaryClient,\n  DbPrimaryClientKey,\n  DbTargetDocument,\n  SCHEMA_VERSION,\n  SchemaConverter\n} from './indexeddb_schema';\nimport {\n  documentTargetStore,\n  IndexedDbTargetCache\n} from './indexeddb_target_cache';\nimport { LocalSerializer } from './local_serializer';\nimport {\n  ActiveTargets,\n  LruDelegate,\n  LruGarbageCollector,\n  LruParams\n} from './lru_garbage_collector';\nimport {\n  Persistence,\n  PersistenceTransaction,\n  PersistenceTransactionMode,\n  PRIMARY_LEASE_LOST_ERROR_MSG,\n  PrimaryStateListener,\n  ReferenceDelegate\n} from './persistence';\nimport { PersistencePromise } from './persistence_promise';\nimport { ClientId } from './shared_client_state';\nimport { TargetData } from './target_data';\nimport {\n  isIndexedDbTransactionError,\n  SimpleDb,\n  SimpleDbStore,\n  SimpleDbTransaction\n} from './simple_db';\n\nconst LOG_TAG = 'IndexedDbPersistence';\n\n/**\n * Oldest acceptable age in milliseconds for client metadata before the client\n * is considered inactive and its associated data is garbage collected.\n */\nconst MAX_CLIENT_AGE_MS = 30 * 60 * 1000; // 30 minutes\n\n/**\n * Oldest acceptable metadata age for clients that may participate in the\n * primary lease election. Clients that have not updated their client metadata\n * within 5 seconds are not eligible to receive a primary lease.\n */\nconst MAX_PRIMARY_ELIGIBLE_AGE_MS = 5000;\n\n/**\n * The interval at which clients will update their metadata, including\n * refreshing their primary lease if held or potentially trying to acquire it if\n * not held.\n *\n * Primary clients may opportunistically refresh their metadata earlier\n * if they're already performing an IndexedDB operation.\n */\nconst CLIENT_METADATA_REFRESH_INTERVAL_MS = 4000;\n/** User-facing error when the primary lease is required but not available. */\nconst PRIMARY_LEASE_EXCLUSIVE_ERROR_MSG =\n  'Failed to obtain exclusive access to the persistence layer. ' +\n  'To allow shared access, make sure to invoke ' +\n  '`enablePersistence()` with `synchronizeTabs:true` in all tabs. ' +\n  'If you are using `experimentalForceOwningTab:true`, make sure that only ' +\n  'one tab has persistence enabled at any given time.';\nconst UNSUPPORTED_PLATFORM_ERROR_MSG =\n  'This platform is either missing' +\n  ' IndexedDB or is known to have an incomplete implementation. Offline' +\n  ' persistence has been disabled.';\n\n// The format of the LocalStorage key that stores zombied client is:\n//     firestore_zombie_<persistence_prefix>_<instance_key>\nconst ZOMBIED_CLIENTS_KEY_PREFIX = 'firestore_zombie';\n\nexport class IndexedDbTransaction extends PersistenceTransaction {\n  constructor(\n    readonly simpleDbTransaction: SimpleDbTransaction,\n    readonly currentSequenceNumber: ListenSequenceNumber\n  ) {\n    super();\n  }\n}\n\n/**\n * An IndexedDB-backed instance of Persistence. Data is stored persistently\n * across sessions.\n *\n * On Web only, the Firestore SDKs support shared access to its persistence\n * layer. This allows multiple browser tabs to read and write to IndexedDb and\n * to synchronize state even without network connectivity. Shared access is\n * currently optional and not enabled unless all clients invoke\n * `enablePersistence()` with `{synchronizeTabs:true}`.\n *\n * In multi-tab mode, if multiple clients are active at the same time, the SDK\n * will designate one client as the “primary client”. An effort is made to pick\n * a visible, network-connected and active client, and this client is\n * responsible for letting other clients know about its presence. The primary\n * client writes a unique client-generated identifier (the client ID) to\n * IndexedDb’s “owner” store every 4 seconds. If the primary client fails to\n * update this entry, another client can acquire the lease and take over as\n * primary.\n *\n * Some persistence operations in the SDK are designated as primary-client only\n * operations. This includes the acknowledgment of mutations and all updates of\n * remote documents. The effects of these operations are written to persistence\n * and then broadcast to other tabs via LocalStorage (see\n * `WebStorageSharedClientState`), which then refresh their state from\n * persistence.\n *\n * Similarly, the primary client listens to notifications sent by secondary\n * clients to discover persistence changes written by secondary clients, such as\n * the addition of new mutations and query targets.\n *\n * If multi-tab is not enabled and another tab already obtained the primary\n * lease, IndexedDbPersistence enters a failed state and all subsequent\n * operations will automatically fail.\n *\n * Additionally, there is an optimization so that when a tab is closed, the\n * primary lease is released immediately (this is especially important to make\n * sure that a refreshed tab is able to immediately re-acquire the primary\n * lease). Unfortunately, IndexedDB cannot be reliably used in window.unload\n * since it is an asynchronous API. So in addition to attempting to give up the\n * lease, the leaseholder writes its client ID to a \"zombiedClient\" entry in\n * LocalStorage which acts as an indicator that another tab should go ahead and\n * take the primary lease immediately regardless of the current lease timestamp.\n *\n * TODO(b/114226234): Remove `synchronizeTabs` section when multi-tab is no\n * longer optional.\n */\nexport class IndexedDbPersistence implements Persistence {\n  static getStore<Key extends IDBValidKey, Value>(\n    txn: PersistenceTransaction,\n    store: string\n  ): SimpleDbStore<Key, Value> {\n    if (txn instanceof IndexedDbTransaction) {\n      return SimpleDb.getStore<Key, Value>(txn.simpleDbTransaction, store);\n    } else {\n      throw fail(\n        'IndexedDbPersistence must use instances of IndexedDbTransaction'\n      );\n    }\n  }\n\n  /**\n   * The name of the main (and currently only) IndexedDB database. this name is\n   * appended to the prefix provided to the IndexedDbPersistence constructor.\n   */\n  static MAIN_DATABASE = 'main';\n\n  private readonly document: Document | null;\n  private readonly window: Window | null;\n\n  // Technically `simpleDb` should be `| undefined` because it is\n  // initialized asynchronously by start(), but that would be more misleading\n  // than useful.\n  private simpleDb!: SimpleDb;\n\n  private listenSequence: ListenSequence | null = null;\n\n  private _started = false;\n  private isPrimary = false;\n  private networkEnabled = true;\n  private dbName: string;\n\n  /** Our window.unload handler, if registered. */\n  private windowUnloadHandler: (() => void) | null = null;\n  private inForeground = false;\n\n  private serializer: LocalSerializer;\n\n  /** Our 'visibilitychange' listener if registered. */\n  private documentVisibilityHandler: ((e?: Event) => void) | null = null;\n\n  /** The client metadata refresh task. */\n  private clientMetadataRefresher: DelayedOperation<void> | null = null;\n\n  /** The last time we garbage collected the client metadata object store. */\n  private lastGarbageCollectionTime = Number.NEGATIVE_INFINITY;\n\n  /** A listener to notify on primary state changes. */\n  private primaryStateListener: PrimaryStateListener = _ => Promise.resolve();\n\n  private readonly targetCache: IndexedDbTargetCache;\n  private readonly indexManager: IndexedDbIndexManager;\n  private readonly remoteDocumentCache: IndexedDbRemoteDocumentCache;\n  private readonly webStorage: Storage | null;\n  readonly referenceDelegate: IndexedDbLruDelegate;\n\n  constructor(\n    /**\n     * Whether to synchronize the in-memory state of multiple tabs and share\n     * access to local persistence.\n     */\n    private readonly allowTabSynchronization: boolean,\n\n    private readonly persistenceKey: string,\n    private readonly clientId: ClientId,\n    platform: Platform,\n    lruParams: LruParams,\n    private readonly queue: AsyncQueue,\n    serializer: JsonProtoSerializer,\n    private readonly sequenceNumberSyncer: SequenceNumberSyncer,\n\n    /**\n     * If set to true, forcefully obtains database access. Existing tabs will\n     * no longer be able to access IndexedDB.\n     */\n    private readonly forceOwningTab: boolean\n  ) {\n    if (!IndexedDbPersistence.isAvailable()) {\n      throw new FirestoreError(\n        Code.UNIMPLEMENTED,\n        UNSUPPORTED_PLATFORM_ERROR_MSG\n      );\n    }\n\n    this.referenceDelegate = new IndexedDbLruDelegate(this, lruParams);\n    this.dbName = persistenceKey + IndexedDbPersistence.MAIN_DATABASE;\n    this.serializer = new LocalSerializer(serializer);\n    this.document = platform.document;\n    this.targetCache = new IndexedDbTargetCache(\n      this.referenceDelegate,\n      this.serializer\n    );\n    this.indexManager = new IndexedDbIndexManager();\n    this.remoteDocumentCache = new IndexedDbRemoteDocumentCache(\n      this.serializer,\n      this.indexManager\n    );\n    this.window = platform.window;\n    if (platform.window && platform.window.localStorage) {\n      this.webStorage = platform.window.localStorage;\n    } else {\n      this.webStorage = null;\n      if (forceOwningTab === false) {\n        logError(\n          LOG_TAG,\n          'LocalStorage is unavailable. As a result, persistence may not work ' +\n            'reliably. In particular enablePersistence() could fail immediately ' +\n            'after refreshing the page.'\n        );\n      }\n    }\n  }\n\n  /**\n   * Attempt to start IndexedDb persistence.\n   *\n   * @return {Promise<void>} Whether persistence was enabled.\n   */\n  start(): Promise<void> {\n    debugAssert(!this.started, 'IndexedDbPersistence double-started!');\n    debugAssert(this.window !== null, \"Expected 'window' to be defined\");\n\n    return SimpleDb.openOrCreate(\n      this.dbName,\n      SCHEMA_VERSION,\n      new SchemaConverter(this.serializer)\n    )\n      .then(db => {\n        this.simpleDb = db;\n        // NOTE: This is expected to fail sometimes (in the case of another tab already\n        // having the persistence lock), so it's the first thing we should do.\n        return this.updateClientMetadataAndTryBecomePrimary();\n      })\n      .then(() => {\n        if (!this.isPrimary && !this.allowTabSynchronization) {\n          // Fail `start()` if `synchronizeTabs` is disabled and we cannot\n          // obtain the primary lease.\n          throw new FirestoreError(\n            Code.FAILED_PRECONDITION,\n            PRIMARY_LEASE_EXCLUSIVE_ERROR_MSG\n          );\n        }\n        this.attachVisibilityHandler();\n        this.attachWindowUnloadHook();\n\n        this.scheduleClientMetadataAndPrimaryLeaseRefreshes();\n\n        return this.runTransaction(\n          'getHighestListenSequenceNumber',\n          'readonly',\n          txn => this.targetCache.getHighestSequenceNumber(txn)\n        );\n      })\n      .then(highestListenSequenceNumber => {\n        this.listenSequence = new ListenSequence(\n          highestListenSequenceNumber,\n          this.sequenceNumberSyncer\n        );\n      })\n      .then(() => {\n        this._started = true;\n      })\n      .catch(reason => {\n        this.simpleDb && this.simpleDb.close();\n        return Promise.reject(reason);\n      });\n  }\n\n  /**\n   * Registers a listener that gets called when the primary state of the\n   * instance changes. Upon registering, this listener is invoked immediately\n   * with the current primary state.\n   *\n   * PORTING NOTE: This is only used for Web multi-tab.\n   */\n  setPrimaryStateListener(\n    primaryStateListener: PrimaryStateListener\n  ): Promise<void> {\n    this.primaryStateListener = async primaryState => {\n      if (this.started) {\n        return primaryStateListener(primaryState);\n      }\n    };\n    return primaryStateListener(this.isPrimary);\n  }\n\n  /**\n   * Registers a listener that gets called when the database receives a\n   * version change event indicating that it has deleted.\n   *\n   * PORTING NOTE: This is only used for Web multi-tab.\n   */\n  setDatabaseDeletedListener(\n    databaseDeletedListener: () => Promise<void>\n  ): void {\n    this.simpleDb.setVersionChangeListener(async event => {\n      // Check if an attempt is made to delete IndexedDB.\n      if (event.newVersion === null) {\n        await databaseDeletedListener();\n      }\n    });\n  }\n\n  /**\n   * Adjusts the current network state in the client's metadata, potentially\n   * affecting the primary lease.\n   *\n   * PORTING NOTE: This is only used for Web multi-tab.\n   */\n  setNetworkEnabled(networkEnabled: boolean): void {\n    if (this.networkEnabled !== networkEnabled) {\n      this.networkEnabled = networkEnabled;\n      // Schedule a primary lease refresh for immediate execution. The eventual\n      // lease update will be propagated via `primaryStateListener`.\n      this.queue.enqueueAndForget(async () => {\n        if (this.started) {\n          await this.updateClientMetadataAndTryBecomePrimary();\n        }\n      });\n    }\n  }\n\n  /**\n   * Updates the client metadata in IndexedDb and attempts to either obtain or\n   * extend the primary lease for the local client. Asynchronously notifies the\n   * primary state listener if the client either newly obtained or released its\n   * primary lease.\n   */\n  private updateClientMetadataAndTryBecomePrimary(): Promise<void> {\n    return this.runTransaction(\n      'updateClientMetadataAndTryBecomePrimary',\n      'readwrite',\n      txn => {\n        const metadataStore = clientMetadataStore(txn);\n        return metadataStore\n          .put(\n            new DbClientMetadata(\n              this.clientId,\n              Date.now(),\n              this.networkEnabled,\n              this.inForeground\n            )\n          )\n          .next(() => {\n            if (this.isPrimary) {\n              return this.verifyPrimaryLease(txn).next(success => {\n                if (!success) {\n                  this.isPrimary = false;\n                  this.queue.enqueueRetryable(() =>\n                    this.primaryStateListener(false)\n                  );\n                }\n              });\n            }\n          })\n          .next(() => this.canActAsPrimary(txn))\n          .next(canActAsPrimary => {\n            if (this.isPrimary && !canActAsPrimary) {\n              return this.releasePrimaryLeaseIfHeld(txn).next(() => false);\n            } else if (canActAsPrimary) {\n              return this.acquireOrExtendPrimaryLease(txn).next(() => true);\n            } else {\n              return /* canActAsPrimary= */ false;\n            }\n          });\n      }\n    )\n      .catch(e => {\n        if (isIndexedDbTransactionError(e)) {\n          logDebug(LOG_TAG, 'Failed to extend owner lease: ', e);\n          // Proceed with the existing state. Any subsequent access to\n          // IndexedDB will verify the lease.\n          return this.isPrimary;\n        }\n\n        if (!this.allowTabSynchronization) {\n          throw e;\n        }\n\n        logDebug(\n          LOG_TAG,\n          'Releasing owner lease after error during lease refresh',\n          e\n        );\n        return /* isPrimary= */ false;\n      })\n      .then(isPrimary => {\n        if (this.isPrimary !== isPrimary) {\n          this.queue.enqueueRetryable(() =>\n            this.primaryStateListener(isPrimary)\n          );\n        }\n        this.isPrimary = isPrimary;\n      });\n  }\n\n  private verifyPrimaryLease(\n    txn: PersistenceTransaction\n  ): PersistencePromise<boolean> {\n    const store = primaryClientStore(txn);\n    return store.get(DbPrimaryClient.key).next(primaryClient => {\n      return PersistencePromise.resolve(this.isLocalClient(primaryClient));\n    });\n  }\n\n  private removeClientMetadata(\n    txn: PersistenceTransaction\n  ): PersistencePromise<void> {\n    const metadataStore = clientMetadataStore(txn);\n    return metadataStore.delete(this.clientId);\n  }\n\n  /**\n   * If the garbage collection threshold has passed, prunes the\n   * RemoteDocumentChanges and the ClientMetadata store based on the last update\n   * time of all clients.\n   */\n  private async maybeGarbageCollectMultiClientState(): Promise<void> {\n    if (\n      this.isPrimary &&\n      !this.isWithinAge(this.lastGarbageCollectionTime, MAX_CLIENT_AGE_MS)\n    ) {\n      this.lastGarbageCollectionTime = Date.now();\n\n      const inactiveClients = await this.runTransaction(\n        'maybeGarbageCollectMultiClientState',\n        'readwrite-primary',\n        txn => {\n          const metadataStore = IndexedDbPersistence.getStore<\n            DbClientMetadataKey,\n            DbClientMetadata\n          >(txn, DbClientMetadata.store);\n\n          return metadataStore.loadAll().next(existingClients => {\n            const active = this.filterActiveClients(\n              existingClients,\n              MAX_CLIENT_AGE_MS\n            );\n            const inactive = existingClients.filter(\n              client => active.indexOf(client) === -1\n            );\n\n            // Delete metadata for clients that are no longer considered active.\n            return PersistencePromise.forEach(\n              inactive,\n              (inactiveClient: DbClientMetadata) =>\n                metadataStore.delete(inactiveClient.clientId)\n            ).next(() => inactive);\n          });\n        }\n      ).catch(() => {\n        // Ignore primary lease violations or any other type of error. The next\n        // primary will run `maybeGarbageCollectMultiClientState()` again.\n        // We don't use `ignoreIfPrimaryLeaseLoss()` since we don't want to depend\n        // on LocalStore.\n        return [];\n      });\n\n      // Delete potential leftover entries that may continue to mark the\n      // inactive clients as zombied in LocalStorage.\n      // Ideally we'd delete the IndexedDb and LocalStorage zombie entries for\n      // the client atomically, but we can't. So we opt to delete the IndexedDb\n      // entries first to avoid potentially reviving a zombied client.\n      if (this.webStorage) {\n        for (const inactiveClient of inactiveClients) {\n          this.webStorage.removeItem(\n            this.zombiedClientLocalStorageKey(inactiveClient.clientId)\n          );\n        }\n      }\n    }\n  }\n\n  /**\n   * Schedules a recurring timer to update the client metadata and to either\n   * extend or acquire the primary lease if the client is eligible.\n   */\n  private scheduleClientMetadataAndPrimaryLeaseRefreshes(): void {\n    this.clientMetadataRefresher = this.queue.enqueueAfterDelay(\n      TimerId.ClientMetadataRefresh,\n      CLIENT_METADATA_REFRESH_INTERVAL_MS,\n      () => {\n        return this.updateClientMetadataAndTryBecomePrimary()\n          .then(() => this.maybeGarbageCollectMultiClientState())\n          .then(() => this.scheduleClientMetadataAndPrimaryLeaseRefreshes());\n      }\n    );\n  }\n\n  /** Checks whether `client` is the local client. */\n  private isLocalClient(client: DbPrimaryClient | null): boolean {\n    return client ? client.ownerId === this.clientId : false;\n  }\n\n  /**\n   * Evaluate the state of all active clients and determine whether the local\n   * client is or can act as the holder of the primary lease. Returns whether\n   * the client is eligible for the lease, but does not actually acquire it.\n   * May return 'false' even if there is no active leaseholder and another\n   * (foreground) client should become leaseholder instead.\n   */\n  private canActAsPrimary(\n    txn: PersistenceTransaction\n  ): PersistencePromise<boolean> {\n    if (this.forceOwningTab) {\n      return PersistencePromise.resolve<boolean>(true);\n    }\n    const store = primaryClientStore(txn);\n    return store\n      .get(DbPrimaryClient.key)\n      .next(currentPrimary => {\n        const currentLeaseIsValid =\n          currentPrimary !== null &&\n          this.isWithinAge(\n            currentPrimary.leaseTimestampMs,\n            MAX_PRIMARY_ELIGIBLE_AGE_MS\n          ) &&\n          !this.isClientZombied(currentPrimary.ownerId);\n\n        // A client is eligible for the primary lease if:\n        // - its network is enabled and the client's tab is in the foreground.\n        // - its network is enabled and no other client's tab is in the\n        //   foreground.\n        // - every clients network is disabled and the client's tab is in the\n        //   foreground.\n        // - every clients network is disabled and no other client's tab is in\n        //   the foreground.\n        // - the `forceOwningTab` setting was passed in.\n        if (currentLeaseIsValid) {\n          if (this.isLocalClient(currentPrimary) && this.networkEnabled) {\n            return true;\n          }\n\n          if (!this.isLocalClient(currentPrimary)) {\n            if (!currentPrimary!.allowTabSynchronization) {\n              // Fail the `canActAsPrimary` check if the current leaseholder has\n              // not opted into multi-tab synchronization. If this happens at\n              // client startup, we reject the Promise returned by\n              // `enablePersistence()` and the user can continue to use Firestore\n              // with in-memory persistence.\n              // If this fails during a lease refresh, we will instead block the\n              // AsyncQueue from executing further operations. Note that this is\n              // acceptable since mixing & matching different `synchronizeTabs`\n              // settings is not supported.\n              //\n              // TODO(b/114226234): Remove this check when `synchronizeTabs` can\n              // no longer be turned off.\n              throw new FirestoreError(\n                Code.FAILED_PRECONDITION,\n                PRIMARY_LEASE_EXCLUSIVE_ERROR_MSG\n              );\n            }\n\n            return false;\n          }\n        }\n\n        if (this.networkEnabled && this.inForeground) {\n          return true;\n        }\n\n        return clientMetadataStore(txn)\n          .loadAll()\n          .next(existingClients => {\n            // Process all existing clients and determine whether at least one of\n            // them is better suited to obtain the primary lease.\n            const preferredCandidate = this.filterActiveClients(\n              existingClients,\n              MAX_PRIMARY_ELIGIBLE_AGE_MS\n            ).find(otherClient => {\n              if (this.clientId !== otherClient.clientId) {\n                const otherClientHasBetterNetworkState =\n                  !this.networkEnabled && otherClient.networkEnabled;\n                const otherClientHasBetterVisibility =\n                  !this.inForeground && otherClient.inForeground;\n                const otherClientHasSameNetworkState =\n                  this.networkEnabled === otherClient.networkEnabled;\n                if (\n                  otherClientHasBetterNetworkState ||\n                  (otherClientHasBetterVisibility &&\n                    otherClientHasSameNetworkState)\n                ) {\n                  return true;\n                }\n              }\n              return false;\n            });\n            return preferredCandidate === undefined;\n          });\n      })\n      .next(canActAsPrimary => {\n        if (this.isPrimary !== canActAsPrimary) {\n          logDebug(\n            LOG_TAG,\n            `Client ${\n              canActAsPrimary ? 'is' : 'is not'\n            } eligible for a primary lease.`\n          );\n        }\n        return canActAsPrimary;\n      });\n  }\n\n  async shutdown(): Promise<void> {\n    // The shutdown() operations are idempotent and can be called even when\n    // start() aborted (e.g. because it couldn't acquire the persistence lease).\n    this._started = false;\n\n    this.markClientZombied();\n    if (this.clientMetadataRefresher) {\n      this.clientMetadataRefresher.cancel();\n      this.clientMetadataRefresher = null;\n    }\n    this.detachVisibilityHandler();\n    this.detachWindowUnloadHook();\n    await this.runTransaction('shutdown', 'readwrite', txn => {\n      return this.releasePrimaryLeaseIfHeld(txn).next(() =>\n        this.removeClientMetadata(txn)\n      );\n    }).catch(e => {\n      logDebug(LOG_TAG, 'Proceeding with shutdown despite failure: ', e);\n    });\n    this.simpleDb.close();\n\n    // Remove the entry marking the client as zombied from LocalStorage since\n    // we successfully deleted its metadata from IndexedDb.\n    this.removeClientZombiedEntry();\n  }\n\n  /**\n   * Returns clients that are not zombied and have an updateTime within the\n   * provided threshold.\n   */\n  private filterActiveClients(\n    clients: DbClientMetadata[],\n    activityThresholdMs: number\n  ): DbClientMetadata[] {\n    return clients.filter(\n      client =>\n        this.isWithinAge(client.updateTimeMs, activityThresholdMs) &&\n        !this.isClientZombied(client.clientId)\n    );\n  }\n\n  /**\n   * Returns the IDs of the clients that are currently active. If multi-tab\n   * is not supported, returns an array that only contains the local client's\n   * ID.\n   *\n   * PORTING NOTE: This is only used for Web multi-tab.\n   */\n  getActiveClients(): Promise<ClientId[]> {\n    return this.runTransaction('getActiveClients', 'readonly', txn => {\n      return clientMetadataStore(txn)\n        .loadAll()\n        .next(clients =>\n          this.filterActiveClients(clients, MAX_CLIENT_AGE_MS).map(\n            clientMetadata => clientMetadata.clientId\n          )\n        );\n    });\n  }\n\n  static async clearPersistence(persistenceKey: string): Promise<void> {\n    if (!IndexedDbPersistence.isAvailable()) {\n      return Promise.resolve();\n    }\n    const dbName = persistenceKey + IndexedDbPersistence.MAIN_DATABASE;\n    await SimpleDb.delete(dbName);\n  }\n\n  get started(): boolean {\n    return this._started;\n  }\n\n  getMutationQueue(user: User): IndexedDbMutationQueue {\n    debugAssert(\n      this.started,\n      'Cannot initialize MutationQueue before persistence is started.'\n    );\n    return IndexedDbMutationQueue.forUser(\n      user,\n      this.serializer,\n      this.indexManager,\n      this.referenceDelegate\n    );\n  }\n\n  getTargetCache(): IndexedDbTargetCache {\n    debugAssert(\n      this.started,\n      'Cannot initialize TargetCache before persistence is started.'\n    );\n    return this.targetCache;\n  }\n\n  getRemoteDocumentCache(): IndexedDbRemoteDocumentCache {\n    debugAssert(\n      this.started,\n      'Cannot initialize RemoteDocumentCache before persistence is started.'\n    );\n    return this.remoteDocumentCache;\n  }\n\n  getIndexManager(): IndexedDbIndexManager {\n    debugAssert(\n      this.started,\n      'Cannot initialize IndexManager before persistence is started.'\n    );\n    return this.indexManager;\n  }\n\n  runTransaction<T>(\n    action: string,\n    mode: PersistenceTransactionMode,\n    transactionOperation: (\n      transaction: PersistenceTransaction\n    ) => PersistencePromise<T>\n  ): Promise<T> {\n    logDebug(LOG_TAG, 'Starting transaction:', action);\n\n    const simpleDbMode = mode === 'readonly' ? 'readonly' : 'readwrite';\n\n    let persistenceTransaction: PersistenceTransaction;\n\n    // Do all transactions as readwrite against all object stores, since we\n    // are the only reader/writer.\n    return this.simpleDb\n      .runTransaction(simpleDbMode, ALL_STORES, simpleDbTxn => {\n        persistenceTransaction = new IndexedDbTransaction(\n          simpleDbTxn,\n          this.listenSequence\n            ? this.listenSequence.next()\n            : ListenSequence.INVALID\n        );\n\n        if (mode === 'readwrite-primary') {\n          // While we merely verify that we have (or can acquire) the lease\n          // immediately, we wait to extend the primary lease until after\n          // executing transactionOperation(). This ensures that even if the\n          // transactionOperation takes a long time, we'll use a recent\n          // leaseTimestampMs in the extended (or newly acquired) lease.\n          return this.verifyPrimaryLease(persistenceTransaction)\n            .next(holdsPrimaryLease => {\n              if (holdsPrimaryLease) {\n                return /* holdsPrimaryLease= */ true;\n              }\n              return this.canActAsPrimary(persistenceTransaction);\n            })\n            .next(holdsPrimaryLease => {\n              if (!holdsPrimaryLease) {\n                logError(\n                  `Failed to obtain primary lease for action '${action}'.`\n                );\n                this.isPrimary = false;\n                this.queue.enqueueRetryable(() =>\n                  this.primaryStateListener(false)\n                );\n                throw new FirestoreError(\n                  Code.FAILED_PRECONDITION,\n                  PRIMARY_LEASE_LOST_ERROR_MSG\n                );\n              }\n              return transactionOperation(persistenceTransaction);\n            })\n            .next(result => {\n              return this.acquireOrExtendPrimaryLease(\n                persistenceTransaction\n              ).next(() => result);\n            });\n        } else {\n          return this.verifyAllowTabSynchronization(\n            persistenceTransaction\n          ).next(() => transactionOperation(persistenceTransaction));\n        }\n      })\n      .then(result => {\n        persistenceTransaction.raiseOnCommittedEvent();\n        return result;\n      });\n  }\n\n  /**\n   * Verifies that the current tab is the primary leaseholder or alternatively\n   * that the leaseholder has opted into multi-tab synchronization.\n   */\n  // TODO(b/114226234): Remove this check when `synchronizeTabs` can no longer\n  // be turned off.\n  private verifyAllowTabSynchronization(\n    txn: PersistenceTransaction\n  ): PersistencePromise<void> {\n    const store = primaryClientStore(txn);\n    return store.get(DbPrimaryClient.key).next(currentPrimary => {\n      const currentLeaseIsValid =\n        currentPrimary !== null &&\n        this.isWithinAge(\n          currentPrimary.leaseTimestampMs,\n          MAX_PRIMARY_ELIGIBLE_AGE_MS\n        ) &&\n        !this.isClientZombied(currentPrimary.ownerId);\n\n      if (currentLeaseIsValid && !this.isLocalClient(currentPrimary)) {\n        if (\n          !this.forceOwningTab &&\n          (!this.allowTabSynchronization ||\n            !currentPrimary!.allowTabSynchronization)\n        ) {\n          throw new FirestoreError(\n            Code.FAILED_PRECONDITION,\n            PRIMARY_LEASE_EXCLUSIVE_ERROR_MSG\n          );\n        }\n      }\n    });\n  }\n\n  /**\n   * Obtains or extends the new primary lease for the local client. This\n   * method does not verify that the client is eligible for this lease.\n   */\n  private acquireOrExtendPrimaryLease(\n    txn: PersistenceTransaction\n  ): PersistencePromise<void> {\n    const newPrimary = new DbPrimaryClient(\n      this.clientId,\n      this.allowTabSynchronization,\n      Date.now()\n    );\n    return primaryClientStore(txn).put(DbPrimaryClient.key, newPrimary);\n  }\n\n  static isAvailable(): boolean {\n    return SimpleDb.isAvailable();\n  }\n\n  /**\n   * Generates a string used as a prefix when storing data in IndexedDB and\n   * LocalStorage.\n   */\n  static buildStoragePrefix(databaseInfo: DatabaseInfo): string {\n    // Use two different prefix formats:\n    //\n    //   * firestore / persistenceKey / projectID . databaseID / ...\n    //   * firestore / persistenceKey / projectID / ...\n    //\n    // projectIDs are DNS-compatible names and cannot contain dots\n    // so there's no danger of collisions.\n    let database = databaseInfo.databaseId.projectId;\n    if (!databaseInfo.databaseId.isDefaultDatabase) {\n      database += '.' + databaseInfo.databaseId.database;\n    }\n\n    return 'firestore/' + databaseInfo.persistenceKey + '/' + database + '/';\n  }\n\n  /** Checks the primary lease and removes it if we are the current primary. */\n  private releasePrimaryLeaseIfHeld(\n    txn: PersistenceTransaction\n  ): PersistencePromise<void> {\n    const store = primaryClientStore(txn);\n    return store.get(DbPrimaryClient.key).next(primaryClient => {\n      if (this.isLocalClient(primaryClient)) {\n        logDebug(LOG_TAG, 'Releasing primary lease.');\n        return store.delete(DbPrimaryClient.key);\n      } else {\n        return PersistencePromise.resolve();\n      }\n    });\n  }\n\n  /** Verifies that `updateTimeMs` is within `maxAgeMs`. */\n  private isWithinAge(updateTimeMs: number, maxAgeMs: number): boolean {\n    const now = Date.now();\n    const minAcceptable = now - maxAgeMs;\n    const maxAcceptable = now;\n    if (updateTimeMs < minAcceptable) {\n      return false;\n    } else if (updateTimeMs > maxAcceptable) {\n      logError(\n        `Detected an update time that is in the future: ${updateTimeMs} > ${maxAcceptable}`\n      );\n      return false;\n    }\n\n    return true;\n  }\n\n  private attachVisibilityHandler(): void {\n    if (\n      this.document !== null &&\n      typeof this.document.addEventListener === 'function'\n    ) {\n      this.documentVisibilityHandler = () => {\n        this.queue.enqueueAndForget(() => {\n          this.inForeground = this.document!.visibilityState === 'visible';\n          return this.updateClientMetadataAndTryBecomePrimary();\n        });\n      };\n\n      this.document.addEventListener(\n        'visibilitychange',\n        this.documentVisibilityHandler\n      );\n\n      this.inForeground = this.document.visibilityState === 'visible';\n    }\n  }\n\n  private detachVisibilityHandler(): void {\n    if (this.documentVisibilityHandler) {\n      debugAssert(\n        this.document !== null &&\n          typeof this.document.addEventListener === 'function',\n        \"Expected 'document.addEventListener' to be a function\"\n      );\n      this.document.removeEventListener(\n        'visibilitychange',\n        this.documentVisibilityHandler\n      );\n      this.documentVisibilityHandler = null;\n    }\n  }\n\n  /**\n   * Attaches a window.unload handler that will synchronously write our\n   * clientId to a \"zombie client id\" location in LocalStorage. This can be used\n   * by tabs trying to acquire the primary lease to determine that the lease\n   * is no longer valid even if the timestamp is recent. This is particularly\n   * important for the refresh case (so the tab correctly re-acquires the\n   * primary lease). LocalStorage is used for this rather than IndexedDb because\n   * it is a synchronous API and so can be used reliably from  an unload\n   * handler.\n   */\n  private attachWindowUnloadHook(): void {\n    if (typeof this.window?.addEventListener === 'function') {\n      this.windowUnloadHandler = () => {\n        // Note: In theory, this should be scheduled on the AsyncQueue since it\n        // accesses internal state. We execute this code directly during shutdown\n        // to make sure it gets a chance to run.\n        this.markClientZombied();\n\n        this.queue.enqueueAndForget(() => {\n          // Attempt graceful shutdown (including releasing our primary lease),\n          // but there's no guarantee it will complete.\n          return this.shutdown();\n        });\n      };\n      this.window.addEventListener('unload', this.windowUnloadHandler);\n    }\n  }\n\n  private detachWindowUnloadHook(): void {\n    if (this.windowUnloadHandler) {\n      debugAssert(\n        typeof this.window?.removeEventListener === 'function',\n        \"Expected 'window.removeEventListener' to be a function\"\n      );\n      this.window!.removeEventListener('unload', this.windowUnloadHandler);\n      this.windowUnloadHandler = null;\n    }\n  }\n\n  /**\n   * Returns whether a client is \"zombied\" based on its LocalStorage entry.\n   * Clients become zombied when their tab closes without running all of the\n   * cleanup logic in `shutdown()`.\n   */\n  private isClientZombied(clientId: ClientId): boolean {\n    try {\n      const isZombied =\n        this.webStorage?.getItem(\n          this.zombiedClientLocalStorageKey(clientId)\n        ) !== null;\n      logDebug(\n        LOG_TAG,\n        `Client '${clientId}' ${\n          isZombied ? 'is' : 'is not'\n        } zombied in LocalStorage`\n      );\n      return isZombied;\n    } catch (e) {\n      // Gracefully handle if LocalStorage isn't working.\n      logError(LOG_TAG, 'Failed to get zombied client id.', e);\n      return false;\n    }\n  }\n\n  /**\n   * Record client as zombied (a client that had its tab closed). Zombied\n   * clients are ignored during primary tab selection.\n   */\n  private markClientZombied(): void {\n    if (!this.webStorage) {\n      return;\n    }\n    try {\n      this.webStorage.setItem(\n        this.zombiedClientLocalStorageKey(this.clientId),\n        String(Date.now())\n      );\n    } catch (e) {\n      // Gracefully handle if LocalStorage isn't available / working.\n      logError('Failed to set zombie client id.', e);\n    }\n  }\n\n  /** Removes the zombied client entry if it exists. */\n  private removeClientZombiedEntry(): void {\n    if (!this.webStorage) {\n      return;\n    }\n    try {\n      this.webStorage.removeItem(\n        this.zombiedClientLocalStorageKey(this.clientId)\n      );\n    } catch (e) {\n      // Ignore\n    }\n  }\n\n  private zombiedClientLocalStorageKey(clientId: ClientId): string {\n    return `${ZOMBIED_CLIENTS_KEY_PREFIX}_${this.persistenceKey}_${clientId}`;\n  }\n}\n\n/**\n * Helper to get a typed SimpleDbStore for the primary client object store.\n */\nfunction primaryClientStore(\n  txn: PersistenceTransaction\n): SimpleDbStore<DbPrimaryClientKey, DbPrimaryClient> {\n  return IndexedDbPersistence.getStore<DbPrimaryClientKey, DbPrimaryClient>(\n    txn,\n    DbPrimaryClient.store\n  );\n}\n\n/**\n * Helper to get a typed SimpleDbStore for the client metadata object store.\n */\nfunction clientMetadataStore(\n  txn: PersistenceTransaction\n): SimpleDbStore<DbClientMetadataKey, DbClientMetadata> {\n  return IndexedDbPersistence.getStore<DbClientMetadataKey, DbClientMetadata>(\n    txn,\n    DbClientMetadata.store\n  );\n}\n\n/** Provides LRU functionality for IndexedDB persistence. */\nexport class IndexedDbLruDelegate implements ReferenceDelegate, LruDelegate {\n  readonly garbageCollector: LruGarbageCollector;\n\n  constructor(private readonly db: IndexedDbPersistence, params: LruParams) {\n    this.garbageCollector = new LruGarbageCollector(this, params);\n  }\n\n  getSequenceNumberCount(\n    txn: PersistenceTransaction\n  ): PersistencePromise<number> {\n    const docCountPromise = this.orphanedDocumentCount(txn);\n    const targetCountPromise = this.db.getTargetCache().getTargetCount(txn);\n    return targetCountPromise.next(targetCount =>\n      docCountPromise.next(docCount => targetCount + docCount)\n    );\n  }\n\n  private orphanedDocumentCount(\n    txn: PersistenceTransaction\n  ): PersistencePromise<number> {\n    let orphanedCount = 0;\n    return this.forEachOrphanedDocumentSequenceNumber(txn, _ => {\n      orphanedCount++;\n    }).next(() => orphanedCount);\n  }\n\n  forEachTarget(\n    txn: PersistenceTransaction,\n    f: (q: TargetData) => void\n  ): PersistencePromise<void> {\n    return this.db.getTargetCache().forEachTarget(txn, f);\n  }\n\n  forEachOrphanedDocumentSequenceNumber(\n    txn: PersistenceTransaction,\n    f: (sequenceNumber: ListenSequenceNumber) => void\n  ): PersistencePromise<void> {\n    return this.forEachOrphanedDocument(txn, (docKey, sequenceNumber) =>\n      f(sequenceNumber)\n    );\n  }\n\n  addReference(\n    txn: PersistenceTransaction,\n    targetId: TargetId,\n    key: DocumentKey\n  ): PersistencePromise<void> {\n    return writeSentinelKey(txn, key);\n  }\n\n  removeReference(\n    txn: PersistenceTransaction,\n    targetId: TargetId,\n    key: DocumentKey\n  ): PersistencePromise<void> {\n    return writeSentinelKey(txn, key);\n  }\n\n  removeTargets(\n    txn: PersistenceTransaction,\n    upperBound: ListenSequenceNumber,\n    activeTargetIds: ActiveTargets\n  ): PersistencePromise<number> {\n    return this.db\n      .getTargetCache()\n      .removeTargets(txn, upperBound, activeTargetIds);\n  }\n\n  markPotentiallyOrphaned(\n    txn: PersistenceTransaction,\n    key: DocumentKey\n  ): PersistencePromise<void> {\n    return writeSentinelKey(txn, key);\n  }\n\n  /**\n   * Returns true if anything would prevent this document from being garbage\n   * collected, given that the document in question is not present in any\n   * targets and has a sequence number less than or equal to the upper bound for\n   * the collection run.\n   */\n  private isPinned(\n    txn: PersistenceTransaction,\n    docKey: DocumentKey\n  ): PersistencePromise<boolean> {\n    return mutationQueuesContainKey(txn, docKey);\n  }\n\n  removeOrphanedDocuments(\n    txn: PersistenceTransaction,\n    upperBound: ListenSequenceNumber\n  ): PersistencePromise<number> {\n    const documentCache = this.db.getRemoteDocumentCache();\n    const changeBuffer = documentCache.newChangeBuffer();\n\n    const promises: Array<PersistencePromise<void>> = [];\n    let documentCount = 0;\n\n    const iteration = this.forEachOrphanedDocument(\n      txn,\n      (docKey, sequenceNumber) => {\n        if (sequenceNumber <= upperBound) {\n          const p = this.isPinned(txn, docKey).next(isPinned => {\n            if (!isPinned) {\n              documentCount++;\n              // Our size accounting requires us to read all documents before\n              // removing them.\n              return changeBuffer.getEntry(txn, docKey).next(() => {\n                changeBuffer.removeEntry(docKey);\n                return documentTargetStore(txn).delete(sentinelKey(docKey));\n              });\n            }\n          });\n          promises.push(p);\n        }\n      }\n    );\n\n    return iteration\n      .next(() => PersistencePromise.waitFor(promises))\n      .next(() => changeBuffer.apply(txn))\n      .next(() => documentCount);\n  }\n\n  removeTarget(\n    txn: PersistenceTransaction,\n    targetData: TargetData\n  ): PersistencePromise<void> {\n    const updated = targetData.withSequenceNumber(txn.currentSequenceNumber);\n    return this.db.getTargetCache().updateTargetData(txn, updated);\n  }\n\n  updateLimboDocument(\n    txn: PersistenceTransaction,\n    key: DocumentKey\n  ): PersistencePromise<void> {\n    return writeSentinelKey(txn, key);\n  }\n\n  /**\n   * Call provided function for each document in the cache that is 'orphaned'. Orphaned\n   * means not a part of any target, so the only entry in the target-document index for\n   * that document will be the sentinel row (targetId 0), which will also have the sequence\n   * number for the last time the document was accessed.\n   */\n  private forEachOrphanedDocument(\n    txn: PersistenceTransaction,\n    f: (docKey: DocumentKey, sequenceNumber: ListenSequenceNumber) => void\n  ): PersistencePromise<void> {\n    const store = documentTargetStore(txn);\n    let nextToReport: ListenSequenceNumber = ListenSequence.INVALID;\n    let nextPath: EncodedResourcePath;\n    return store\n      .iterate(\n        {\n          index: DbTargetDocument.documentTargetsIndex\n        },\n        ([targetId, docKey], { path, sequenceNumber }) => {\n          if (targetId === 0) {\n            // if nextToReport is valid, report it, this is a new key so the\n            // last one must not be a member of any targets.\n            if (nextToReport !== ListenSequence.INVALID) {\n              f(new DocumentKey(decodeResourcePath(nextPath)), nextToReport);\n            }\n            // set nextToReport to be this sequence number. It's the next one we\n            // might report, if we don't find any targets for this document.\n            // Note that the sequence number must be defined when the targetId\n            // is 0.\n            nextToReport = sequenceNumber!;\n            nextPath = path;\n          } else {\n            // set nextToReport to be invalid, we know we don't need to report\n            // this one since we found a target for it.\n            nextToReport = ListenSequence.INVALID;\n          }\n        }\n      )\n      .next(() => {\n        // Since we report sequence numbers after getting to the next key, we\n        // need to check if the last key we iterated over was an orphaned\n        // document and report it.\n        if (nextToReport !== ListenSequence.INVALID) {\n          f(new DocumentKey(decodeResourcePath(nextPath)), nextToReport);\n        }\n      });\n  }\n\n  getCacheSize(txn: PersistenceTransaction): PersistencePromise<number> {\n    return this.db.getRemoteDocumentCache().getSize(txn);\n  }\n}\n\nfunction sentinelKey(key: DocumentKey): [TargetId, EncodedResourcePath] {\n  return [0, encodeResourcePath(key.path)];\n}\n\n/**\n * @return A value suitable for writing a sentinel row in the target-document\n * store.\n */\nfunction sentinelRow(\n  key: DocumentKey,\n  sequenceNumber: ListenSequenceNumber\n): DbTargetDocument {\n  return new DbTargetDocument(0, encodeResourcePath(key.path), sequenceNumber);\n}\n\nfunction writeSentinelKey(\n  txn: PersistenceTransaction,\n  key: DocumentKey\n): PersistencePromise<void> {\n  return documentTargetStore(txn).put(\n    sentinelRow(key, txn.currentSequenceNumber)\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Timestamp } from '../api/timestamp';\nimport { User } from '../auth/user';\nimport { Query } from '../core/query';\nimport { BatchId } from '../core/types';\nimport { DocumentKeySet } from '../model/collections';\nimport { DocumentKey } from '../model/document_key';\nimport { Mutation } from '../model/mutation';\nimport { BATCHID_UNKNOWN, MutationBatch } from '../model/mutation_batch';\nimport { ResourcePath } from '../model/path';\nimport { debugAssert, fail, hardAssert } from '../util/assert';\nimport { primitiveComparator } from '../util/misc';\nimport { SortedMap } from '../util/sorted_map';\nimport { SortedSet } from '../util/sorted_set';\nimport { decodeResourcePath } from './encoded_resource_path';\nimport { IndexManager } from './index_manager';\nimport {\n  IndexedDbPersistence,\n  IndexedDbTransaction\n} from './indexeddb_persistence';\nimport {\n  DbDocumentMutation,\n  DbDocumentMutationKey,\n  DbMutationBatch,\n  DbMutationBatchKey,\n  DbMutationQueue,\n  DbMutationQueueKey\n} from './indexeddb_schema';\nimport { LocalSerializer } from './local_serializer';\nimport { MutationQueue } from './mutation_queue';\nimport { PersistenceTransaction, ReferenceDelegate } from './persistence';\nimport { PersistencePromise } from './persistence_promise';\nimport { SimpleDbStore, SimpleDbTransaction } from './simple_db';\n\n/** A mutation queue for a specific user, backed by IndexedDB. */\nexport class IndexedDbMutationQueue implements MutationQueue {\n  /**\n   * Caches the document keys for pending mutation batches. If the mutation\n   * has been removed from IndexedDb, the cached value may continue to\n   * be used to retrieve the batch's document keys. To remove a cached value\n   * locally, `removeCachedMutationKeys()` should be invoked either directly\n   * or through `removeMutationBatches()`.\n   *\n   * With multi-tab, when the primary client acknowledges or rejects a mutation,\n   * this cache is used by secondary clients to invalidate the local\n   * view of the documents that were previously affected by the mutation.\n   */\n  // PORTING NOTE: Multi-tab only.\n  private documentKeysByBatchId = {} as { [batchId: number]: DocumentKeySet };\n\n  constructor(\n    /**\n     * The normalized userId (e.g. null UID => \"\" userId) used to store /\n     * retrieve mutations.\n     */\n    private userId: string,\n    private readonly serializer: LocalSerializer,\n    private readonly indexManager: IndexManager,\n    private readonly referenceDelegate: ReferenceDelegate\n  ) {}\n\n  /**\n   * Creates a new mutation queue for the given user.\n   * @param user The user for which to create a mutation queue.\n   * @param serializer The serializer to use when persisting to IndexedDb.\n   */\n  static forUser(\n    user: User,\n    serializer: LocalSerializer,\n    indexManager: IndexManager,\n    referenceDelegate: ReferenceDelegate\n  ): IndexedDbMutationQueue {\n    // TODO(mcg): Figure out what constraints there are on userIDs\n    // In particular, are there any reserved characters? are empty ids allowed?\n    // For the moment store these together in the same mutations table assuming\n    // that empty userIDs aren't allowed.\n    hardAssert(user.uid !== '', 'UserID must not be an empty string.');\n    const userId = user.isAuthenticated() ? user.uid! : '';\n    return new IndexedDbMutationQueue(\n      userId,\n      serializer,\n      indexManager,\n      referenceDelegate\n    );\n  }\n\n  checkEmpty(transaction: PersistenceTransaction): PersistencePromise<boolean> {\n    let empty = true;\n    const range = IDBKeyRange.bound(\n      [this.userId, Number.NEGATIVE_INFINITY],\n      [this.userId, Number.POSITIVE_INFINITY]\n    );\n    return mutationsStore(transaction)\n      .iterate(\n        { index: DbMutationBatch.userMutationsIndex, range },\n        (key, value, control) => {\n          empty = false;\n          control.done();\n        }\n      )\n      .next(() => empty);\n  }\n\n  addMutationBatch(\n    transaction: PersistenceTransaction,\n    localWriteTime: Timestamp,\n    baseMutations: Mutation[],\n    mutations: Mutation[]\n  ): PersistencePromise<MutationBatch> {\n    const documentStore = documentMutationsStore(transaction);\n    const mutationStore = mutationsStore(transaction);\n\n    // The IndexedDb implementation in Chrome (and Firefox) does not handle\n    // compound indices that include auto-generated keys correctly. To ensure\n    // that the index entry is added correctly in all browsers, we perform two\n    // writes: The first write is used to retrieve the next auto-generated Batch\n    // ID, and the second write populates the index and stores the actual\n    // mutation batch.\n    // See: https://bugs.chromium.org/p/chromium/issues/detail?id=701972\n\n    // We write an empty object to obtain key\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return mutationStore.add({} as any).next(batchId => {\n      hardAssert(\n        typeof batchId === 'number',\n        'Auto-generated key is not a number'\n      );\n\n      const batch = new MutationBatch(\n        batchId,\n        localWriteTime,\n        baseMutations,\n        mutations\n      );\n      const dbBatch = this.serializer.toDbMutationBatch(this.userId, batch);\n\n      const promises: Array<PersistencePromise<void>> = [];\n      let collectionParents = new SortedSet<ResourcePath>((l, r) =>\n        primitiveComparator(l.canonicalString(), r.canonicalString())\n      );\n      for (const mutation of mutations) {\n        const indexKey = DbDocumentMutation.key(\n          this.userId,\n          mutation.key.path,\n          batchId\n        );\n        collectionParents = collectionParents.add(mutation.key.path.popLast());\n        promises.push(mutationStore.put(dbBatch));\n        promises.push(\n          documentStore.put(indexKey, DbDocumentMutation.PLACEHOLDER)\n        );\n      }\n\n      collectionParents.forEach(parent => {\n        promises.push(\n          this.indexManager.addToCollectionParentIndex(transaction, parent)\n        );\n      });\n\n      transaction.addOnCommittedListener(() => {\n        this.documentKeysByBatchId[batchId] = batch.keys();\n      });\n\n      return PersistencePromise.waitFor(promises).next(() => batch);\n    });\n  }\n\n  lookupMutationBatch(\n    transaction: PersistenceTransaction,\n    batchId: BatchId\n  ): PersistencePromise<MutationBatch | null> {\n    return mutationsStore(transaction)\n      .get(batchId)\n      .next(dbBatch => {\n        if (dbBatch) {\n          hardAssert(\n            dbBatch.userId === this.userId,\n            `Unexpected user '${dbBatch.userId}' for mutation batch ${batchId}`\n          );\n          return this.serializer.fromDbMutationBatch(dbBatch);\n        }\n        return null;\n      });\n  }\n\n  /**\n   * Returns the document keys for the mutation batch with the given batchId.\n   * For primary clients, this method returns `null` after\n   * `removeMutationBatches()` has been called. Secondary clients return a\n   * cached result until `removeCachedMutationKeys()` is invoked.\n   */\n  // PORTING NOTE: Multi-tab only.\n  lookupMutationKeys(\n    transaction: PersistenceTransaction,\n    batchId: BatchId\n  ): PersistencePromise<DocumentKeySet | null> {\n    if (this.documentKeysByBatchId[batchId]) {\n      return PersistencePromise.resolve<DocumentKeySet | null>(\n        this.documentKeysByBatchId[batchId]\n      );\n    } else {\n      return this.lookupMutationBatch(transaction, batchId).next(batch => {\n        if (batch) {\n          const keys = batch.keys();\n          this.documentKeysByBatchId[batchId] = keys;\n          return keys;\n        } else {\n          return null;\n        }\n      });\n    }\n  }\n\n  getNextMutationBatchAfterBatchId(\n    transaction: PersistenceTransaction,\n    batchId: BatchId\n  ): PersistencePromise<MutationBatch | null> {\n    const nextBatchId = batchId + 1;\n\n    const range = IDBKeyRange.lowerBound([this.userId, nextBatchId]);\n    let foundBatch: MutationBatch | null = null;\n    return mutationsStore(transaction)\n      .iterate(\n        { index: DbMutationBatch.userMutationsIndex, range },\n        (key, dbBatch, control) => {\n          if (dbBatch.userId === this.userId) {\n            hardAssert(\n              dbBatch.batchId >= nextBatchId,\n              'Should have found mutation after ' + nextBatchId\n            );\n            foundBatch = this.serializer.fromDbMutationBatch(dbBatch);\n          }\n          control.done();\n        }\n      )\n      .next(() => foundBatch);\n  }\n\n  getHighestUnacknowledgedBatchId(\n    transaction: PersistenceTransaction\n  ): PersistencePromise<BatchId> {\n    const range = IDBKeyRange.upperBound([\n      this.userId,\n      Number.POSITIVE_INFINITY\n    ]);\n\n    let batchId = BATCHID_UNKNOWN;\n    return mutationsStore(transaction)\n      .iterate(\n        { index: DbMutationBatch.userMutationsIndex, range, reverse: true },\n        (key, dbBatch, control) => {\n          batchId = dbBatch.batchId;\n          control.done();\n        }\n      )\n      .next(() => batchId);\n  }\n\n  getAllMutationBatches(\n    transaction: PersistenceTransaction\n  ): PersistencePromise<MutationBatch[]> {\n    const range = IDBKeyRange.bound(\n      [this.userId, BATCHID_UNKNOWN],\n      [this.userId, Number.POSITIVE_INFINITY]\n    );\n    return mutationsStore(transaction)\n      .loadAll(DbMutationBatch.userMutationsIndex, range)\n      .next(dbBatches =>\n        dbBatches.map(dbBatch => this.serializer.fromDbMutationBatch(dbBatch))\n      );\n  }\n\n  getAllMutationBatchesAffectingDocumentKey(\n    transaction: PersistenceTransaction,\n    documentKey: DocumentKey\n  ): PersistencePromise<MutationBatch[]> {\n    // Scan the document-mutation index starting with a prefix starting with\n    // the given documentKey.\n    const indexPrefix = DbDocumentMutation.prefixForPath(\n      this.userId,\n      documentKey.path\n    );\n    const indexStart = IDBKeyRange.lowerBound(indexPrefix);\n\n    const results: MutationBatch[] = [];\n    return documentMutationsStore(transaction)\n      .iterate({ range: indexStart }, (indexKey, _, control) => {\n        const [userID, encodedPath, batchId] = indexKey;\n\n        // Only consider rows matching exactly the specific key of\n        // interest. Note that because we order by path first, and we\n        // order terminators before path separators, we'll encounter all\n        // the index rows for documentKey contiguously. In particular, all\n        // the rows for documentKey will occur before any rows for\n        // documents nested in a subcollection beneath documentKey so we\n        // can stop as soon as we hit any such row.\n        const path = decodeResourcePath(encodedPath);\n        if (userID !== this.userId || !documentKey.path.isEqual(path)) {\n          control.done();\n          return;\n        }\n        // Look up the mutation batch in the store.\n        return mutationsStore(transaction)\n          .get(batchId)\n          .next(mutation => {\n            if (!mutation) {\n              throw fail(\n                'Dangling document-mutation reference found: ' +\n                  indexKey +\n                  ' which points to ' +\n                  batchId\n              );\n            }\n            hardAssert(\n              mutation.userId === this.userId,\n              `Unexpected user '${mutation.userId}' for mutation batch ${batchId}`\n            );\n            results.push(this.serializer.fromDbMutationBatch(mutation));\n          });\n      })\n      .next(() => results);\n  }\n\n  getAllMutationBatchesAffectingDocumentKeys(\n    transaction: PersistenceTransaction,\n    documentKeys: SortedMap<DocumentKey, unknown>\n  ): PersistencePromise<MutationBatch[]> {\n    let uniqueBatchIDs = new SortedSet<BatchId>(primitiveComparator);\n\n    const promises: Array<PersistencePromise<void>> = [];\n    documentKeys.forEach(documentKey => {\n      const indexStart = DbDocumentMutation.prefixForPath(\n        this.userId,\n        documentKey.path\n      );\n      const range = IDBKeyRange.lowerBound(indexStart);\n\n      const promise = documentMutationsStore(transaction).iterate(\n        { range },\n        (indexKey, _, control) => {\n          const [userID, encodedPath, batchID] = indexKey;\n\n          // Only consider rows matching exactly the specific key of\n          // interest. Note that because we order by path first, and we\n          // order terminators before path separators, we'll encounter all\n          // the index rows for documentKey contiguously. In particular, all\n          // the rows for documentKey will occur before any rows for\n          // documents nested in a subcollection beneath documentKey so we\n          // can stop as soon as we hit any such row.\n          const path = decodeResourcePath(encodedPath);\n          if (userID !== this.userId || !documentKey.path.isEqual(path)) {\n            control.done();\n            return;\n          }\n\n          uniqueBatchIDs = uniqueBatchIDs.add(batchID);\n        }\n      );\n\n      promises.push(promise);\n    });\n\n    return PersistencePromise.waitFor(promises).next(() =>\n      this.lookupMutationBatches(transaction, uniqueBatchIDs)\n    );\n  }\n\n  getAllMutationBatchesAffectingQuery(\n    transaction: PersistenceTransaction,\n    query: Query\n  ): PersistencePromise<MutationBatch[]> {\n    debugAssert(\n      !query.isDocumentQuery(),\n      \"Document queries shouldn't go down this path\"\n    );\n    debugAssert(\n      !query.isCollectionGroupQuery(),\n      'CollectionGroup queries should be handled in LocalDocumentsView'\n    );\n\n    const queryPath = query.path;\n    const immediateChildrenLength = queryPath.length + 1;\n\n    // TODO(mcg): Actually implement a single-collection query\n    //\n    // This is actually executing an ancestor query, traversing the whole\n    // subtree below the collection which can be horrifically inefficient for\n    // some structures. The right way to solve this is to implement the full\n    // value index, but that's not in the cards in the near future so this is\n    // the best we can do for the moment.\n    //\n    // Since we don't yet index the actual properties in the mutations, our\n    // current approach is to just return all mutation batches that affect\n    // documents in the collection being queried.\n    const indexPrefix = DbDocumentMutation.prefixForPath(\n      this.userId,\n      queryPath\n    );\n    const indexStart = IDBKeyRange.lowerBound(indexPrefix);\n\n    // Collect up unique batchIDs encountered during a scan of the index. Use a\n    // SortedSet to accumulate batch IDs so they can be traversed in order in a\n    // scan of the main table.\n    let uniqueBatchIDs = new SortedSet<BatchId>(primitiveComparator);\n    return documentMutationsStore(transaction)\n      .iterate({ range: indexStart }, (indexKey, _, control) => {\n        const [userID, encodedPath, batchID] = indexKey;\n        const path = decodeResourcePath(encodedPath);\n        if (userID !== this.userId || !queryPath.isPrefixOf(path)) {\n          control.done();\n          return;\n        }\n        // Rows with document keys more than one segment longer than the\n        // query path can't be matches. For example, a query on 'rooms'\n        // can't match the document /rooms/abc/messages/xyx.\n        // TODO(mcg): we'll need a different scanner when we implement\n        // ancestor queries.\n        if (path.length !== immediateChildrenLength) {\n          return;\n        }\n        uniqueBatchIDs = uniqueBatchIDs.add(batchID);\n      })\n      .next(() => this.lookupMutationBatches(transaction, uniqueBatchIDs));\n  }\n\n  private lookupMutationBatches(\n    transaction: PersistenceTransaction,\n    batchIDs: SortedSet<BatchId>\n  ): PersistencePromise<MutationBatch[]> {\n    const results: MutationBatch[] = [];\n    const promises: Array<PersistencePromise<void>> = [];\n    // TODO(rockwood): Implement this using iterate.\n    batchIDs.forEach(batchId => {\n      promises.push(\n        mutationsStore(transaction)\n          .get(batchId)\n          .next(mutation => {\n            if (mutation === null) {\n              throw fail(\n                'Dangling document-mutation reference found, ' +\n                  'which points to ' +\n                  batchId\n              );\n            }\n            hardAssert(\n              mutation.userId === this.userId,\n              `Unexpected user '${mutation.userId}' for mutation batch ${batchId}`\n            );\n            results.push(this.serializer.fromDbMutationBatch(mutation));\n          })\n      );\n    });\n    return PersistencePromise.waitFor(promises).next(() => results);\n  }\n\n  removeMutationBatch(\n    transaction: PersistenceTransaction,\n    batch: MutationBatch\n  ): PersistencePromise<void> {\n    return removeMutationBatch(\n      (transaction as IndexedDbTransaction).simpleDbTransaction,\n      this.userId,\n      batch\n    ).next(removedDocuments => {\n      transaction.addOnCommittedListener(() => {\n        this.removeCachedMutationKeys(batch.batchId);\n      });\n      return PersistencePromise.forEach(\n        removedDocuments,\n        (key: DocumentKey) => {\n          return this.referenceDelegate.markPotentiallyOrphaned(\n            transaction,\n            key\n          );\n        }\n      );\n    });\n  }\n\n  /**\n   * Clears the cached keys for a mutation batch. This method should be\n   * called by secondary clients after they process mutation updates.\n   *\n   * Note that this method does not have to be called from primary clients as\n   * the corresponding cache entries are cleared when an acknowledged or\n   * rejected batch is removed from the mutation queue.\n   */\n  // PORTING NOTE: Multi-tab only\n  removeCachedMutationKeys(batchId: BatchId): void {\n    delete this.documentKeysByBatchId[batchId];\n  }\n\n  performConsistencyCheck(\n    txn: PersistenceTransaction\n  ): PersistencePromise<void> {\n    return this.checkEmpty(txn).next(empty => {\n      if (!empty) {\n        return PersistencePromise.resolve();\n      }\n\n      // Verify that there are no entries in the documentMutations index if\n      // the queue is empty.\n      const startRange = IDBKeyRange.lowerBound(\n        DbDocumentMutation.prefixForUser(this.userId)\n      );\n      const danglingMutationReferences: ResourcePath[] = [];\n      return documentMutationsStore(txn)\n        .iterate({ range: startRange }, (key, _, control) => {\n          const userID = key[0];\n          if (userID !== this.userId) {\n            control.done();\n            return;\n          } else {\n            const path = decodeResourcePath(key[1]);\n            danglingMutationReferences.push(path);\n          }\n        })\n        .next(() => {\n          hardAssert(\n            danglingMutationReferences.length === 0,\n            'Document leak -- detected dangling mutation references when queue is empty. ' +\n              'Dangling keys: ' +\n              danglingMutationReferences.map(p => p.canonicalString())\n          );\n        });\n    });\n  }\n\n  containsKey(\n    txn: PersistenceTransaction,\n    key: DocumentKey\n  ): PersistencePromise<boolean> {\n    return mutationQueueContainsKey(txn, this.userId, key);\n  }\n\n  // PORTING NOTE: Multi-tab only (state is held in memory in other clients).\n  /** Returns the mutation queue's metadata from IndexedDb. */\n  private getMutationQueueMetadata(\n    transaction: PersistenceTransaction\n  ): PersistencePromise<DbMutationQueue> {\n    return mutationQueuesStore(transaction)\n      .get(this.userId)\n      .next((metadata: DbMutationQueue | null) => {\n        return (\n          metadata ||\n          new DbMutationQueue(\n            this.userId,\n            BATCHID_UNKNOWN,\n            /*lastStreamToken=*/ ''\n          )\n        );\n      });\n  }\n}\n\n/**\n * @return true if the mutation queue for the given user contains a pending\n *         mutation for the given key.\n */\nfunction mutationQueueContainsKey(\n  txn: PersistenceTransaction,\n  userId: string,\n  key: DocumentKey\n): PersistencePromise<boolean> {\n  const indexKey = DbDocumentMutation.prefixForPath(userId, key.path);\n  const encodedPath = indexKey[1];\n  const startRange = IDBKeyRange.lowerBound(indexKey);\n  let containsKey = false;\n  return documentMutationsStore(txn)\n    .iterate({ range: startRange, keysOnly: true }, (key, value, control) => {\n      const [userID, keyPath, /*batchID*/ _] = key;\n      if (userID === userId && keyPath === encodedPath) {\n        containsKey = true;\n      }\n      control.done();\n    })\n    .next(() => containsKey);\n}\n\n/** Returns true if any mutation queue contains the given document. */\nexport function mutationQueuesContainKey(\n  txn: PersistenceTransaction,\n  docKey: DocumentKey\n): PersistencePromise<boolean> {\n  let found = false;\n  return mutationQueuesStore(txn)\n    .iterateSerial(userId => {\n      return mutationQueueContainsKey(txn, userId, docKey).next(containsKey => {\n        if (containsKey) {\n          found = true;\n        }\n        return PersistencePromise.resolve(!containsKey);\n      });\n    })\n    .next(() => found);\n}\n\n/**\n * Delete a mutation batch and the associated document mutations.\n * @return A PersistencePromise of the document mutations that were removed.\n */\nexport function removeMutationBatch(\n  txn: SimpleDbTransaction,\n  userId: string,\n  batch: MutationBatch\n): PersistencePromise<DocumentKey[]> {\n  const mutationStore = txn.store<DbMutationBatchKey, DbMutationBatch>(\n    DbMutationBatch.store\n  );\n  const indexTxn = txn.store<DbDocumentMutationKey, DbDocumentMutation>(\n    DbDocumentMutation.store\n  );\n  const promises: Array<PersistencePromise<void>> = [];\n\n  const range = IDBKeyRange.only(batch.batchId);\n  let numDeleted = 0;\n  const removePromise = mutationStore.iterate(\n    { range },\n    (key, value, control) => {\n      numDeleted++;\n      return control.delete();\n    }\n  );\n  promises.push(\n    removePromise.next(() => {\n      hardAssert(\n        numDeleted === 1,\n        'Dangling document-mutation reference found: Missing batch ' +\n          batch.batchId\n      );\n    })\n  );\n  const removedDocuments: DocumentKey[] = [];\n  for (const mutation of batch.mutations) {\n    const indexKey = DbDocumentMutation.key(\n      userId,\n      mutation.key.path,\n      batch.batchId\n    );\n    promises.push(indexTxn.delete(indexKey));\n    removedDocuments.push(mutation.key);\n  }\n  return PersistencePromise.waitFor(promises).next(() => removedDocuments);\n}\n\n/**\n * Helper to get a typed SimpleDbStore for the mutations object store.\n */\nfunction mutationsStore(\n  txn: PersistenceTransaction\n): SimpleDbStore<DbMutationBatchKey, DbMutationBatch> {\n  return IndexedDbPersistence.getStore<DbMutationBatchKey, DbMutationBatch>(\n    txn,\n    DbMutationBatch.store\n  );\n}\n\n/**\n * Helper to get a typed SimpleDbStore for the mutationQueues object store.\n */\nfunction documentMutationsStore(\n  txn: PersistenceTransaction\n): SimpleDbStore<DbDocumentMutationKey, DbDocumentMutation> {\n  return IndexedDbPersistence.getStore<\n    DbDocumentMutationKey,\n    DbDocumentMutation\n  >(txn, DbDocumentMutation.store);\n}\n\n/**\n * Helper to get a typed SimpleDbStore for the mutationQueues object store.\n */\nfunction mutationQueuesStore(\n  txn: PersistenceTransaction\n): SimpleDbStore<DbMutationQueueKey, DbMutationQueue> {\n  return IndexedDbPersistence.getStore<DbMutationQueueKey, DbMutationQueue>(\n    txn,\n    DbMutationQueue.store\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { BatchId, ListenSequenceNumber, TargetId } from '../core/types';\nimport { ResourcePath } from '../model/path';\nimport * as api from '../protos/firestore_proto_api';\nimport { hardAssert, debugAssert } from '../util/assert';\n\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { BATCHID_UNKNOWN } from '../model/mutation_batch';\nimport {\n  decodeResourcePath,\n  encodeResourcePath,\n  EncodedResourcePath\n} from './encoded_resource_path';\nimport { removeMutationBatch } from './indexeddb_mutation_queue';\nimport { dbDocumentSize } from './indexeddb_remote_document_cache';\nimport { LocalSerializer } from './local_serializer';\nimport { MemoryCollectionParentIndex } from './memory_index_manager';\nimport { PersistencePromise } from './persistence_promise';\nimport { SimpleDbSchemaConverter, SimpleDbTransaction } from './simple_db';\n\n/**\n * Schema Version for the Web client:\n * 1.  Initial version including Mutation Queue, Query Cache, and Remote\n *     Document Cache\n * 2.  Used to ensure a targetGlobal object exists and add targetCount to it. No\n *     longer required because migration 3 unconditionally clears it.\n * 3.  Dropped and re-created Query Cache to deal with cache corruption related\n *     to limbo resolution. Addresses\n *     https://github.com/firebase/firebase-ios-sdk/issues/1548\n * 4.  Multi-Tab Support.\n * 5.  Removal of held write acks.\n * 6.  Create document global for tracking document cache size.\n * 7.  Ensure every cached document has a sentinel row with a sequence number.\n * 8.  Add collection-parent index for Collection Group queries.\n * 9.  Change RemoteDocumentChanges store to be keyed by readTime rather than\n *     an auto-incrementing ID. This is required for Index-Free queries.\n * 10. Rewrite the canonical IDs to the explicit Protobuf-based format.\n */\nexport const SCHEMA_VERSION = 10;\n\n/** Performs database creation and schema upgrades. */\nexport class SchemaConverter implements SimpleDbSchemaConverter {\n  constructor(private readonly serializer: LocalSerializer) {}\n\n  /**\n   * Performs database creation and schema upgrades.\n   *\n   * Note that in production, this method is only ever used to upgrade the schema\n   * to SCHEMA_VERSION. Different values of toVersion are only used for testing\n   * and local feature development.\n   */\n  createOrUpgrade(\n    db: IDBDatabase,\n    txn: IDBTransaction,\n    fromVersion: number,\n    toVersion: number\n  ): PersistencePromise<void> {\n    hardAssert(\n      fromVersion < toVersion &&\n        fromVersion >= 0 &&\n        toVersion <= SCHEMA_VERSION,\n      `Unexpected schema upgrade from v${fromVersion} to v${toVersion}.`\n    );\n\n    const simpleDbTransaction = new SimpleDbTransaction(txn);\n\n    if (fromVersion < 1 && toVersion >= 1) {\n      createPrimaryClientStore(db);\n      createMutationQueue(db);\n      createQueryCache(db);\n      createRemoteDocumentCache(db);\n    }\n\n    // Migration 2 to populate the targetGlobal object no longer needed since\n    // migration 3 unconditionally clears it.\n\n    let p = PersistencePromise.resolve();\n    if (fromVersion < 3 && toVersion >= 3) {\n      // Brand new clients don't need to drop and recreate--only clients that\n      // potentially have corrupt data.\n      if (fromVersion !== 0) {\n        dropQueryCache(db);\n        createQueryCache(db);\n      }\n      p = p.next(() => writeEmptyTargetGlobalEntry(simpleDbTransaction));\n    }\n\n    if (fromVersion < 4 && toVersion >= 4) {\n      if (fromVersion !== 0) {\n        // Schema version 3 uses auto-generated keys to generate globally unique\n        // mutation batch IDs (this was previously ensured internally by the\n        // client). To migrate to the new schema, we have to read all mutations\n        // and write them back out. We preserve the existing batch IDs to guarantee\n        // consistency with other object stores. Any further mutation batch IDs will\n        // be auto-generated.\n        p = p.next(() =>\n          upgradeMutationBatchSchemaAndMigrateData(db, simpleDbTransaction)\n        );\n      }\n\n      p = p.next(() => {\n        createClientMetadataStore(db);\n      });\n    }\n\n    if (fromVersion < 5 && toVersion >= 5) {\n      p = p.next(() => this.removeAcknowledgedMutations(simpleDbTransaction));\n    }\n\n    if (fromVersion < 6 && toVersion >= 6) {\n      p = p.next(() => {\n        createDocumentGlobalStore(db);\n        return this.addDocumentGlobal(simpleDbTransaction);\n      });\n    }\n\n    if (fromVersion < 7 && toVersion >= 7) {\n      p = p.next(() => this.ensureSequenceNumbers(simpleDbTransaction));\n    }\n\n    if (fromVersion < 8 && toVersion >= 8) {\n      p = p.next(() =>\n        this.createCollectionParentIndex(db, simpleDbTransaction)\n      );\n    }\n\n    if (fromVersion < 9 && toVersion >= 9) {\n      p = p.next(() => {\n        // Multi-Tab used to manage its own changelog, but this has been moved\n        // to the DbRemoteDocument object store itself. Since the previous change\n        // log only contained transient data, we can drop its object store.\n        dropRemoteDocumentChangesStore(db);\n        createRemoteDocumentReadTimeIndex(txn);\n      });\n    }\n\n    if (fromVersion < 10 && toVersion >= 10) {\n      p = p.next(() => this.rewriteCanonicalIds(simpleDbTransaction));\n    }\n    return p;\n  }\n\n  private addDocumentGlobal(\n    txn: SimpleDbTransaction\n  ): PersistencePromise<void> {\n    let byteCount = 0;\n    return txn\n      .store<DbRemoteDocumentKey, DbRemoteDocument>(DbRemoteDocument.store)\n      .iterate((_, doc) => {\n        byteCount += dbDocumentSize(doc);\n      })\n      .next(() => {\n        const metadata = new DbRemoteDocumentGlobal(byteCount);\n        return txn\n          .store<DbRemoteDocumentGlobalKey, DbRemoteDocumentGlobal>(\n            DbRemoteDocumentGlobal.store\n          )\n          .put(DbRemoteDocumentGlobal.key, metadata);\n      });\n  }\n\n  private removeAcknowledgedMutations(\n    txn: SimpleDbTransaction\n  ): PersistencePromise<void> {\n    const queuesStore = txn.store<DbMutationQueueKey, DbMutationQueue>(\n      DbMutationQueue.store\n    );\n    const mutationsStore = txn.store<DbMutationBatchKey, DbMutationBatch>(\n      DbMutationBatch.store\n    );\n\n    return queuesStore.loadAll().next(queues => {\n      return PersistencePromise.forEach(queues, (queue: DbMutationQueue) => {\n        const range = IDBKeyRange.bound(\n          [queue.userId, BATCHID_UNKNOWN],\n          [queue.userId, queue.lastAcknowledgedBatchId]\n        );\n\n        return mutationsStore\n          .loadAll(DbMutationBatch.userMutationsIndex, range)\n          .next(dbBatches => {\n            return PersistencePromise.forEach(\n              dbBatches,\n              (dbBatch: DbMutationBatch) => {\n                hardAssert(\n                  dbBatch.userId === queue.userId,\n                  `Cannot process batch ${dbBatch.batchId} from unexpected user`\n                );\n                const batch = this.serializer.fromDbMutationBatch(dbBatch);\n\n                return removeMutationBatch(\n                  txn,\n                  queue.userId,\n                  batch\n                ).next(() => {});\n              }\n            );\n          });\n      });\n    });\n  }\n\n  /**\n   * Ensures that every document in the remote document cache has a corresponding sentinel row\n   * with a sequence number. Missing rows are given the most recently used sequence number.\n   */\n  private ensureSequenceNumbers(\n    txn: SimpleDbTransaction\n  ): PersistencePromise<void> {\n    const documentTargetStore = txn.store<\n      DbTargetDocumentKey,\n      DbTargetDocument\n    >(DbTargetDocument.store);\n    const documentsStore = txn.store<DbRemoteDocumentKey, DbRemoteDocument>(\n      DbRemoteDocument.store\n    );\n    const globalTargetStore = txn.store<DbTargetGlobalKey, DbTargetGlobal>(\n      DbTargetGlobal.store\n    );\n\n    return globalTargetStore.get(DbTargetGlobal.key).next(metadata => {\n      debugAssert(\n        !!metadata,\n        'Metadata should have been written during the version 3 migration'\n      );\n      const writeSentinelKey = (\n        path: ResourcePath\n      ): PersistencePromise<void> => {\n        return documentTargetStore.put(\n          new DbTargetDocument(\n            0,\n            encodeResourcePath(path),\n            metadata!.highestListenSequenceNumber!\n          )\n        );\n      };\n\n      const promises: Array<PersistencePromise<void>> = [];\n      return documentsStore\n        .iterate((key, doc) => {\n          const path = new ResourcePath(key);\n          const docSentinelKey = sentinelKey(path);\n          promises.push(\n            documentTargetStore.get(docSentinelKey).next(maybeSentinel => {\n              if (!maybeSentinel) {\n                return writeSentinelKey(path);\n              } else {\n                return PersistencePromise.resolve();\n              }\n            })\n          );\n        })\n        .next(() => PersistencePromise.waitFor(promises));\n    });\n  }\n\n  private createCollectionParentIndex(\n    db: IDBDatabase,\n    txn: SimpleDbTransaction\n  ): PersistencePromise<void> {\n    // Create the index.\n    db.createObjectStore(DbCollectionParent.store, {\n      keyPath: DbCollectionParent.keyPath\n    });\n\n    const collectionParentsStore = txn.store<\n      DbCollectionParentKey,\n      DbCollectionParent\n    >(DbCollectionParent.store);\n\n    // Helper to add an index entry iff we haven't already written it.\n    const cache = new MemoryCollectionParentIndex();\n    const addEntry = (\n      collectionPath: ResourcePath\n    ): PersistencePromise<void> | undefined => {\n      if (cache.add(collectionPath)) {\n        const collectionId = collectionPath.lastSegment();\n        const parentPath = collectionPath.popLast();\n        return collectionParentsStore.put({\n          collectionId,\n          parent: encodeResourcePath(parentPath)\n        });\n      }\n    };\n\n    // Index existing remote documents.\n    return txn\n      .store<DbRemoteDocumentKey, DbRemoteDocument>(DbRemoteDocument.store)\n      .iterate({ keysOnly: true }, (pathSegments, _) => {\n        const path = new ResourcePath(pathSegments);\n        return addEntry(path.popLast());\n      })\n      .next(() => {\n        // Index existing mutations.\n        return txn\n          .store<DbDocumentMutationKey, DbDocumentMutation>(\n            DbDocumentMutation.store\n          )\n          .iterate({ keysOnly: true }, ([userID, encodedPath, batchId], _) => {\n            const path = decodeResourcePath(encodedPath);\n            return addEntry(path.popLast());\n          });\n      });\n  }\n\n  private rewriteCanonicalIds(\n    txn: SimpleDbTransaction\n  ): PersistencePromise<void> {\n    const targetStore = txn.store<DbTargetKey, DbTarget>(DbTarget.store);\n    return targetStore.iterate((key, originalDbTarget) => {\n      const originalTargetData = this.serializer.fromDbTarget(originalDbTarget);\n      const updatedDbTarget = this.serializer.toDbTarget(originalTargetData);\n      return targetStore.put(updatedDbTarget);\n    });\n  }\n}\n\nfunction sentinelKey(path: ResourcePath): DbTargetDocumentKey {\n  return [0, encodeResourcePath(path)];\n}\n\n/**\n * Wrapper class to store timestamps (seconds and nanos) in IndexedDb objects.\n */\nexport class DbTimestamp {\n  constructor(public seconds: number, public nanoseconds: number) {}\n}\n\n/** A timestamp type that can be used in IndexedDb keys. */\nexport type DbTimestampKey = [/* seconds */ number, /* nanos */ number];\n\n// The key for the singleton object in the DbPrimaryClient is a single string.\nexport type DbPrimaryClientKey = typeof DbPrimaryClient.key;\n\n/**\n * A singleton object to be stored in the 'owner' store in IndexedDb.\n *\n * A given database can have a single primary tab assigned at a given time. That\n * tab must validate that it is still holding the primary lease before every\n * operation that requires locked access. The primary tab should regularly\n * write an updated timestamp to this lease to prevent other tabs from\n * \"stealing\" the primary lease\n */\nexport class DbPrimaryClient {\n  /**\n   * Name of the IndexedDb object store.\n   *\n   * Note that the name 'owner' is chosen to ensure backwards compatibility with\n   * older clients that only supported single locked access to the persistence\n   * layer.\n   */\n  static store = 'owner';\n\n  /**\n   * The key string used for the single object that exists in the\n   * DbPrimaryClient store.\n   */\n  static key = 'owner';\n\n  constructor(\n    public ownerId: string,\n    /** Whether to allow shared access from multiple tabs. */\n    public allowTabSynchronization: boolean,\n    public leaseTimestampMs: number\n  ) {}\n}\n\nfunction createPrimaryClientStore(db: IDBDatabase): void {\n  db.createObjectStore(DbPrimaryClient.store);\n}\n\n/** Object keys in the 'mutationQueues' store are userId strings. */\nexport type DbMutationQueueKey = string;\n\n/**\n * An object to be stored in the 'mutationQueues' store in IndexedDb.\n *\n * Each user gets a single queue of MutationBatches to apply to the server.\n * DbMutationQueue tracks the metadata about the queue.\n */\nexport class DbMutationQueue {\n  /** Name of the IndexedDb object store.  */\n  static store = 'mutationQueues';\n\n  /** Keys are automatically assigned via the userId property. */\n  static keyPath = 'userId';\n\n  constructor(\n    /**\n     * The normalized user ID to which this queue belongs.\n     */\n    public userId: string,\n    /**\n     * An identifier for the highest numbered batch that has been acknowledged\n     * by the server. All MutationBatches in this queue with batchIds less\n     * than or equal to this value are considered to have been acknowledged by\n     * the server.\n     *\n     * NOTE: this is deprecated and no longer used by the code.\n     */\n    public lastAcknowledgedBatchId: number,\n    /**\n     * A stream token that was previously sent by the server.\n     *\n     * See StreamingWriteRequest in datastore.proto for more details about\n     * usage.\n     *\n     * After sending this token, earlier tokens may not be used anymore so\n     * only a single stream token is retained.\n     *\n     * NOTE: this is deprecated and no longer used by the code.\n     */\n    public lastStreamToken: string\n  ) {}\n}\n\n/** The 'mutations' store  is keyed by batch ID. */\nexport type DbMutationBatchKey = BatchId;\n\n/**\n * An object to be stored in the 'mutations' store in IndexedDb.\n *\n * Represents a batch of user-level mutations intended to be sent to the server\n * in a single write. Each user-level batch gets a separate DbMutationBatch\n * with a new batchId.\n */\nexport class DbMutationBatch {\n  /** Name of the IndexedDb object store.  */\n  static store = 'mutations';\n\n  /** Keys are automatically assigned via the userId, batchId properties. */\n  static keyPath = 'batchId';\n\n  /** The index name for lookup of mutations by user. */\n  static userMutationsIndex = 'userMutationsIndex';\n\n  /** The user mutations index is keyed by [userId, batchId] pairs. */\n  static userMutationsKeyPath = ['userId', 'batchId'];\n\n  constructor(\n    /**\n     * The normalized user ID to which this batch belongs.\n     */\n    public userId: string,\n    /**\n     * An identifier for this batch, allocated using an auto-generated key.\n     */\n    public batchId: BatchId,\n    /**\n     * The local write time of the batch, stored as milliseconds since the\n     * epoch.\n     */\n    public localWriteTimeMs: number,\n    /**\n     * A list of \"mutations\" that represent a partial base state from when this\n     * write batch was initially created. During local application of the write\n     * batch, these baseMutations are applied prior to the real writes in order\n     * to override certain document fields from the remote document cache. This\n     * is necessary in the case of non-idempotent writes (e.g. `increment()`\n     * transforms) to make sure that the local view of the modified documents\n     * doesn't flicker if the remote document cache receives the result of the\n     * non-idempotent write before the write is removed from the queue.\n     *\n     * These mutations are never sent to the backend.\n     */\n    public baseMutations: api.Write[] | undefined,\n    /**\n     * A list of mutations to apply. All mutations will be applied atomically.\n     *\n     * Mutations are serialized via JsonProtoSerializer.toMutation().\n     */\n    public mutations: api.Write[]\n  ) {}\n}\n\n/**\n * The key for a db document mutation, which is made up of a userID, path, and\n * batchId. Note that the path must be serialized into a form that indexedDB can\n * sort.\n */\nexport type DbDocumentMutationKey = [string, EncodedResourcePath, BatchId];\n\nfunction createMutationQueue(db: IDBDatabase): void {\n  db.createObjectStore(DbMutationQueue.store, {\n    keyPath: DbMutationQueue.keyPath\n  });\n\n  const mutationBatchesStore = db.createObjectStore(DbMutationBatch.store, {\n    keyPath: DbMutationBatch.keyPath,\n    autoIncrement: true\n  });\n  mutationBatchesStore.createIndex(\n    DbMutationBatch.userMutationsIndex,\n    DbMutationBatch.userMutationsKeyPath,\n    { unique: true }\n  );\n\n  db.createObjectStore(DbDocumentMutation.store);\n}\n\n/**\n * Upgrade function to migrate the 'mutations' store from V1 to V3. Loads\n * and rewrites all data.\n */\nfunction upgradeMutationBatchSchemaAndMigrateData(\n  db: IDBDatabase,\n  txn: SimpleDbTransaction\n): PersistencePromise<void> {\n  const v1MutationsStore = txn.store<[string, number], DbMutationBatch>(\n    DbMutationBatch.store\n  );\n  return v1MutationsStore.loadAll().next(existingMutations => {\n    db.deleteObjectStore(DbMutationBatch.store);\n\n    const mutationsStore = db.createObjectStore(DbMutationBatch.store, {\n      keyPath: DbMutationBatch.keyPath,\n      autoIncrement: true\n    });\n    mutationsStore.createIndex(\n      DbMutationBatch.userMutationsIndex,\n      DbMutationBatch.userMutationsKeyPath,\n      { unique: true }\n    );\n\n    const v3MutationsStore = txn.store<DbMutationBatchKey, DbMutationBatch>(\n      DbMutationBatch.store\n    );\n    const writeAll = existingMutations.map(mutation =>\n      v3MutationsStore.put(mutation)\n    );\n\n    return PersistencePromise.waitFor(writeAll);\n  });\n}\n\n/**\n * An object to be stored in the 'documentMutations' store in IndexedDb.\n *\n * A manually maintained index of all the mutation batches that affect a given\n * document key. The rows in this table are references based on the contents of\n * DbMutationBatch.mutations.\n */\nexport class DbDocumentMutation {\n  static store = 'documentMutations';\n\n  /**\n   * Creates a [userId] key for use in the DbDocumentMutations index to iterate\n   * over all of a user's document mutations.\n   */\n  static prefixForUser(userId: string): [string] {\n    return [userId];\n  }\n\n  /**\n   * Creates a [userId, encodedPath] key for use in the DbDocumentMutations\n   * index to iterate over all at document mutations for a given path or lower.\n   */\n  static prefixForPath(\n    userId: string,\n    path: ResourcePath\n  ): [string, EncodedResourcePath] {\n    return [userId, encodeResourcePath(path)];\n  }\n\n  /**\n   * Creates a full index key of [userId, encodedPath, batchId] for inserting\n   * and deleting into the DbDocumentMutations index.\n   */\n  static key(\n    userId: string,\n    path: ResourcePath,\n    batchId: BatchId\n  ): DbDocumentMutationKey {\n    return [userId, encodeResourcePath(path), batchId];\n  }\n\n  /**\n   * Because we store all the useful information for this store in the key,\n   * there is no useful information to store as the value. The raw (unencoded)\n   * path cannot be stored because IndexedDb doesn't store prototype\n   * information.\n   */\n  static PLACEHOLDER = new DbDocumentMutation();\n\n  private constructor() {}\n}\n\n/**\n * A key in the 'remoteDocuments' object store is a string array containing the\n * segments that make up the path.\n */\nexport type DbRemoteDocumentKey = string[];\n\nfunction createRemoteDocumentCache(db: IDBDatabase): void {\n  db.createObjectStore(DbRemoteDocument.store);\n}\n\n/**\n * Represents the known absence of a document at a particular version.\n * Stored in IndexedDb as part of a DbRemoteDocument object.\n */\nexport class DbNoDocument {\n  constructor(public path: string[], public readTime: DbTimestamp) {}\n}\n\n/**\n * Represents a document that is known to exist but whose data is unknown.\n * Stored in IndexedDb as part of a DbRemoteDocument object.\n */\nexport class DbUnknownDocument {\n  constructor(public path: string[], public version: DbTimestamp) {}\n}\n\n/**\n * An object to be stored in the 'remoteDocuments' store in IndexedDb.\n * It represents either:\n *\n * - A complete document.\n * - A \"no document\" representing a document that is known not to exist (at\n * some version).\n * - An \"unknown document\" representing a document that is known to exist (at\n * some version) but whose contents are unknown.\n *\n * Note: This is the persisted equivalent of a MaybeDocument and could perhaps\n * be made more general if necessary.\n */\nexport class DbRemoteDocument {\n  static store = 'remoteDocuments';\n\n  /**\n   * An index that provides access to all entries sorted by read time (which\n   * corresponds to the last modification time of each row).\n   *\n   * This index is used to provide a changelog for Multi-Tab.\n   */\n  static readTimeIndex = 'readTimeIndex';\n\n  static readTimeIndexPath = 'readTime';\n\n  /**\n   * An index that provides access to documents in a collection sorted by read\n   * time.\n   *\n   * This index is used to allow the RemoteDocumentCache to fetch newly changed\n   * documents in a collection.\n   */\n  static collectionReadTimeIndex = 'collectionReadTimeIndex';\n\n  static collectionReadTimeIndexPath = ['parentPath', 'readTime'];\n\n  // TODO: We are currently storing full document keys almost three times\n  // (once as part of the primary key, once - partly - as `parentPath` and once\n  // inside the encoded documents). During our next migration, we should\n  // rewrite the primary key as parentPath + document ID which would allow us\n  // to drop one value.\n\n  constructor(\n    /**\n     * Set to an instance of DbUnknownDocument if the data for a document is\n     * not known, but it is known that a document exists at the specified\n     * version (e.g. it had a successful update applied to it)\n     */\n    public unknownDocument: DbUnknownDocument | null | undefined,\n    /**\n     * Set to an instance of a DbNoDocument if it is known that no document\n     * exists.\n     */\n    public noDocument: DbNoDocument | null,\n    /**\n     * Set to an instance of a Document if there's a cached version of the\n     * document.\n     */\n    public document: api.Document | null,\n    /**\n     * Documents that were written to the remote document store based on\n     * a write acknowledgment are marked with `hasCommittedMutations`. These\n     * documents are potentially inconsistent with the backend's copy and use\n     * the write's commit version as their document version.\n     */\n    public hasCommittedMutations: boolean | undefined,\n\n    /**\n     * When the document was read from the backend. Undefined for data written\n     * prior to schema version 9.\n     */\n    public readTime: DbTimestampKey | undefined,\n\n    /**\n     * The path of the collection this document is part of. Undefined for data\n     * written prior to schema version 9.\n     */\n    public parentPath: string[] | undefined\n  ) {}\n}\n\n/**\n * Contains a single entry that has metadata about the remote document cache.\n */\nexport class DbRemoteDocumentGlobal {\n  static store = 'remoteDocumentGlobal';\n\n  static key = 'remoteDocumentGlobalKey';\n\n  /**\n   * @param byteSize Approximately the total size in bytes of all the documents in the document\n   * cache.\n   */\n  constructor(public byteSize: number) {}\n}\n\nexport type DbRemoteDocumentGlobalKey = typeof DbRemoteDocumentGlobal.key;\n\nfunction createDocumentGlobalStore(db: IDBDatabase): void {\n  db.createObjectStore(DbRemoteDocumentGlobal.store);\n}\n\n/**\n * A key in the 'targets' object store is a targetId of the query.\n */\nexport type DbTargetKey = TargetId;\n\n/**\n * The persisted type for a query nested with in the 'targets' store in\n * IndexedDb. We use the proto definitions for these two kinds of queries in\n * order to avoid writing extra serialization logic.\n */\nexport type DbQuery = api.QueryTarget | api.DocumentsTarget;\n\n/**\n * An object to be stored in the 'targets' store in IndexedDb.\n *\n * This is based on and should be kept in sync with the proto used in the iOS\n * client.\n *\n * Each query the client listens to against the server is tracked on disk so\n * that the query can be efficiently resumed on restart.\n */\nexport class DbTarget {\n  static store = 'targets';\n\n  /** Keys are automatically assigned via the targetId property. */\n  static keyPath = 'targetId';\n\n  /** The name of the queryTargets index. */\n  static queryTargetsIndexName = 'queryTargetsIndex';\n\n  /**\n   * The index of all canonicalIds to the targets that they match. This is not\n   * a unique mapping because canonicalId does not promise a unique name for all\n   * possible queries, so we append the targetId to make the mapping unique.\n   */\n  static queryTargetsKeyPath = ['canonicalId', 'targetId'];\n\n  constructor(\n    /**\n     * An auto-generated sequential numeric identifier for the query.\n     *\n     * Queries are stored using their canonicalId as the key, but these\n     * canonicalIds can be quite long so we additionally assign a unique\n     * queryId which can be used by referenced data structures (e.g.\n     * indexes) to minimize the on-disk cost.\n     */\n    public targetId: TargetId,\n    /**\n     * The canonical string representing this query. This is not unique.\n     */\n    public canonicalId: string,\n    /**\n     * The last readTime received from the Watch Service for this query.\n     *\n     * This is the same value as TargetChange.read_time in the protos.\n     */\n    public readTime: DbTimestamp,\n    /**\n     * An opaque, server-assigned token that allows watching a query to be\n     * resumed after disconnecting without retransmitting all the data\n     * that matches the query. The resume token essentially identifies a\n     * point in time from which the server should resume sending results.\n     *\n     * This is related to the snapshotVersion in that the resumeToken\n     * effectively also encodes that value, but the resumeToken is opaque\n     * and sometimes encodes additional information.\n     *\n     * A consequence of this is that the resumeToken should be used when\n     * asking the server to reason about where this client is in the watch\n     * stream, but the client should use the snapshotVersion for its own\n     * purposes.\n     *\n     * This is the same value as TargetChange.resume_token in the protos.\n     */\n    public resumeToken: string,\n    /**\n     * A sequence number representing the last time this query was\n     * listened to, used for garbage collection purposes.\n     *\n     * Conventionally this would be a timestamp value, but device-local\n     * clocks are unreliable and they must be able to create new listens\n     * even while disconnected. Instead this should be a monotonically\n     * increasing number that's incremented on each listen call.\n     *\n     * This is different from the queryId since the queryId is an\n     * immutable identifier assigned to the Query on first use while\n     * lastListenSequenceNumber is updated every time the query is\n     * listened to.\n     */\n    public lastListenSequenceNumber: number,\n    /**\n     * Denotes the maximum snapshot version at which the associated query view\n     * contained no limbo documents.  Undefined for data written prior to\n     * schema version 9.\n     */\n    public lastLimboFreeSnapshotVersion: DbTimestamp | undefined,\n    /**\n     * The query for this target.\n     *\n     * Because canonical ids are not unique we must store the actual query. We\n     * use the proto to have an object we can persist without having to\n     * duplicate translation logic to and from a `Query` object.\n     */\n    public query: DbQuery\n  ) {}\n}\n\n/**\n * The key for a DbTargetDocument, containing a targetId and an encoded resource\n * path.\n */\nexport type DbTargetDocumentKey = [TargetId, EncodedResourcePath];\n\n/**\n * An object representing an association between a target and a document, or a\n * sentinel row marking the last sequence number at which a document was used.\n * Each document cached must have a corresponding sentinel row before lru\n * garbage collection is enabled.\n *\n * The target associations and sentinel rows are co-located so that orphaned\n * documents and their sequence numbers can be identified efficiently via a scan\n * of this store.\n */\nexport class DbTargetDocument {\n  /** Name of the IndexedDb object store.  */\n  static store = 'targetDocuments';\n\n  /** Keys are automatically assigned via the targetId, path properties. */\n  static keyPath = ['targetId', 'path'];\n\n  /** The index name for the reverse index. */\n  static documentTargetsIndex = 'documentTargetsIndex';\n\n  /** We also need to create the reverse index for these properties. */\n  static documentTargetsKeyPath = ['path', 'targetId'];\n\n  constructor(\n    /**\n     * The targetId identifying a target or 0 for a sentinel row.\n     */\n    public targetId: TargetId,\n    /**\n     * The path to the document, as encoded in the key.\n     */\n    public path: EncodedResourcePath,\n    /**\n     * If this is a sentinel row, this should be the sequence number of the last\n     * time the document specified by `path` was used. Otherwise, it should be\n     * `undefined`.\n     */\n    public sequenceNumber?: ListenSequenceNumber\n  ) {\n    debugAssert(\n      (targetId === 0) === (sequenceNumber !== undefined),\n      'A target-document row must either have targetId == 0 and a defined sequence number, or a non-zero targetId and no sequence number'\n    );\n  }\n}\n\n/**\n * The type to represent the single allowed key for the DbTargetGlobal store.\n */\nexport type DbTargetGlobalKey = typeof DbTargetGlobal.key;\n\n/**\n * A record of global state tracked across all Targets, tracked separately\n * to avoid the need for extra indexes.\n *\n * This should be kept in-sync with the proto used in the iOS client.\n */\nexport class DbTargetGlobal {\n  /**\n   * The key string used for the single object that exists in the\n   * DbTargetGlobal store.\n   */\n  static key = 'targetGlobalKey';\n  static store = 'targetGlobal';\n\n  constructor(\n    /**\n     * The highest numbered target id across all targets.\n     *\n     * See DbTarget.targetId.\n     */\n    public highestTargetId: TargetId,\n    /**\n     * The highest numbered lastListenSequenceNumber across all targets.\n     *\n     * See DbTarget.lastListenSequenceNumber.\n     */\n    public highestListenSequenceNumber: number,\n    /**\n     * A global snapshot version representing the last consistent snapshot we\n     * received from the backend. This is monotonically increasing and any\n     * snapshots received from the backend prior to this version (e.g. for\n     * targets resumed with a resumeToken) should be suppressed (buffered)\n     * until the backend has caught up to this snapshot version again. This\n     * prevents our cache from ever going backwards in time.\n     */\n    public lastRemoteSnapshotVersion: DbTimestamp,\n    /**\n     * The number of targets persisted.\n     */\n    public targetCount: number\n  ) {}\n}\n\n/**\n * The key for a DbCollectionParent entry, containing the collection ID\n * and the parent path that contains it. Note that the parent path will be an\n * empty path in the case of root-level collections.\n */\nexport type DbCollectionParentKey = [string, EncodedResourcePath];\n\n/**\n * An object representing an association between a Collection id (e.g. 'messages')\n * to a parent path (e.g. '/chats/123') that contains it as a (sub)collection.\n * This is used to efficiently find all collections to query when performing\n * a Collection Group query.\n */\nexport class DbCollectionParent {\n  /** Name of the IndexedDb object store. */\n  static store = 'collectionParents';\n\n  /** Keys are automatically assigned via the collectionId, parent properties. */\n  static keyPath = ['collectionId', 'parent'];\n\n  constructor(\n    /**\n     * The collectionId (e.g. 'messages')\n     */\n    public collectionId: string,\n    /**\n     * The path to the parent (either a document location or an empty path for\n     * a root-level collection).\n     */\n    public parent: EncodedResourcePath\n  ) {}\n}\n\nfunction createQueryCache(db: IDBDatabase): void {\n  const targetDocumentsStore = db.createObjectStore(DbTargetDocument.store, {\n    keyPath: DbTargetDocument.keyPath\n  });\n  targetDocumentsStore.createIndex(\n    DbTargetDocument.documentTargetsIndex,\n    DbTargetDocument.documentTargetsKeyPath,\n    { unique: true }\n  );\n\n  const targetStore = db.createObjectStore(DbTarget.store, {\n    keyPath: DbTarget.keyPath\n  });\n\n  // NOTE: This is unique only because the TargetId is the suffix.\n  targetStore.createIndex(\n    DbTarget.queryTargetsIndexName,\n    DbTarget.queryTargetsKeyPath,\n    { unique: true }\n  );\n  db.createObjectStore(DbTargetGlobal.store);\n}\n\nfunction dropQueryCache(db: IDBDatabase): void {\n  db.deleteObjectStore(DbTargetDocument.store);\n  db.deleteObjectStore(DbTarget.store);\n  db.deleteObjectStore(DbTargetGlobal.store);\n}\n\nfunction dropRemoteDocumentChangesStore(db: IDBDatabase): void {\n  if (db.objectStoreNames.contains('remoteDocumentChanges')) {\n    db.deleteObjectStore('remoteDocumentChanges');\n  }\n}\n\n/**\n * Creates the target global singleton row.\n *\n * @param {IDBTransaction} txn The version upgrade transaction for indexeddb\n */\nfunction writeEmptyTargetGlobalEntry(\n  txn: SimpleDbTransaction\n): PersistencePromise<void> {\n  const globalStore = txn.store<DbTargetGlobalKey, DbTargetGlobal>(\n    DbTargetGlobal.store\n  );\n  const metadata = new DbTargetGlobal(\n    /*highestTargetId=*/ 0,\n    /*lastListenSequenceNumber=*/ 0,\n    SnapshotVersion.min().toTimestamp(),\n    /*targetCount=*/ 0\n  );\n  return globalStore.put(DbTargetGlobal.key, metadata);\n}\n\n/**\n * Creates indices on the RemoteDocuments store used for both multi-tab\n * and Index-Free queries.\n */\nfunction createRemoteDocumentReadTimeIndex(txn: IDBTransaction): void {\n  const remoteDocumentStore = txn.objectStore(DbRemoteDocument.store);\n  remoteDocumentStore.createIndex(\n    DbRemoteDocument.readTimeIndex,\n    DbRemoteDocument.readTimeIndexPath,\n    { unique: false }\n  );\n  remoteDocumentStore.createIndex(\n    DbRemoteDocument.collectionReadTimeIndex,\n    DbRemoteDocument.collectionReadTimeIndexPath,\n    { unique: false }\n  );\n}\n\n/**\n * A record of the metadata state of each client.\n *\n * PORTING NOTE: This is used to synchronize multi-tab state and does not need\n * to be ported to iOS or Android.\n */\nexport class DbClientMetadata {\n  /** Name of the IndexedDb object store. */\n  static store = 'clientMetadata';\n\n  /** Keys are automatically assigned via the clientId properties. */\n  static keyPath = 'clientId';\n\n  constructor(\n    // Note: Previous schema versions included a field\n    // \"lastProcessedDocumentChangeId\". Don't use anymore.\n\n    /** The auto-generated client id assigned at client startup. */\n    public clientId: string,\n    /** The last time this state was updated. */\n    public updateTimeMs: number,\n    /** Whether the client's network connection is enabled. */\n    public networkEnabled: boolean,\n    /** Whether this client is running in a foreground tab. */\n    public inForeground: boolean\n  ) {}\n}\n\n/** Object keys in the 'clientMetadata' store are clientId strings. */\nexport type DbClientMetadataKey = string;\n\nfunction createClientMetadataStore(db: IDBDatabase): void {\n  db.createObjectStore(DbClientMetadata.store, {\n    keyPath: DbClientMetadata.keyPath\n  });\n}\n\n// Visible for testing\nexport const V1_STORES = [\n  DbMutationQueue.store,\n  DbMutationBatch.store,\n  DbDocumentMutation.store,\n  DbRemoteDocument.store,\n  DbTarget.store,\n  DbPrimaryClient.store,\n  DbTargetGlobal.store,\n  DbTargetDocument.store\n];\n\n// V2 is no longer usable (see comment at top of file)\n\n// Visible for testing\nexport const V3_STORES = V1_STORES;\n\n// Visible for testing\n// Note: DbRemoteDocumentChanges is no longer used and dropped with v9.\nexport const V4_STORES = [...V3_STORES, DbClientMetadata.store];\n\n// V5 does not change the set of stores.\n\nexport const V6_STORES = [...V4_STORES, DbRemoteDocumentGlobal.store];\n\n// V7 does not change the set of stores.\n\nexport const V8_STORES = [...V6_STORES, DbCollectionParent.store];\n\n// V9 does not change the set of stores.\n\n// V10 does not change the set of stores.\n\n/**\n * The list of all default IndexedDB stores used throughout the SDK. This is\n * used when creating transactions so that access across all stores is done\n * atomically.\n */\nexport const ALL_STORES = V8_STORES;\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getUA } from '@firebase/util';\nimport { debugAssert } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\nimport { logDebug, logError } from '../util/log';\nimport { Deferred } from '../util/promise';\nimport { SCHEMA_VERSION } from './indexeddb_schema';\nimport { PersistencePromise } from './persistence_promise';\n\n// References to `window` are guarded by SimpleDb.isAvailable()\n/* eslint-disable no-restricted-globals */\n\nconst LOG_TAG = 'SimpleDb';\n\n/**\n * The maximum number of retry attempts for an IndexedDb transaction that fails\n * with a DOMException.\n */\nconst TRANSACTION_RETRY_COUNT = 3;\n\n// The different modes supported by `SimpleDb.runTransaction()`\ntype SimpleDbTransactionMode = 'readonly' | 'readwrite';\n\nexport interface SimpleDbSchemaConverter {\n  createOrUpgrade(\n    db: IDBDatabase,\n    txn: IDBTransaction,\n    fromVersion: number,\n    toVersion: number\n  ): PersistencePromise<void>;\n}\n\n/**\n * Provides a wrapper around IndexedDb with a simplified interface that uses\n * Promise-like return values to chain operations. Real promises cannot be used\n * since .then() continuations are executed asynchronously (e.g. via\n * .setImmediate), which would cause IndexedDB to end the transaction.\n * See PersistencePromise for more details.\n */\nexport class SimpleDb {\n  /**\n   * Opens the specified database, creating or upgrading it if necessary.\n   *\n   * Note that `version` must not be a downgrade. IndexedDB does not support downgrading the schema\n   * version. We currently do not support any way to do versioning outside of IndexedDB's versioning\n   * mechanism, as only version-upgrade transactions are allowed to do things like create\n   * objectstores.\n   */\n  static openOrCreate(\n    name: string,\n    version: number,\n    schemaConverter: SimpleDbSchemaConverter\n  ): Promise<SimpleDb> {\n    debugAssert(\n      SimpleDb.isAvailable(),\n      'IndexedDB not supported in current environment.'\n    );\n    logDebug(LOG_TAG, 'Opening database:', name);\n    return new PersistencePromise<SimpleDb>((resolve, reject) => {\n      // TODO(mikelehen): Investigate browser compatibility.\n      // https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API/Using_IndexedDB\n      // suggests IE9 and older WebKit browsers handle upgrade\n      // differently. They expect setVersion, as described here:\n      // https://developer.mozilla.org/en-US/docs/Web/API/IDBVersionChangeRequest/setVersion\n      const request = indexedDB.open(name, version);\n\n      request.onsuccess = (event: Event) => {\n        const db = (event.target as IDBOpenDBRequest).result;\n        resolve(new SimpleDb(db));\n      };\n\n      request.onblocked = () => {\n        reject(\n          new FirestoreError(\n            Code.FAILED_PRECONDITION,\n            'Cannot upgrade IndexedDB schema while another tab is open. ' +\n              'Close all tabs that access Firestore and reload this page to proceed.'\n          )\n        );\n      };\n\n      request.onerror = (event: Event) => {\n        const error: DOMException = (event.target as IDBOpenDBRequest).error!;\n        if (error.name === 'VersionError') {\n          reject(\n            new FirestoreError(\n              Code.FAILED_PRECONDITION,\n              'A newer version of the Firestore SDK was previously used and so the persisted ' +\n                'data is not compatible with the version of the SDK you are now using. The SDK ' +\n                'will operate with persistence disabled. If you need persistence, please ' +\n                're-upgrade to a newer version of the SDK or else clear the persisted IndexedDB ' +\n                'data for your app to start fresh.'\n            )\n          );\n        } else {\n          reject(error);\n        }\n      };\n\n      request.onupgradeneeded = (event: IDBVersionChangeEvent) => {\n        logDebug(\n          LOG_TAG,\n          'Database \"' + name + '\" requires upgrade from version:',\n          event.oldVersion\n        );\n        const db = (event.target as IDBOpenDBRequest).result;\n        schemaConverter\n          .createOrUpgrade(\n            db,\n            request.transaction!,\n            event.oldVersion,\n            SCHEMA_VERSION\n          )\n          .next(() => {\n            logDebug(\n              LOG_TAG,\n              'Database upgrade to version ' + SCHEMA_VERSION + ' complete'\n            );\n          });\n      };\n    }).toPromise();\n  }\n\n  /** Deletes the specified database. */\n  static delete(name: string): Promise<void> {\n    logDebug(LOG_TAG, 'Removing database:', name);\n    return wrapRequest<void>(window.indexedDB.deleteDatabase(name)).toPromise();\n  }\n\n  /** Returns true if IndexedDB is available in the current environment. */\n  static isAvailable(): boolean {\n    if (typeof indexedDB === 'undefined') {\n      return false;\n    }\n\n    if (SimpleDb.isMockPersistence()) {\n      return true;\n    }\n\n    // We extensively use indexed array values and compound keys,\n    // which IE and Edge do not support. However, they still have indexedDB\n    // defined on the window, so we need to check for them here and make sure\n    // to return that persistence is not enabled for those browsers.\n    // For tracking support of this feature, see here:\n    // https://developer.microsoft.com/en-us/microsoft-edge/platform/status/indexeddbarraysandmultientrysupport/\n\n    // Check the UA string to find out the browser.\n    const ua = getUA();\n\n    // IE 10\n    // ua = 'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; Trident/6.0)';\n\n    // IE 11\n    // ua = 'Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko';\n\n    // Edge\n    // ua = 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML,\n    // like Gecko) Chrome/39.0.2171.71 Safari/537.36 Edge/12.0';\n\n    // iOS Safari: Disable for users running iOS version < 10.\n    const iOSVersion = SimpleDb.getIOSVersion(ua);\n    const isUnsupportedIOS = 0 < iOSVersion && iOSVersion < 10;\n\n    // Android browser: Disable for userse running version < 4.5.\n    const androidVersion = SimpleDb.getAndroidVersion(ua);\n    const isUnsupportedAndroid = 0 < androidVersion && androidVersion < 4.5;\n\n    if (\n      ua.indexOf('MSIE ') > 0 ||\n      ua.indexOf('Trident/') > 0 ||\n      ua.indexOf('Edge/') > 0 ||\n      isUnsupportedIOS ||\n      isUnsupportedAndroid\n    ) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  /**\n   * Returns true if the backing IndexedDB store is the Node IndexedDBShim\n   * (see https://github.com/axemclion/IndexedDBShim).\n   */\n  static isMockPersistence(): boolean {\n    return (\n      typeof process !== 'undefined' &&\n      process.env?.USE_MOCK_PERSISTENCE === 'YES'\n    );\n  }\n\n  /** Helper to get a typed SimpleDbStore from a transaction. */\n  static getStore<KeyType extends IDBValidKey, ValueType extends unknown>(\n    txn: SimpleDbTransaction,\n    store: string\n  ): SimpleDbStore<KeyType, ValueType> {\n    return txn.store<KeyType, ValueType>(store);\n  }\n\n  // visible for testing\n  /** Parse User Agent to determine iOS version. Returns -1 if not found. */\n  static getIOSVersion(ua: string): number {\n    const iOSVersionRegex = ua.match(/i(?:phone|pad|pod) os ([\\d_]+)/i);\n    const version = iOSVersionRegex\n      ? iOSVersionRegex[1]\n          .split('_')\n          .slice(0, 2)\n          .join('.')\n      : '-1';\n    return Number(version);\n  }\n\n  // visible for testing\n  /** Parse User Agent to determine Android version. Returns -1 if not found. */\n  static getAndroidVersion(ua: string): number {\n    const androidVersionRegex = ua.match(/Android ([\\d.]+)/i);\n    const version = androidVersionRegex\n      ? androidVersionRegex[1]\n          .split('.')\n          .slice(0, 2)\n          .join('.')\n      : '-1';\n    return Number(version);\n  }\n\n  constructor(private db: IDBDatabase) {\n    const iOSVersion = SimpleDb.getIOSVersion(getUA());\n    // NOTE: According to https://bugs.webkit.org/show_bug.cgi?id=197050, the\n    // bug we're checking for should exist in iOS >= 12.2 and < 13, but for\n    // whatever reason it's much harder to hit after 12.2 so we only proactively\n    // log on 12.2.\n    if (iOSVersion === 12.2) {\n      logError(\n        'Firestore persistence suffers from a bug in iOS 12.2 ' +\n          'Safari that may cause your app to stop working. See ' +\n          'https://stackoverflow.com/q/56496296/110915 for details ' +\n          'and a potential workaround.'\n      );\n    }\n  }\n\n  setVersionChangeListener(\n    versionChangeListener: (event: IDBVersionChangeEvent) => void\n  ): void {\n    this.db.onversionchange = (event: IDBVersionChangeEvent) => {\n      return versionChangeListener(event);\n    };\n  }\n\n  async runTransaction<T>(\n    mode: SimpleDbTransactionMode,\n    objectStores: string[],\n    transactionFn: (transaction: SimpleDbTransaction) => PersistencePromise<T>\n  ): Promise<T> {\n    const readonly = mode === 'readonly';\n    let attemptNumber = 0;\n\n    while (true) {\n      ++attemptNumber;\n\n      const transaction = SimpleDbTransaction.open(\n        this.db,\n        readonly ? 'readonly' : 'readwrite',\n        objectStores\n      );\n      try {\n        const transactionFnResult = transactionFn(transaction)\n          .catch(error => {\n            // Abort the transaction if there was an error.\n            transaction.abort(error);\n            // We cannot actually recover, and calling `abort()` will cause the transaction's\n            // completion promise to be rejected. This in turn means that we won't use\n            // `transactionFnResult` below. We return a rejection here so that we don't add the\n            // possibility of returning `void` to the type of `transactionFnResult`.\n            return PersistencePromise.reject<T>(error);\n          })\n          .toPromise();\n\n        // As noted above, errors are propagated by aborting the transaction. So\n        // we swallow any error here to avoid the browser logging it as unhandled.\n        transactionFnResult.catch(() => {});\n\n        // Wait for the transaction to complete (i.e. IndexedDb's onsuccess event to\n        // fire), but still return the original transactionFnResult back to the\n        // caller.\n        await transaction.completionPromise;\n        return transactionFnResult;\n      } catch (error) {\n        // TODO(schmidt-sebastian): We could probably be smarter about this and\n        // not retry exceptions that are likely unrecoverable (such as quota\n        // exceeded errors).\n\n        // Note: We cannot use an instanceof check for FirestoreException, since the\n        // exception is wrapped in a generic error by our async/await handling.\n        const retryable =\n          error.name !== 'FirebaseError' &&\n          attemptNumber < TRANSACTION_RETRY_COUNT;\n        logDebug(\n          LOG_TAG,\n          'Transaction failed with error: %s. Retrying: %s.',\n          error.message,\n          retryable\n        );\n\n        if (!retryable) {\n          return Promise.reject(error);\n        }\n      }\n    }\n  }\n\n  close(): void {\n    this.db.close();\n  }\n}\n\n/**\n * A controller for iterating over a key range or index. It allows an iterate\n * callback to delete the currently-referenced object, or jump to a new key\n * within the key range or index.\n */\nexport class IterationController {\n  private shouldStop = false;\n  private nextKey: IDBValidKey | null = null;\n\n  constructor(private dbCursor: IDBCursorWithValue) {}\n\n  get isDone(): boolean {\n    return this.shouldStop;\n  }\n\n  get skipToKey(): IDBValidKey | null {\n    return this.nextKey;\n  }\n\n  set cursor(value: IDBCursorWithValue) {\n    this.dbCursor = value;\n  }\n\n  /**\n   * This function can be called to stop iteration at any point.\n   */\n  done(): void {\n    this.shouldStop = true;\n  }\n\n  /**\n   * This function can be called to skip to that next key, which could be\n   * an index or a primary key.\n   */\n  skip(key: IDBValidKey): void {\n    this.nextKey = key;\n  }\n\n  /**\n   * Delete the current cursor value from the object store.\n   *\n   * NOTE: You CANNOT do this with a keysOnly query.\n   */\n  delete(): PersistencePromise<void> {\n    return wrapRequest<void>(this.dbCursor.delete());\n  }\n}\n\n/**\n * Callback used with iterate() method.\n */\nexport type IterateCallback<KeyType, ValueType> = (\n  key: KeyType,\n  value: ValueType,\n  control: IterationController\n) => void | PersistencePromise<void>;\n\n/** Options available to the iterate() method. */\nexport interface IterateOptions {\n  /** Index to iterate over (else primary keys will be iterated) */\n  index?: string;\n\n  /** IndxedDB Range to iterate over (else entire store will be iterated) */\n  range?: IDBKeyRange;\n\n  /** If true, values aren't read while iterating. */\n  keysOnly?: boolean;\n\n  /** If true, iterate over the store in reverse. */\n  reverse?: boolean;\n}\n\n/** An error that wraps exceptions that thrown during IndexedDB execution. */\nexport class IndexedDbTransactionError extends FirestoreError {\n  name = 'IndexedDbTransactionError';\n\n  constructor(cause: Error) {\n    super(Code.UNAVAILABLE, 'IndexedDB transaction failed: ' + cause);\n  }\n}\n\n/** Verifies whether `e` is an IndexedDbTransactionError. */\nexport function isIndexedDbTransactionError(e: Error): boolean {\n  // Use name equality, as instanceof checks on errors don't work with errors\n  // that wrap other errors.\n  return e.name === 'IndexedDbTransactionError';\n}\n\n/**\n * Wraps an IDBTransaction and exposes a store() method to get a handle to a\n * specific object store.\n */\nexport class SimpleDbTransaction {\n  private aborted = false;\n\n  /**\n   * A promise that resolves with the result of the IndexedDb transaction.\n   */\n  private readonly completionDeferred = new Deferred<void>();\n\n  static open(\n    db: IDBDatabase,\n    mode: IDBTransactionMode,\n    objectStoreNames: string[]\n  ): SimpleDbTransaction {\n    return new SimpleDbTransaction(db.transaction(objectStoreNames, mode));\n  }\n\n  constructor(private readonly transaction: IDBTransaction) {\n    this.transaction.oncomplete = () => {\n      this.completionDeferred.resolve();\n    };\n    this.transaction.onabort = () => {\n      if (transaction.error) {\n        this.completionDeferred.reject(\n          new IndexedDbTransactionError(transaction.error)\n        );\n      } else {\n        this.completionDeferred.resolve();\n      }\n    };\n    this.transaction.onerror = (event: Event) => {\n      const error = checkForAndReportiOSError(\n        (event.target as IDBRequest).error!\n      );\n      this.completionDeferred.reject(new IndexedDbTransactionError(error));\n    };\n  }\n\n  get completionPromise(): Promise<void> {\n    return this.completionDeferred.promise;\n  }\n\n  abort(error?: Error): void {\n    if (error) {\n      this.completionDeferred.reject(error);\n    }\n\n    if (!this.aborted) {\n      logDebug(\n        LOG_TAG,\n        'Aborting transaction:',\n        error ? error.message : 'Client-initiated abort'\n      );\n      this.aborted = true;\n      this.transaction.abort();\n    }\n  }\n\n  /**\n   * Returns a SimpleDbStore<KeyType, ValueType> for the specified store. All\n   * operations performed on the SimpleDbStore happen within the context of this\n   * transaction and it cannot be used anymore once the transaction is\n   * completed.\n   *\n   * Note that we can't actually enforce that the KeyType and ValueType are\n   * correct, but they allow type safety through the rest of the consuming code.\n   */\n  store<KeyType extends IDBValidKey, ValueType extends unknown>(\n    storeName: string\n  ): SimpleDbStore<KeyType, ValueType> {\n    const store = this.transaction.objectStore(storeName);\n    debugAssert(!!store, 'Object store not part of transaction: ' + storeName);\n    return new SimpleDbStore<KeyType, ValueType>(store);\n  }\n}\n\n/**\n * A wrapper around an IDBObjectStore providing an API that:\n *\n * 1) Has generic KeyType / ValueType parameters to provide strongly-typed\n * methods for acting against the object store.\n * 2) Deals with IndexedDB's onsuccess / onerror event callbacks, making every\n * method return a PersistencePromise instead.\n * 3) Provides a higher-level API to avoid needing to do excessive wrapping of\n * intermediate IndexedDB types (IDBCursorWithValue, etc.)\n */\nexport class SimpleDbStore<\n  KeyType extends IDBValidKey,\n  ValueType extends unknown\n> {\n  constructor(private store: IDBObjectStore) {}\n\n  /**\n   * Writes a value into the Object Store.\n   *\n   * @param key Optional explicit key to use when writing the object, else the\n   * key will be auto-assigned (e.g. via the defined keyPath for the store).\n   * @param value The object to write.\n   */\n  put(value: ValueType): PersistencePromise<void>;\n  put(key: KeyType, value: ValueType): PersistencePromise<void>;\n  put(\n    keyOrValue: KeyType | ValueType,\n    value?: ValueType\n  ): PersistencePromise<void> {\n    let request;\n    if (value !== undefined) {\n      logDebug(LOG_TAG, 'PUT', this.store.name, keyOrValue, value);\n      request = this.store.put(value, keyOrValue as KeyType);\n    } else {\n      logDebug(LOG_TAG, 'PUT', this.store.name, '<auto-key>', keyOrValue);\n      request = this.store.put(keyOrValue as ValueType);\n    }\n    return wrapRequest<void>(request);\n  }\n\n  /**\n   * Adds a new value into an Object Store and returns the new key. Similar to\n   * IndexedDb's `add()`, this method will fail on primary key collisions.\n   *\n   * @param value The object to write.\n   * @return The key of the value to add.\n   */\n  add(value: ValueType): PersistencePromise<KeyType> {\n    logDebug(LOG_TAG, 'ADD', this.store.name, value, value);\n    const request = this.store.add(value as ValueType);\n    return wrapRequest<KeyType>(request);\n  }\n\n  /**\n   * Gets the object with the specified key from the specified store, or null\n   * if no object exists with the specified key.\n   *\n   * @key The key of the object to get.\n   * @return The object with the specified key or null if no object exists.\n   */\n  get(key: KeyType): PersistencePromise<ValueType | null> {\n    const request = this.store.get(key);\n    // We're doing an unsafe cast to ValueType.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return wrapRequest<any>(request).next(result => {\n      // Normalize nonexistence to null.\n      if (result === undefined) {\n        result = null;\n      }\n      logDebug(LOG_TAG, 'GET', this.store.name, key, result);\n      return result;\n    });\n  }\n\n  delete(key: KeyType | IDBKeyRange): PersistencePromise<void> {\n    logDebug(LOG_TAG, 'DELETE', this.store.name, key);\n    const request = this.store.delete(key);\n    return wrapRequest<void>(request);\n  }\n\n  /**\n   * If we ever need more of the count variants, we can add overloads. For now,\n   * all we need is to count everything in a store.\n   *\n   * Returns the number of rows in the store.\n   */\n  count(): PersistencePromise<number> {\n    logDebug(LOG_TAG, 'COUNT', this.store.name);\n    const request = this.store.count();\n    return wrapRequest<number>(request);\n  }\n\n  loadAll(): PersistencePromise<ValueType[]>;\n  loadAll(range: IDBKeyRange): PersistencePromise<ValueType[]>;\n  loadAll(index: string, range: IDBKeyRange): PersistencePromise<ValueType[]>;\n  loadAll(\n    indexOrRange?: string | IDBKeyRange,\n    range?: IDBKeyRange\n  ): PersistencePromise<ValueType[]> {\n    const cursor = this.cursor(this.options(indexOrRange, range));\n    const results: ValueType[] = [];\n    return this.iterateCursor(cursor, (key, value) => {\n      results.push(value);\n    }).next(() => {\n      return results;\n    });\n  }\n\n  deleteAll(): PersistencePromise<void>;\n  deleteAll(range: IDBKeyRange): PersistencePromise<void>;\n  deleteAll(index: string, range: IDBKeyRange): PersistencePromise<void>;\n  deleteAll(\n    indexOrRange?: string | IDBKeyRange,\n    range?: IDBKeyRange\n  ): PersistencePromise<void> {\n    logDebug(LOG_TAG, 'DELETE ALL', this.store.name);\n    const options = this.options(indexOrRange, range);\n    options.keysOnly = false;\n    const cursor = this.cursor(options);\n    return this.iterateCursor(cursor, (key, value, control) => {\n      // NOTE: Calling delete() on a cursor is documented as more efficient than\n      // calling delete() on an object store with a single key\n      // (https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/delete),\n      // however, this requires us *not* to use a keysOnly cursor\n      // (https://developer.mozilla.org/en-US/docs/Web/API/IDBCursor/delete). We\n      // may want to compare the performance of each method.\n      return control.delete();\n    });\n  }\n\n  /**\n   * Iterates over keys and values in an object store.\n   *\n   * @param options Options specifying how to iterate the objects in the store.\n   * @param callback will be called for each iterated object. Iteration can be\n   * canceled at any point by calling the doneFn passed to the callback.\n   * The callback can return a PersistencePromise if it performs async\n   * operations but note that iteration will continue without waiting for them\n   * to complete.\n   * @returns A PersistencePromise that resolves once all PersistencePromises\n   * returned by callbacks resolve.\n   */\n  iterate(\n    callback: IterateCallback<KeyType, ValueType>\n  ): PersistencePromise<void>;\n  iterate(\n    options: IterateOptions,\n    callback: IterateCallback<KeyType, ValueType>\n  ): PersistencePromise<void>;\n  iterate(\n    optionsOrCallback: IterateOptions | IterateCallback<KeyType, ValueType>,\n    callback?: IterateCallback<KeyType, ValueType>\n  ): PersistencePromise<void> {\n    let options;\n    if (!callback) {\n      options = {};\n      callback = optionsOrCallback as IterateCallback<KeyType, ValueType>;\n    } else {\n      options = optionsOrCallback as IterateOptions;\n    }\n    const cursor = this.cursor(options);\n    return this.iterateCursor(cursor, callback);\n  }\n\n  /**\n   * Iterates over a store, but waits for the given callback to complete for\n   * each entry before iterating the next entry. This allows the callback to do\n   * asynchronous work to determine if this iteration should continue.\n   *\n   * The provided callback should return `true` to continue iteration, and\n   * `false` otherwise.\n   */\n  iterateSerial(\n    callback: (k: KeyType, v: ValueType) => PersistencePromise<boolean>\n  ): PersistencePromise<void> {\n    const cursorRequest = this.cursor({});\n    return new PersistencePromise((resolve, reject) => {\n      cursorRequest.onerror = (event: Event) => {\n        const error = checkForAndReportiOSError(\n          (event.target as IDBRequest).error!\n        );\n        reject(error);\n      };\n      cursorRequest.onsuccess = (event: Event) => {\n        const cursor: IDBCursorWithValue = (event.target as IDBRequest).result;\n        if (!cursor) {\n          resolve();\n          return;\n        }\n\n        callback(cursor.primaryKey as KeyType, cursor.value).next(\n          shouldContinue => {\n            if (shouldContinue) {\n              cursor.continue();\n            } else {\n              resolve();\n            }\n          }\n        );\n      };\n    });\n  }\n\n  private iterateCursor(\n    cursorRequest: IDBRequest,\n    fn: IterateCallback<KeyType, ValueType>\n  ): PersistencePromise<void> {\n    const results: Array<PersistencePromise<void>> = [];\n    return new PersistencePromise((resolve, reject) => {\n      cursorRequest.onerror = (event: Event) => {\n        reject((event.target as IDBRequest).error!);\n      };\n      cursorRequest.onsuccess = (event: Event) => {\n        const cursor: IDBCursorWithValue = (event.target as IDBRequest).result;\n        if (!cursor) {\n          resolve();\n          return;\n        }\n        const controller = new IterationController(cursor);\n        const userResult = fn(\n          cursor.primaryKey as KeyType,\n          cursor.value,\n          controller\n        );\n        if (userResult instanceof PersistencePromise) {\n          const userPromise: PersistencePromise<void> = userResult.catch(\n            err => {\n              controller.done();\n              return PersistencePromise.reject(err);\n            }\n          );\n          results.push(userPromise);\n        }\n        if (controller.isDone) {\n          resolve();\n        } else if (controller.skipToKey === null) {\n          cursor.continue();\n        } else {\n          cursor.continue(controller.skipToKey);\n        }\n      };\n    }).next(() => {\n      return PersistencePromise.waitFor(results);\n    });\n  }\n\n  private options(\n    indexOrRange?: string | IDBKeyRange,\n    range?: IDBKeyRange\n  ): IterateOptions {\n    let indexName: string | undefined = undefined;\n    if (indexOrRange !== undefined) {\n      if (typeof indexOrRange === 'string') {\n        indexName = indexOrRange;\n      } else {\n        debugAssert(\n          range === undefined,\n          '3rd argument must not be defined if 2nd is a range.'\n        );\n        range = indexOrRange;\n      }\n    }\n    return { index: indexName, range };\n  }\n\n  private cursor(options: IterateOptions): IDBRequest {\n    let direction: IDBCursorDirection = 'next';\n    if (options.reverse) {\n      direction = 'prev';\n    }\n    if (options.index) {\n      const index = this.store.index(options.index);\n      if (options.keysOnly) {\n        return index.openKeyCursor(options.range, direction);\n      } else {\n        return index.openCursor(options.range, direction);\n      }\n    } else {\n      return this.store.openCursor(options.range, direction);\n    }\n  }\n}\n\n/**\n * Wraps an IDBRequest in a PersistencePromise, using the onsuccess / onerror\n * handlers to resolve / reject the PersistencePromise as appropriate.\n */\nfunction wrapRequest<R>(request: IDBRequest): PersistencePromise<R> {\n  return new PersistencePromise<R>((resolve, reject) => {\n    request.onsuccess = (event: Event) => {\n      const result = (event.target as IDBRequest).result;\n      resolve(result);\n    };\n\n    request.onerror = (event: Event) => {\n      const error = checkForAndReportiOSError(\n        (event.target as IDBRequest).error!\n      );\n      reject(error);\n    };\n  });\n}\n\n// Guard so we only report the error once.\nlet reportedIOSError = false;\nfunction checkForAndReportiOSError(error: DOMException): Error {\n  const iOSVersion = SimpleDb.getIOSVersion(getUA());\n  if (iOSVersion >= 12.2 && iOSVersion < 13) {\n    const IOS_ERROR =\n      'An internal error was encountered in the Indexed Database server';\n    if (error.message.indexOf(IOS_ERROR) >= 0) {\n      // Wrap error in a more descriptive one.\n      const newError = new FirestoreError(\n        'internal',\n        `IOS_INDEXEDDB_BUG1: IndexedDb has thrown '${IOS_ERROR}'. This is likely ` +\n          `due to an unavoidable bug in iOS. See https://stackoverflow.com/q/56496296/110915 ` +\n          `for details and a potential workaround.`\n      );\n      if (!reportedIOSError) {\n        reportedIOSError = true;\n        // Throw a global exception outside of this promise chain, for the user to\n        // potentially catch.\n        setTimeout(() => {\n          throw newError;\n        }, 0);\n      }\n      return newError;\n    }\n  }\n  return error;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { debugAssert, fail } from './assert';\nimport { Code, FirestoreError } from './error';\nimport { logDebug, logError } from './log';\nimport { Deferred } from './promise';\nimport { ExponentialBackoff } from '../remote/backoff';\nimport { PlatformSupport } from '../platform/platform';\nimport { isIndexedDbTransactionError } from '../local/simple_db';\n\nconst LOG_TAG = 'AsyncQueue';\n\n// Accept any return type from setTimeout().\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype TimerHandle = any;\n\n/**\n * Wellknown \"timer\" IDs used when scheduling delayed operations on the\n * AsyncQueue. These IDs can then be used from tests to check for the presence\n * of operations or to run them early.\n *\n * The string values are used when encoding these timer IDs in JSON spec tests.\n */\nexport const enum TimerId {\n  /** All can be used with runDelayedOperationsEarly() to run all timers. */\n  All = 'all',\n\n  /**\n   * The following 4 timers are used in persistent_stream.ts for the listen and\n   * write streams. The \"Idle\" timer is used to close the stream due to\n   * inactivity. The \"ConnectionBackoff\" timer is used to restart a stream once\n   * the appropriate backoff delay has elapsed.\n   */\n  ListenStreamIdle = 'listen_stream_idle',\n  ListenStreamConnectionBackoff = 'listen_stream_connection_backoff',\n  WriteStreamIdle = 'write_stream_idle',\n  WriteStreamConnectionBackoff = 'write_stream_connection_backoff',\n\n  /**\n   * A timer used in online_state_tracker.ts to transition from\n   * OnlineState.Unknown to Offline after a set timeout, rather than waiting\n   * indefinitely for success or failure.\n   */\n  OnlineStateTimeout = 'online_state_timeout',\n\n  /**\n   * A timer used to update the client metadata in IndexedDb, which is used\n   * to determine the primary leaseholder.\n   */\n  ClientMetadataRefresh = 'client_metadata_refresh',\n\n  /** A timer used to periodically attempt LRU Garbage collection */\n  LruGarbageCollection = 'lru_garbage_collection',\n\n  /**\n   * A timer used to retry transactions. Since there can be multiple concurrent\n   * transactions, multiple of these may be in the queue at a given time.\n   */\n  TransactionRetry = 'transaction_retry',\n\n  /**\n   * A timer used to retry operations scheduled via retryable AsyncQueue\n   * operations.\n   */\n  AsyncQueueRetry = 'async_queue_retry'\n}\n\n/**\n * Represents an operation scheduled to be run in the future on an AsyncQueue.\n *\n * It is created via DelayedOperation.createAndSchedule().\n *\n * Supports cancellation (via cancel()) and early execution (via skipDelay()).\n *\n * Note: We implement `PromiseLike` instead of `Promise`, as the `Promise` type\n * in newer versions of TypeScript defines `finally`, which is not available in\n * IE.\n */\nexport class DelayedOperation<T extends unknown> implements PromiseLike<T> {\n  // handle for use with clearTimeout(), or null if the operation has been\n  // executed or canceled already.\n  private timerHandle: TimerHandle | null;\n\n  private readonly deferred = new Deferred<T>();\n\n  private constructor(\n    private readonly asyncQueue: AsyncQueue,\n    readonly timerId: TimerId,\n    readonly targetTimeMs: number,\n    private readonly op: () => Promise<T>,\n    private readonly removalCallback: (op: DelayedOperation<T>) => void\n  ) {\n    // It's normal for the deferred promise to be canceled (due to cancellation)\n    // and so we attach a dummy catch callback to avoid\n    // 'UnhandledPromiseRejectionWarning' log spam.\n    this.deferred.promise.catch(err => {});\n  }\n\n  /**\n   * Creates and returns a DelayedOperation that has been scheduled to be\n   * executed on the provided asyncQueue after the provided delayMs.\n   *\n   * @param asyncQueue The queue to schedule the operation on.\n   * @param id A Timer ID identifying the type of operation this is.\n   * @param delayMs The delay (ms) before the operation should be scheduled.\n   * @param op The operation to run.\n   * @param removalCallback A callback to be called synchronously once the\n   *   operation is executed or canceled, notifying the AsyncQueue to remove it\n   *   from its delayedOperations list.\n   *   PORTING NOTE: This exists to prevent making removeDelayedOperation() and\n   *   the DelayedOperation class public.\n   */\n  static createAndSchedule<R extends unknown>(\n    asyncQueue: AsyncQueue,\n    timerId: TimerId,\n    delayMs: number,\n    op: () => Promise<R>,\n    removalCallback: (op: DelayedOperation<R>) => void\n  ): DelayedOperation<R> {\n    const targetTime = Date.now() + delayMs;\n    const delayedOp = new DelayedOperation(\n      asyncQueue,\n      timerId,\n      targetTime,\n      op,\n      removalCallback\n    );\n    delayedOp.start(delayMs);\n    return delayedOp;\n  }\n\n  /**\n   * Starts the timer. This is called immediately after construction by\n   * createAndSchedule().\n   */\n  private start(delayMs: number): void {\n    this.timerHandle = setTimeout(() => this.handleDelayElapsed(), delayMs);\n  }\n\n  /**\n   * Queues the operation to run immediately (if it hasn't already been run or\n   * canceled).\n   */\n  skipDelay(): void {\n    return this.handleDelayElapsed();\n  }\n\n  /**\n   * Cancels the operation if it hasn't already been executed or canceled. The\n   * promise will be rejected.\n   *\n   * As long as the operation has not yet been run, calling cancel() provides a\n   * guarantee that the operation will not be run.\n   */\n  cancel(reason?: string): void {\n    if (this.timerHandle !== null) {\n      this.clearTimeout();\n      this.deferred.reject(\n        new FirestoreError(\n          Code.CANCELLED,\n          'Operation cancelled' + (reason ? ': ' + reason : '')\n        )\n      );\n    }\n  }\n\n  then = this.deferred.promise.then.bind(this.deferred.promise);\n\n  private handleDelayElapsed(): void {\n    this.asyncQueue.enqueueAndForget(() => {\n      if (this.timerHandle !== null) {\n        this.clearTimeout();\n        return this.op().then(result => {\n          return this.deferred.resolve(result);\n        });\n      } else {\n        return Promise.resolve();\n      }\n    });\n  }\n\n  private clearTimeout(): void {\n    if (this.timerHandle !== null) {\n      this.removalCallback(this);\n      clearTimeout(this.timerHandle);\n      this.timerHandle = null;\n    }\n  }\n}\n\nexport class AsyncQueue {\n  // The last promise in the queue.\n  private tail: Promise<unknown> = Promise.resolve();\n\n  // The last retryable operation. Retryable operation are run in order and\n  // retried with backoff.\n  private retryableTail: Promise<void> = Promise.resolve();\n\n  // Is this AsyncQueue being shut down? Once it is set to true, it will not\n  // be changed again.\n  private _isShuttingDown: boolean = false;\n\n  // Operations scheduled to be queued in the future. Operations are\n  // automatically removed after they are run or canceled.\n  private delayedOperations: Array<DelayedOperation<unknown>> = [];\n\n  // visible for testing\n  failure: Error | null = null;\n\n  // Flag set while there's an outstanding AsyncQueue operation, used for\n  // assertion sanity-checks.\n  private operationInProgress = false;\n\n  // List of TimerIds to fast-forward delays for.\n  private timerIdsToSkip: TimerId[] = [];\n\n  // Backoff timer used to schedule retries for retryable operations\n  private backoff = new ExponentialBackoff(this, TimerId.AsyncQueueRetry);\n\n  // Visibility handler that triggers an immediate retry of all retryable\n  // operations. Meant to speed up recovery when we regain file system access\n  // after page comes into foreground.\n  private visibilityHandler = (): void => this.backoff.skipBackoff();\n\n  constructor() {\n    const window = PlatformSupport.getPlatform().window;\n    if (window && typeof window.addEventListener === 'function') {\n      window.addEventListener('visibilitychange', this.visibilityHandler);\n    }\n  }\n\n  // Is this AsyncQueue being shut down? If true, this instance will not enqueue\n  // any new operations, Promises from enqueue requests will not resolve.\n  get isShuttingDown(): boolean {\n    return this._isShuttingDown;\n  }\n\n  /**\n   * Adds a new operation to the queue without waiting for it to complete (i.e.\n   * we ignore the Promise result).\n   */\n  enqueueAndForget<T extends unknown>(op: () => Promise<T>): void {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.enqueue(op);\n  }\n\n  /**\n   * Regardless if the queue has initialized shutdown, adds a new operation to the\n   * queue without waiting for it to complete (i.e. we ignore the Promise result).\n   */\n  enqueueAndForgetEvenAfterShutdown<T extends unknown>(\n    op: () => Promise<T>\n  ): void {\n    this.verifyNotFailed();\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.enqueueInternal(op);\n  }\n\n  /**\n   * Regardless if the queue has initialized shutdown, adds a new operation to the\n   * queue.\n   */\n  private enqueueEvenAfterShutdown<T extends unknown>(\n    op: () => Promise<T>\n  ): Promise<T> {\n    this.verifyNotFailed();\n    return this.enqueueInternal(op);\n  }\n\n  /**\n   * Adds a new operation to the queue and initialize the shut down of this queue.\n   * Returns a promise that will be resolved when the promise returned by the new\n   * operation is (with its value).\n   * Once this method is called, the only possible way to request running an operation\n   * is through `enqueueAndForgetEvenAfterShutdown`.\n   */\n  async enqueueAndInitiateShutdown(op: () => Promise<void>): Promise<void> {\n    this.verifyNotFailed();\n    if (!this._isShuttingDown) {\n      this._isShuttingDown = true;\n      const window = PlatformSupport.getPlatform().window;\n      if (window) {\n        window.removeEventListener('visibilitychange', this.visibilityHandler);\n      }\n      await this.enqueueEvenAfterShutdown(op);\n    }\n  }\n\n  /**\n   * Adds a new operation to the queue. Returns a promise that will be resolved\n   * when the promise returned by the new operation is (with its value).\n   */\n  enqueue<T extends unknown>(op: () => Promise<T>): Promise<T> {\n    this.verifyNotFailed();\n    if (this._isShuttingDown) {\n      // Return a Promise which never resolves.\n      return new Promise<T>(resolve => {});\n    }\n    return this.enqueueInternal(op);\n  }\n\n  /**\n   * Enqueue a retryable operation.\n   *\n   * A retryable operation is rescheduled with backoff if it fails with a\n   * IndexedDbTransactionError (the error type used by SimpleDb). All\n   * retryable operations are executed in order and only run if all prior\n   * operations were retried successfully.\n   */\n  enqueueRetryable(op: () => Promise<void>): void {\n    this.verifyNotFailed();\n\n    if (this._isShuttingDown) {\n      return;\n    }\n\n    this.retryableTail = this.retryableTail.then(() => {\n      const deferred = new Deferred<void>();\n      const retryingOp = async (): Promise<void> => {\n        try {\n          await op();\n          deferred.resolve();\n          this.backoff.reset();\n        } catch (e) {\n          if (isIndexedDbTransactionError(e)) {\n            logDebug(LOG_TAG, 'Operation failed with retryable error: ' + e);\n            this.backoff.backoffAndRun(retryingOp);\n          } else {\n            deferred.resolve();\n            throw e; // Failure will be handled by AsyncQueue\n          }\n        }\n      };\n      this.enqueueAndForget(retryingOp);\n      return deferred.promise;\n    });\n  }\n\n  private enqueueInternal<T extends unknown>(op: () => Promise<T>): Promise<T> {\n    const newTail = this.tail.then(() => {\n      this.operationInProgress = true;\n      return op()\n        .catch((error: FirestoreError) => {\n          this.failure = error;\n          this.operationInProgress = false;\n          const message = getMessageOrStack(error);\n          logError('INTERNAL UNHANDLED ERROR: ', message);\n\n          // Re-throw the error so that this.tail becomes a rejected Promise and\n          // all further attempts to chain (via .then) will just short-circuit\n          // and return the rejected Promise.\n          throw error;\n        })\n        .then(result => {\n          this.operationInProgress = false;\n          return result;\n        });\n    });\n    this.tail = newTail;\n    return newTail;\n  }\n\n  /**\n   * Schedules an operation to be queued on the AsyncQueue once the specified\n   * `delayMs` has elapsed. The returned DelayedOperation can be used to cancel\n   * or fast-forward the operation prior to its running.\n   */\n  enqueueAfterDelay<T extends unknown>(\n    timerId: TimerId,\n    delayMs: number,\n    op: () => Promise<T>\n  ): DelayedOperation<T> {\n    this.verifyNotFailed();\n\n    debugAssert(\n      delayMs >= 0,\n      `Attempted to schedule an operation with a negative delay of ${delayMs}`\n    );\n\n    // Fast-forward delays for timerIds that have been overriden.\n    if (this.timerIdsToSkip.indexOf(timerId) > -1) {\n      delayMs = 0;\n    }\n\n    const delayedOp = DelayedOperation.createAndSchedule<T>(\n      this,\n      timerId,\n      delayMs,\n      op,\n      removedOp =>\n        this.removeDelayedOperation(removedOp as DelayedOperation<unknown>)\n    );\n    this.delayedOperations.push(delayedOp as DelayedOperation<unknown>);\n    return delayedOp;\n  }\n\n  private verifyNotFailed(): void {\n    if (this.failure) {\n      fail('AsyncQueue is already failed: ' + getMessageOrStack(this.failure));\n    }\n  }\n\n  /**\n   * Verifies there's an operation currently in-progress on the AsyncQueue.\n   * Unfortunately we can't verify that the running code is in the promise chain\n   * of that operation, so this isn't a foolproof check, but it should be enough\n   * to catch some bugs.\n   */\n  verifyOperationInProgress(): void {\n    debugAssert(\n      this.operationInProgress,\n      'verifyOpInProgress() called when no op in progress on this queue.'\n    );\n  }\n\n  /**\n   * Waits until all currently queued tasks are finished executing. Delayed\n   * operations are not run.\n   */\n  async drain(): Promise<void> {\n    // Operations in the queue prior to draining may have enqueued additional\n    // operations. Keep draining the queue until the tail is no longer advanced,\n    // which indicates that no more new operations were enqueued and that all\n    // operations were executed.\n    let currentTail: Promise<unknown>;\n    do {\n      currentTail = this.tail;\n      await currentTail;\n    } while (currentTail !== this.tail);\n  }\n\n  /**\n   * For Tests: Determine if a delayed operation with a particular TimerId\n   * exists.\n   */\n  containsDelayedOperation(timerId: TimerId): boolean {\n    for (const op of this.delayedOperations) {\n      if (op.timerId === timerId) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * For Tests: Runs some or all delayed operations early.\n   *\n   * @param lastTimerId Delayed operations up to and including this TimerId will\n   *  be drained. Pass TimerId.All to run all delayed operations.\n   * @returns a Promise that resolves once all operations have been run.\n   */\n  runAllDelayedOperationsUntil(lastTimerId: TimerId): Promise<void> {\n    // Note that draining may generate more delayed ops, so we do that first.\n    return this.drain().then(() => {\n      // Run ops in the same order they'd run if they ran naturally.\n      this.delayedOperations.sort((a, b) => a.targetTimeMs - b.targetTimeMs);\n\n      for (const op of this.delayedOperations) {\n        op.skipDelay();\n        if (lastTimerId !== TimerId.All && op.timerId === lastTimerId) {\n          break;\n        }\n      }\n\n      return this.drain();\n    });\n  }\n\n  /**\n   * For Tests: Skip all subsequent delays for a timer id.\n   */\n  skipDelaysForTimerId(timerId: TimerId): void {\n    this.timerIdsToSkip.push(timerId);\n  }\n\n  /** Called once a DelayedOperation is run or canceled. */\n  private removeDelayedOperation(op: DelayedOperation<unknown>): void {\n    // NOTE: indexOf / slice are O(n), but delayedOperations is expected to be small.\n    const index = this.delayedOperations.indexOf(op);\n    debugAssert(index >= 0, 'Delayed operation not found.');\n    this.delayedOperations.splice(index, 1);\n  }\n}\n\n/**\n * Returns a FirestoreError that can be surfaced to the user if the provided\n * error is an IndexedDbTransactionError. Re-throws the error otherwise.\n */\nexport function wrapInUserErrorIfRecoverable(\n  e: Error,\n  msg: string\n): FirestoreError {\n  logError(LOG_TAG, `${msg}: ${e}`);\n  if (isIndexedDbTransactionError(e)) {\n    return new FirestoreError(Code.UNAVAILABLE, `${msg}: ${e}`);\n  } else {\n    throw e;\n  }\n}\n\n/**\n * Chrome includes Error.message in Error.stack. Other browsers do not.\n * This returns expected output of message + stack when available.\n * @param error Error or FirestoreError\n */\nfunction getMessageOrStack(error: Error): string {\n  let message = error.message || '';\n  if (error.stack) {\n    if (error.stack.includes(error.message)) {\n      message = error.stack;\n    } else {\n      message = error.message + '\\n' + error.stack;\n    }\n  }\n  return message;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ListenSequence } from '../core/listen_sequence';\nimport { ListenSequenceNumber, TargetId } from '../core/types';\nimport { debugAssert } from '../util/assert';\nimport { AsyncQueue, DelayedOperation, TimerId } from '../util/async_queue';\nimport { getLogLevel, logDebug, LogLevel } from '../util/log';\nimport { primitiveComparator } from '../util/misc';\nimport { SortedMap } from '../util/sorted_map';\nimport { SortedSet } from '../util/sorted_set';\nimport { ignoreIfPrimaryLeaseLoss, LocalStore } from './local_store';\nimport {\n  GarbageCollectionScheduler,\n  PersistenceTransaction\n} from './persistence';\nimport { PersistencePromise } from './persistence_promise';\nimport { TargetData } from './target_data';\nimport { isIndexedDbTransactionError } from './simple_db';\n\nconst LOG_TAG = 'LruGarbageCollector';\n\n/**\n * Persistence layers intending to use LRU Garbage collection should have reference delegates that\n * implement this interface. This interface defines the operations that the LRU garbage collector\n * needs from the persistence layer.\n */\nexport interface LruDelegate {\n  readonly garbageCollector: LruGarbageCollector;\n\n  /** Enumerates all the targets in the TargetCache. */\n  forEachTarget(\n    txn: PersistenceTransaction,\n    f: (target: TargetData) => void\n  ): PersistencePromise<void>;\n\n  getSequenceNumberCount(\n    txn: PersistenceTransaction\n  ): PersistencePromise<number>;\n\n  /**\n   * Enumerates sequence numbers for documents not associated with a target.\n   * Note that this may include duplicate sequence numbers.\n   */\n  forEachOrphanedDocumentSequenceNumber(\n    txn: PersistenceTransaction,\n    f: (sequenceNumber: ListenSequenceNumber) => void\n  ): PersistencePromise<void>;\n\n  /**\n   * Removes all targets that have a sequence number less than or equal to `upperBound`, and are not\n   * present in the `activeTargetIds` set.\n   *\n   * @return the number of targets removed.\n   */\n  removeTargets(\n    txn: PersistenceTransaction,\n    upperBound: ListenSequenceNumber,\n    activeTargetIds: ActiveTargets\n  ): PersistencePromise<number>;\n\n  /**\n   * Removes all unreferenced documents from the cache that have a sequence number less than or\n   * equal to the given `upperBound`.\n   *\n   * @return the number of documents removed.\n   */\n  removeOrphanedDocuments(\n    txn: PersistenceTransaction,\n    upperBound: ListenSequenceNumber\n  ): PersistencePromise<number>;\n\n  getCacheSize(txn: PersistenceTransaction): PersistencePromise<number>;\n}\n\n/**\n * Describes a map whose keys are active target ids. We do not care about the type of the\n * values.\n */\nexport type ActiveTargets = SortedMap<TargetId, unknown>;\n\n// The type and comparator for the items contained in the SortedSet used in\n// place of a priority queue for the RollingSequenceNumberBuffer.\ntype BufferEntry = [ListenSequenceNumber, number];\nfunction bufferEntryComparator(\n  [aSequence, aIndex]: BufferEntry,\n  [bSequence, bIndex]: BufferEntry\n): number {\n  const seqCmp = primitiveComparator(aSequence, bSequence);\n  if (seqCmp === 0) {\n    // This order doesn't matter, but we can bias against churn by sorting\n    // entries created earlier as less than newer entries.\n    return primitiveComparator(aIndex, bIndex);\n  } else {\n    return seqCmp;\n  }\n}\n\n/**\n * Used to calculate the nth sequence number. Keeps a rolling buffer of the\n * lowest n values passed to `addElement`, and finally reports the largest of\n * them in `maxValue`.\n */\nclass RollingSequenceNumberBuffer {\n  private buffer: SortedSet<BufferEntry> = new SortedSet<BufferEntry>(\n    bufferEntryComparator\n  );\n\n  private previousIndex = 0;\n\n  constructor(private readonly maxElements: number) {}\n\n  private nextIndex(): number {\n    return ++this.previousIndex;\n  }\n\n  addElement(sequenceNumber: ListenSequenceNumber): void {\n    const entry: BufferEntry = [sequenceNumber, this.nextIndex()];\n    if (this.buffer.size < this.maxElements) {\n      this.buffer = this.buffer.add(entry);\n    } else {\n      const highestValue = this.buffer.last()!;\n      if (bufferEntryComparator(entry, highestValue) < 0) {\n        this.buffer = this.buffer.delete(highestValue).add(entry);\n      }\n    }\n  }\n\n  get maxValue(): ListenSequenceNumber {\n    // Guaranteed to be non-empty. If we decide we are not collecting any\n    // sequence numbers, nthSequenceNumber below short-circuits. If we have\n    // decided that we are collecting n sequence numbers, it's because n is some\n    // percentage of the existing sequence numbers. That means we should never\n    // be in a situation where we are collecting sequence numbers but don't\n    // actually have any.\n    return this.buffer.last()![0];\n  }\n}\n\n/**\n * Describes the results of a garbage collection run. `didRun` will be set to\n * `false` if collection was skipped (either it is disabled or the cache size\n * has not hit the threshold). If collection ran, the other fields will be\n * filled in with the details of the results.\n */\nexport interface LruResults {\n  readonly didRun: boolean;\n  readonly sequenceNumbersCollected: number;\n  readonly targetsRemoved: number;\n  readonly documentsRemoved: number;\n}\n\nconst GC_DID_NOT_RUN: LruResults = {\n  didRun: false,\n  sequenceNumbersCollected: 0,\n  targetsRemoved: 0,\n  documentsRemoved: 0\n};\n\nexport class LruParams {\n  static readonly COLLECTION_DISABLED = -1;\n  static readonly MINIMUM_CACHE_SIZE_BYTES = 1 * 1024 * 1024;\n  static readonly DEFAULT_CACHE_SIZE_BYTES = 40 * 1024 * 1024;\n  private static readonly DEFAULT_COLLECTION_PERCENTILE = 10;\n  private static readonly DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT = 1000;\n\n  static withCacheSize(cacheSize: number): LruParams {\n    return new LruParams(\n      cacheSize,\n      LruParams.DEFAULT_COLLECTION_PERCENTILE,\n      LruParams.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT\n    );\n  }\n\n  static readonly DEFAULT: LruParams = new LruParams(\n    LruParams.DEFAULT_CACHE_SIZE_BYTES,\n    LruParams.DEFAULT_COLLECTION_PERCENTILE,\n    LruParams.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT\n  );\n\n  static readonly DISABLED: LruParams = new LruParams(\n    LruParams.COLLECTION_DISABLED,\n    0,\n    0\n  );\n\n  constructor(\n    // When we attempt to collect, we will only do so if the cache size is greater than this\n    // threshold. Passing `COLLECTION_DISABLED` here will cause collection to always be skipped.\n    readonly cacheSizeCollectionThreshold: number,\n    // The percentage of sequence numbers that we will attempt to collect\n    readonly percentileToCollect: number,\n    // A cap on the total number of sequence numbers that will be collected. This prevents\n    // us from collecting a huge number of sequence numbers if the cache has grown very large.\n    readonly maximumSequenceNumbersToCollect: number\n  ) {}\n}\n\n/** How long we wait to try running LRU GC after SDK initialization. */\nconst INITIAL_GC_DELAY_MS = 1 * 60 * 1000;\n/** Minimum amount of time between GC checks, after the first one. */\nconst REGULAR_GC_DELAY_MS = 5 * 60 * 1000;\n\n/**\n * This class is responsible for the scheduling of LRU garbage collection. It handles checking\n * whether or not GC is enabled, as well as which delay to use before the next run.\n */\nexport class LruScheduler implements GarbageCollectionScheduler {\n  private hasRun: boolean = false;\n  private gcTask: DelayedOperation<void> | null;\n\n  constructor(\n    private readonly garbageCollector: LruGarbageCollector,\n    private readonly asyncQueue: AsyncQueue\n  ) {\n    this.gcTask = null;\n  }\n\n  start(localStore: LocalStore): void {\n    debugAssert(\n      this.gcTask === null,\n      'Cannot start an already started LruScheduler'\n    );\n    if (\n      this.garbageCollector.params.cacheSizeCollectionThreshold !==\n      LruParams.COLLECTION_DISABLED\n    ) {\n      this.scheduleGC(localStore);\n    }\n  }\n\n  stop(): void {\n    if (this.gcTask) {\n      this.gcTask.cancel();\n      this.gcTask = null;\n    }\n  }\n\n  get started(): boolean {\n    return this.gcTask !== null;\n  }\n\n  private scheduleGC(localStore: LocalStore): void {\n    debugAssert(\n      this.gcTask === null,\n      'Cannot schedule GC while a task is pending'\n    );\n    const delay = this.hasRun ? REGULAR_GC_DELAY_MS : INITIAL_GC_DELAY_MS;\n    logDebug(\n      'LruGarbageCollector',\n      `Garbage collection scheduled in ${delay}ms`\n    );\n    this.gcTask = this.asyncQueue.enqueueAfterDelay(\n      TimerId.LruGarbageCollection,\n      delay,\n      async () => {\n        this.gcTask = null;\n        this.hasRun = true;\n        try {\n          await localStore.collectGarbage(this.garbageCollector);\n        } catch (e) {\n          if (isIndexedDbTransactionError(e)) {\n            logDebug(\n              LOG_TAG,\n              'Ignoring IndexedDB error during garbage collection: ',\n              e\n            );\n          } else {\n            await ignoreIfPrimaryLeaseLoss(e);\n          }\n        }\n        await this.scheduleGC(localStore);\n      }\n    );\n  }\n}\n\n/** Implements the steps for LRU garbage collection. */\nexport class LruGarbageCollector {\n  constructor(\n    private readonly delegate: LruDelegate,\n    readonly params: LruParams\n  ) {}\n\n  /** Given a percentile of target to collect, returns the number of targets to collect. */\n  calculateTargetCount(\n    txn: PersistenceTransaction,\n    percentile: number\n  ): PersistencePromise<number> {\n    return this.delegate.getSequenceNumberCount(txn).next(targetCount => {\n      return Math.floor((percentile / 100.0) * targetCount);\n    });\n  }\n\n  /** Returns the nth sequence number, counting in order from the smallest. */\n  nthSequenceNumber(\n    txn: PersistenceTransaction,\n    n: number\n  ): PersistencePromise<ListenSequenceNumber> {\n    if (n === 0) {\n      return PersistencePromise.resolve(ListenSequence.INVALID);\n    }\n\n    const buffer = new RollingSequenceNumberBuffer(n);\n    return this.delegate\n      .forEachTarget(txn, target => buffer.addElement(target.sequenceNumber))\n      .next(() => {\n        return this.delegate.forEachOrphanedDocumentSequenceNumber(\n          txn,\n          sequenceNumber => buffer.addElement(sequenceNumber)\n        );\n      })\n      .next(() => buffer.maxValue);\n  }\n\n  /**\n   * Removes targets with a sequence number equal to or less than the given upper bound, and removes\n   * document associations with those targets.\n   */\n  removeTargets(\n    txn: PersistenceTransaction,\n    upperBound: ListenSequenceNumber,\n    activeTargetIds: ActiveTargets\n  ): PersistencePromise<number> {\n    return this.delegate.removeTargets(txn, upperBound, activeTargetIds);\n  }\n\n  /**\n   * Removes documents that have a sequence number equal to or less than the upper bound and are not\n   * otherwise pinned.\n   */\n  removeOrphanedDocuments(\n    txn: PersistenceTransaction,\n    upperBound: ListenSequenceNumber\n  ): PersistencePromise<number> {\n    return this.delegate.removeOrphanedDocuments(txn, upperBound);\n  }\n\n  collect(\n    txn: PersistenceTransaction,\n    activeTargetIds: ActiveTargets\n  ): PersistencePromise<LruResults> {\n    if (\n      this.params.cacheSizeCollectionThreshold === LruParams.COLLECTION_DISABLED\n    ) {\n      logDebug('LruGarbageCollector', 'Garbage collection skipped; disabled');\n      return PersistencePromise.resolve(GC_DID_NOT_RUN);\n    }\n\n    return this.getCacheSize(txn).next(cacheSize => {\n      if (cacheSize < this.params.cacheSizeCollectionThreshold) {\n        logDebug(\n          'LruGarbageCollector',\n          `Garbage collection skipped; Cache size ${cacheSize} ` +\n            `is lower than threshold ${this.params.cacheSizeCollectionThreshold}`\n        );\n        return GC_DID_NOT_RUN;\n      } else {\n        return this.runGarbageCollection(txn, activeTargetIds);\n      }\n    });\n  }\n\n  getCacheSize(txn: PersistenceTransaction): PersistencePromise<number> {\n    return this.delegate.getCacheSize(txn);\n  }\n\n  private runGarbageCollection(\n    txn: PersistenceTransaction,\n    activeTargetIds: ActiveTargets\n  ): PersistencePromise<LruResults> {\n    let upperBoundSequenceNumber: number;\n    let sequenceNumbersToCollect: number, targetsRemoved: number;\n    // Timestamps for various pieces of the process\n    let countedTargetsTs: number,\n      foundUpperBoundTs: number,\n      removedTargetsTs: number,\n      removedDocumentsTs: number;\n    const startTs = Date.now();\n    return this.calculateTargetCount(txn, this.params.percentileToCollect)\n      .next(sequenceNumbers => {\n        // Cap at the configured max\n        if (sequenceNumbers > this.params.maximumSequenceNumbersToCollect) {\n          logDebug(\n            'LruGarbageCollector',\n            'Capping sequence numbers to collect down ' +\n              `to the maximum of ${this.params.maximumSequenceNumbersToCollect} ` +\n              `from ${sequenceNumbers}`\n          );\n          sequenceNumbersToCollect = this.params\n            .maximumSequenceNumbersToCollect;\n        } else {\n          sequenceNumbersToCollect = sequenceNumbers;\n        }\n        countedTargetsTs = Date.now();\n\n        return this.nthSequenceNumber(txn, sequenceNumbersToCollect);\n      })\n      .next(upperBound => {\n        upperBoundSequenceNumber = upperBound;\n        foundUpperBoundTs = Date.now();\n\n        return this.removeTargets(\n          txn,\n          upperBoundSequenceNumber,\n          activeTargetIds\n        );\n      })\n      .next(numTargetsRemoved => {\n        targetsRemoved = numTargetsRemoved;\n        removedTargetsTs = Date.now();\n\n        return this.removeOrphanedDocuments(txn, upperBoundSequenceNumber);\n      })\n      .next(documentsRemoved => {\n        removedDocumentsTs = Date.now();\n\n        if (getLogLevel() <= LogLevel.DEBUG) {\n          const desc =\n            'LRU Garbage Collection\\n' +\n            `\\tCounted targets in ${countedTargetsTs - startTs}ms\\n` +\n            `\\tDetermined least recently used ${sequenceNumbersToCollect} in ` +\n            `${foundUpperBoundTs - countedTargetsTs}ms\\n` +\n            `\\tRemoved ${targetsRemoved} targets in ` +\n            `${removedTargetsTs - foundUpperBoundTs}ms\\n` +\n            `\\tRemoved ${documentsRemoved} documents in ` +\n            `${removedDocumentsTs - removedTargetsTs}ms\\n` +\n            `Total Duration: ${removedDocumentsTs - startTs}ms`;\n          logDebug('LruGarbageCollector', desc);\n        }\n\n        return PersistencePromise.resolve<LruResults>({\n          didRun: true,\n          sequenceNumbersCollected: sequenceNumbersToCollect,\n          targetsRemoved,\n          documentsRemoved\n        });\n      });\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Timestamp } from '../api/timestamp';\nimport { User } from '../auth/user';\nimport { Query } from '../core/query';\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { Target } from '../core/target';\nimport { BatchId, TargetId } from '../core/types';\nimport {\n  DocumentKeySet,\n  documentKeySet,\n  DocumentMap,\n  maybeDocumentMap,\n  MaybeDocumentMap\n} from '../model/collections';\nimport { MaybeDocument, NoDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { Mutation, PatchMutation, Precondition } from '../model/mutation';\nimport {\n  BATCHID_UNKNOWN,\n  MutationBatch,\n  MutationBatchResult\n} from '../model/mutation_batch';\nimport { RemoteEvent, TargetChange } from '../remote/remote_event';\nimport { hardAssert, debugAssert } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\nimport { logDebug } from '../util/log';\nimport { primitiveComparator } from '../util/misc';\nimport { ObjectMap } from '../util/obj_map';\nimport { SortedMap } from '../util/sorted_map';\n\nimport { LocalDocumentsView } from './local_documents_view';\nimport { LocalViewChanges } from './local_view_changes';\nimport { LruGarbageCollector, LruResults } from './lru_garbage_collector';\nimport { MutationQueue } from './mutation_queue';\nimport {\n  Persistence,\n  PersistenceTransaction,\n  PRIMARY_LEASE_LOST_ERROR_MSG\n} from './persistence';\nimport { PersistencePromise } from './persistence_promise';\nimport { TargetCache } from './target_cache';\nimport { QueryEngine } from './query_engine';\nimport { RemoteDocumentCache } from './remote_document_cache';\nimport { RemoteDocumentChangeBuffer } from './remote_document_change_buffer';\nimport { ClientId } from './shared_client_state';\nimport { TargetData, TargetPurpose } from './target_data';\nimport { IndexedDbPersistence } from './indexeddb_persistence';\nimport { IndexedDbMutationQueue } from './indexeddb_mutation_queue';\nimport { IndexedDbRemoteDocumentCache } from './indexeddb_remote_document_cache';\nimport { IndexedDbTargetCache } from './indexeddb_target_cache';\nimport { extractFieldMask } from '../model/object_value';\nimport { isIndexedDbTransactionError } from './simple_db';\n\nconst LOG_TAG = 'LocalStore';\n\n/** The result of a write to the local store. */\nexport interface LocalWriteResult {\n  batchId: BatchId;\n  changes: MaybeDocumentMap;\n}\n\n/** The result of a user-change operation in the local store. */\nexport interface UserChangeResult {\n  readonly affectedDocuments: MaybeDocumentMap;\n  readonly removedBatchIds: BatchId[];\n  readonly addedBatchIds: BatchId[];\n}\n\n/** The result of executing a query against the local store. */\nexport interface QueryResult {\n  readonly documents: DocumentMap;\n  readonly remoteKeys: DocumentKeySet;\n}\n\n/**\n * Local storage in the Firestore client. Coordinates persistence components\n * like the mutation queue and remote document cache to present a\n * latency-compensated view of stored data.\n *\n * The LocalStore is responsible for accepting mutations from the Sync Engine.\n * Writes from the client are put into a queue as provisional Mutations until\n * they are processed by the RemoteStore and confirmed as having been written\n * to the server.\n *\n * The local store provides the local version of documents that have been\n * modified locally. It maintains the constraint:\n *\n *   LocalDocument = RemoteDocument + Active(LocalMutations)\n *\n * (Active mutations are those that are enqueued and have not been previously\n * acknowledged or rejected).\n *\n * The RemoteDocument (\"ground truth\") state is provided via the\n * applyChangeBatch method. It will be some version of a server-provided\n * document OR will be a server-provided document PLUS acknowledged mutations:\n *\n *   RemoteDocument' = RemoteDocument + Acknowledged(LocalMutations)\n *\n * Note that this \"dirty\" version of a RemoteDocument will not be identical to a\n * server base version, since it has LocalMutations added to it pending getting\n * an authoritative copy from the server.\n *\n * Since LocalMutations can be rejected by the server, we have to be able to\n * revert a LocalMutation that has already been applied to the LocalDocument\n * (typically done by replaying all remaining LocalMutations to the\n * RemoteDocument to re-apply).\n *\n * The LocalStore is responsible for the garbage collection of the documents it\n * contains. For now, it every doc referenced by a view, the mutation queue, or\n * the RemoteStore.\n *\n * It also maintains the persistence of mapping queries to resume tokens and\n * target ids. It needs to know this data about queries to properly know what\n * docs it would be allowed to garbage collect.\n *\n * The LocalStore must be able to efficiently execute queries against its local\n * cache of the documents, to provide the initial set of results before any\n * remote changes have been received.\n *\n * Note: In TypeScript, most methods return Promises since the implementation\n * may rely on fetching data from IndexedDB which is async.\n * These Promises will only be rejected on an I/O error or other internal\n * (unexpected) failure (e.g. failed assert) and always represent an\n * unrecoverable error (should be caught / reported by the async_queue).\n */\nexport class LocalStore {\n  /**\n   * The maximum time to leave a resume token buffered without writing it out.\n   * This value is arbitrary: it's long enough to avoid several writes\n   * (possibly indefinitely if updates come more frequently than this) but\n   * short enough that restarting after crashing will still have a pretty\n   * recent resume token.\n   */\n  private static readonly RESUME_TOKEN_MAX_AGE_MICROS = 5 * 60 * 1e6;\n\n  /**\n   * The set of all mutations that have been sent but not yet been applied to\n   * the backend.\n   */\n  protected mutationQueue: MutationQueue;\n\n  /** The set of all cached remote documents. */\n  protected remoteDocuments: RemoteDocumentCache;\n\n  /**\n   * The \"local\" view of all documents (layering mutationQueue on top of\n   * remoteDocumentCache).\n   */\n  protected localDocuments: LocalDocumentsView;\n\n  /** Maps a target to its `TargetData`. */\n  protected targetCache: TargetCache;\n\n  /**\n   * Maps a targetID to data about its target.\n   *\n   * PORTING NOTE: We are using an immutable data structure on Web to make re-runs\n   * of `applyRemoteEvent()` idempotent.\n   */\n  protected targetDataByTarget = new SortedMap<TargetId, TargetData>(\n    primitiveComparator\n  );\n\n  /** Maps a target to its targetID. */\n  // TODO(wuandy): Evaluate if TargetId can be part of Target.\n  private targetIdByTarget = new ObjectMap<Target, TargetId>(t =>\n    t.canonicalId()\n  );\n\n  /**\n   * The read time of the last entry processed by `getNewDocumentChanges()`.\n   *\n   * PORTING NOTE: This is only used for multi-tab synchronization.\n   */\n  protected lastDocumentChangeReadTime = SnapshotVersion.min();\n\n  constructor(\n    /** Manages our in-memory or durable persistence. */\n    protected persistence: Persistence,\n    private queryEngine: QueryEngine,\n    initialUser: User\n  ) {\n    debugAssert(\n      persistence.started,\n      'LocalStore was passed an unstarted persistence implementation'\n    );\n    this.mutationQueue = persistence.getMutationQueue(initialUser);\n    this.remoteDocuments = persistence.getRemoteDocumentCache();\n    this.targetCache = persistence.getTargetCache();\n    this.localDocuments = new LocalDocumentsView(\n      this.remoteDocuments,\n      this.mutationQueue,\n      this.persistence.getIndexManager()\n    );\n    this.queryEngine.setLocalDocumentsView(this.localDocuments);\n  }\n\n  /** Starts the LocalStore. */\n  start(): Promise<void> {\n    return Promise.resolve();\n  }\n\n  /**\n   * Tells the LocalStore that the currently authenticated user has changed.\n   *\n   * In response the local store switches the mutation queue to the new user and\n   * returns any resulting document changes.\n   */\n  // PORTING NOTE: Android and iOS only return the documents affected by the\n  // change.\n  async handleUserChange(user: User): Promise<UserChangeResult> {\n    let newMutationQueue = this.mutationQueue;\n    let newLocalDocuments = this.localDocuments;\n\n    const result = await this.persistence.runTransaction(\n      'Handle user change',\n      'readonly',\n      txn => {\n        // Swap out the mutation queue, grabbing the pending mutation batches\n        // before and after.\n        let oldBatches: MutationBatch[];\n        return this.mutationQueue\n          .getAllMutationBatches(txn)\n          .next(promisedOldBatches => {\n            oldBatches = promisedOldBatches;\n\n            newMutationQueue = this.persistence.getMutationQueue(user);\n\n            // Recreate our LocalDocumentsView using the new\n            // MutationQueue.\n            newLocalDocuments = new LocalDocumentsView(\n              this.remoteDocuments,\n              newMutationQueue,\n              this.persistence.getIndexManager()\n            );\n            return newMutationQueue.getAllMutationBatches(txn);\n          })\n          .next(newBatches => {\n            const removedBatchIds: BatchId[] = [];\n            const addedBatchIds: BatchId[] = [];\n\n            // Union the old/new changed keys.\n            let changedKeys = documentKeySet();\n\n            for (const batch of oldBatches) {\n              removedBatchIds.push(batch.batchId);\n              for (const mutation of batch.mutations) {\n                changedKeys = changedKeys.add(mutation.key);\n              }\n            }\n\n            for (const batch of newBatches) {\n              addedBatchIds.push(batch.batchId);\n              for (const mutation of batch.mutations) {\n                changedKeys = changedKeys.add(mutation.key);\n              }\n            }\n\n            // Return the set of all (potentially) changed documents and the list\n            // of mutation batch IDs that were affected by change.\n            return newLocalDocuments\n              .getDocuments(txn, changedKeys)\n              .next(affectedDocuments => {\n                return {\n                  affectedDocuments,\n                  removedBatchIds,\n                  addedBatchIds\n                };\n              });\n          });\n      }\n    );\n\n    this.mutationQueue = newMutationQueue;\n    this.localDocuments = newLocalDocuments;\n    this.queryEngine.setLocalDocumentsView(this.localDocuments);\n\n    return result;\n  }\n\n  /* Accept locally generated Mutations and commit them to storage. */\n  localWrite(mutations: Mutation[]): Promise<LocalWriteResult> {\n    const localWriteTime = Timestamp.now();\n    const keys = mutations.reduce(\n      (keys, m) => keys.add(m.key),\n      documentKeySet()\n    );\n\n    let existingDocs: MaybeDocumentMap;\n\n    return this.persistence\n      .runTransaction('Locally write mutations', 'readwrite', txn => {\n        // Load and apply all existing mutations. This lets us compute the\n        // current base state for all non-idempotent transforms before applying\n        // any additional user-provided writes.\n        return this.localDocuments.getDocuments(txn, keys).next(docs => {\n          existingDocs = docs;\n\n          // For non-idempotent mutations (such as `FieldValue.increment()`),\n          // we record the base state in a separate patch mutation. This is\n          // later used to guarantee consistent values and prevents flicker\n          // even if the backend sends us an update that already includes our\n          // transform.\n          const baseMutations: Mutation[] = [];\n\n          for (const mutation of mutations) {\n            const baseValue = mutation.extractBaseValue(\n              existingDocs.get(mutation.key)\n            );\n            if (baseValue != null) {\n              // NOTE: The base state should only be applied if there's some\n              // existing document to override, so use a Precondition of\n              // exists=true\n              baseMutations.push(\n                new PatchMutation(\n                  mutation.key,\n                  baseValue,\n                  extractFieldMask(baseValue.proto.mapValue!),\n                  Precondition.exists(true)\n                )\n              );\n            }\n          }\n\n          return this.mutationQueue.addMutationBatch(\n            txn,\n            localWriteTime,\n            baseMutations,\n            mutations\n          );\n        });\n      })\n      .then(batch => {\n        const changes = batch.applyToLocalDocumentSet(existingDocs);\n        return { batchId: batch.batchId, changes };\n      });\n  }\n\n  /**\n   * Acknowledge the given batch.\n   *\n   * On the happy path when a batch is acknowledged, the local store will\n   *\n   *  + remove the batch from the mutation queue;\n   *  + apply the changes to the remote document cache;\n   *  + recalculate the latency compensated view implied by those changes (there\n   *    may be mutations in the queue that affect the documents but haven't been\n   *    acknowledged yet); and\n   *  + give the changed documents back the sync engine\n   *\n   * @returns The resulting (modified) documents.\n   */\n  acknowledgeBatch(\n    batchResult: MutationBatchResult\n  ): Promise<MaybeDocumentMap> {\n    return this.persistence.runTransaction(\n      'Acknowledge batch',\n      'readwrite-primary',\n      txn => {\n        const affected = batchResult.batch.keys();\n        const documentBuffer = this.remoteDocuments.newChangeBuffer({\n          trackRemovals: true // Make sure document removals show up in `getNewDocumentChanges()`\n        });\n        return this.applyWriteToRemoteDocuments(\n          txn,\n          batchResult,\n          documentBuffer\n        )\n          .next(() => documentBuffer.apply(txn))\n          .next(() => this.mutationQueue.performConsistencyCheck(txn))\n          .next(() => this.localDocuments.getDocuments(txn, affected));\n      }\n    );\n  }\n\n  /**\n   * Remove mutations from the MutationQueue for the specified batch;\n   * LocalDocuments will be recalculated.\n   *\n   * @returns The resulting modified documents.\n   */\n  rejectBatch(batchId: BatchId): Promise<MaybeDocumentMap> {\n    return this.persistence.runTransaction(\n      'Reject batch',\n      'readwrite-primary',\n      txn => {\n        let affectedKeys: DocumentKeySet;\n        return this.mutationQueue\n          .lookupMutationBatch(txn, batchId)\n          .next((batch: MutationBatch | null) => {\n            hardAssert(batch !== null, 'Attempt to reject nonexistent batch!');\n            affectedKeys = batch.keys();\n            return this.mutationQueue.removeMutationBatch(txn, batch);\n          })\n          .next(() => {\n            return this.mutationQueue.performConsistencyCheck(txn);\n          })\n          .next(() => {\n            return this.localDocuments.getDocuments(txn, affectedKeys);\n          });\n      }\n    );\n  }\n\n  /**\n   * Returns the largest (latest) batch id in mutation queue that is pending server response.\n   * Returns `BATCHID_UNKNOWN` if the queue is empty.\n   */\n  getHighestUnacknowledgedBatchId(): Promise<BatchId> {\n    return this.persistence.runTransaction(\n      'Get highest unacknowledged batch id',\n      'readonly',\n      txn => {\n        return this.mutationQueue.getHighestUnacknowledgedBatchId(txn);\n      }\n    );\n  }\n\n  /**\n   * Returns the last consistent snapshot processed (used by the RemoteStore to\n   * determine whether to buffer incoming snapshots from the backend).\n   */\n  getLastRemoteSnapshotVersion(): Promise<SnapshotVersion> {\n    return this.persistence.runTransaction(\n      'Get last remote snapshot version',\n      'readonly',\n      txn => this.targetCache.getLastRemoteSnapshotVersion(txn)\n    );\n  }\n\n  /**\n   * Update the \"ground-state\" (remote) documents. We assume that the remote\n   * event reflects any write batches that have been acknowledged or rejected\n   * (i.e. we do not re-apply local mutations to updates from this event).\n   *\n   * LocalDocuments are re-calculated if there are remaining mutations in the\n   * queue.\n   */\n  applyRemoteEvent(remoteEvent: RemoteEvent): Promise<MaybeDocumentMap> {\n    const remoteVersion = remoteEvent.snapshotVersion;\n    let newTargetDataByTargetMap = this.targetDataByTarget;\n\n    return this.persistence\n      .runTransaction('Apply remote event', 'readwrite-primary', txn => {\n        const documentBuffer = this.remoteDocuments.newChangeBuffer({\n          trackRemovals: true // Make sure document removals show up in `getNewDocumentChanges()`\n        });\n\n        // Reset newTargetDataByTargetMap in case this transaction gets re-run.\n        newTargetDataByTargetMap = this.targetDataByTarget;\n\n        const promises = [] as Array<PersistencePromise<void>>;\n        remoteEvent.targetChanges.forEach((change, targetId) => {\n          const oldTargetData = newTargetDataByTargetMap.get(targetId);\n          if (!oldTargetData) {\n            return;\n          }\n\n          // Only update the remote keys if the target is still active. This\n          // ensures that we can persist the updated target data along with\n          // the updated assignment.\n          promises.push(\n            this.targetCache\n              .removeMatchingKeys(txn, change.removedDocuments, targetId)\n              .next(() => {\n                return this.targetCache.addMatchingKeys(\n                  txn,\n                  change.addedDocuments,\n                  targetId\n                );\n              })\n          );\n\n          const resumeToken = change.resumeToken;\n          // Update the resume token if the change includes one.\n          if (resumeToken.approximateByteSize() > 0) {\n            const newTargetData = oldTargetData\n              .withResumeToken(resumeToken, remoteVersion)\n              .withSequenceNumber(txn.currentSequenceNumber);\n            newTargetDataByTargetMap = newTargetDataByTargetMap.insert(\n              targetId,\n              newTargetData\n            );\n\n            // Update the target data if there are target changes (or if\n            // sufficient time has passed since the last update).\n            if (\n              LocalStore.shouldPersistTargetData(\n                oldTargetData,\n                newTargetData,\n                change\n              )\n            ) {\n              promises.push(\n                this.targetCache.updateTargetData(txn, newTargetData)\n              );\n            }\n          }\n        });\n\n        let changedDocs = maybeDocumentMap();\n        let updatedKeys = documentKeySet();\n        remoteEvent.documentUpdates.forEach((key, doc) => {\n          updatedKeys = updatedKeys.add(key);\n        });\n\n        // Each loop iteration only affects its \"own\" doc, so it's safe to get all the remote\n        // documents in advance in a single call.\n        promises.push(\n          documentBuffer.getEntries(txn, updatedKeys).next(existingDocs => {\n            remoteEvent.documentUpdates.forEach((key, doc) => {\n              const existingDoc = existingDocs.get(key);\n\n              // Note: The order of the steps below is important, since we want\n              // to ensure that rejected limbo resolutions (which fabricate\n              // NoDocuments with SnapshotVersion.min()) never add documents to\n              // cache.\n              if (\n                doc instanceof NoDocument &&\n                doc.version.isEqual(SnapshotVersion.min())\n              ) {\n                // NoDocuments with SnapshotVersion.min() are used in manufactured\n                // events. We remove these documents from cache since we lost\n                // access.\n                documentBuffer.removeEntry(key, remoteVersion);\n                changedDocs = changedDocs.insert(key, doc);\n              } else if (\n                existingDoc == null ||\n                doc.version.compareTo(existingDoc.version) > 0 ||\n                (doc.version.compareTo(existingDoc.version) === 0 &&\n                  existingDoc.hasPendingWrites)\n              ) {\n                debugAssert(\n                  !SnapshotVersion.min().isEqual(remoteVersion),\n                  'Cannot add a document when the remote version is zero'\n                );\n                documentBuffer.addEntry(doc, remoteVersion);\n                changedDocs = changedDocs.insert(key, doc);\n              } else {\n                logDebug(\n                  LOG_TAG,\n                  'Ignoring outdated watch update for ',\n                  key,\n                  '. Current version:',\n                  existingDoc.version,\n                  ' Watch version:',\n                  doc.version\n                );\n              }\n\n              if (remoteEvent.resolvedLimboDocuments.has(key)) {\n                promises.push(\n                  this.persistence.referenceDelegate.updateLimboDocument(\n                    txn,\n                    key\n                  )\n                );\n              }\n            });\n          })\n        );\n\n        // HACK: The only reason we allow a null snapshot version is so that we\n        // can synthesize remote events when we get permission denied errors while\n        // trying to resolve the state of a locally cached document that is in\n        // limbo.\n        if (!remoteVersion.isEqual(SnapshotVersion.min())) {\n          const updateRemoteVersion = this.targetCache\n            .getLastRemoteSnapshotVersion(txn)\n            .next(lastRemoteSnapshotVersion => {\n              debugAssert(\n                remoteVersion.compareTo(lastRemoteSnapshotVersion) >= 0,\n                'Watch stream reverted to previous snapshot?? ' +\n                  remoteVersion +\n                  ' < ' +\n                  lastRemoteSnapshotVersion\n              );\n              return this.targetCache.setTargetsMetadata(\n                txn,\n                txn.currentSequenceNumber,\n                remoteVersion\n              );\n            });\n          promises.push(updateRemoteVersion);\n        }\n\n        return PersistencePromise.waitFor(promises)\n          .next(() => documentBuffer.apply(txn))\n          .next(() => {\n            return this.localDocuments.getLocalViewOfDocuments(\n              txn,\n              changedDocs\n            );\n          });\n      })\n      .then(changedDocs => {\n        this.targetDataByTarget = newTargetDataByTargetMap;\n        return changedDocs;\n      });\n  }\n\n  /**\n   * Returns true if the newTargetData should be persisted during an update of\n   * an active target. TargetData should always be persisted when a target is\n   * being released and should not call this function.\n   *\n   * While the target is active, TargetData updates can be omitted when nothing\n   * about the target has changed except metadata like the resume token or\n   * snapshot version. Occasionally it's worth the extra write to prevent these\n   * values from getting too stale after a crash, but this doesn't have to be\n   * too frequent.\n   */\n  private static shouldPersistTargetData(\n    oldTargetData: TargetData,\n    newTargetData: TargetData,\n    change: TargetChange\n  ): boolean {\n    hardAssert(\n      newTargetData.resumeToken.approximateByteSize() > 0,\n      'Attempted to persist target data with no resume token'\n    );\n\n    // Always persist target data if we don't already have a resume token.\n    if (oldTargetData.resumeToken.approximateByteSize() === 0) {\n      return true;\n    }\n\n    // Don't allow resume token changes to be buffered indefinitely. This\n    // allows us to be reasonably up-to-date after a crash and avoids needing\n    // to loop over all active queries on shutdown. Especially in the browser\n    // we may not get time to do anything interesting while the current tab is\n    // closing.\n    const timeDelta =\n      newTargetData.snapshotVersion.toMicroseconds() -\n      oldTargetData.snapshotVersion.toMicroseconds();\n    if (timeDelta >= this.RESUME_TOKEN_MAX_AGE_MICROS) {\n      return true;\n    }\n\n    // Otherwise if the only thing that has changed about a target is its resume\n    // token it's not worth persisting. Note that the RemoteStore keeps an\n    // in-memory view of the currently active targets which includes the current\n    // resume token, so stream failure or user changes will still use an\n    // up-to-date resume token regardless of what we do here.\n    const changes =\n      change.addedDocuments.size +\n      change.modifiedDocuments.size +\n      change.removedDocuments.size;\n    return changes > 0;\n  }\n\n  /**\n   * Notify local store of the changed views to locally pin documents.\n   */\n  async notifyLocalViewChanges(viewChanges: LocalViewChanges[]): Promise<void> {\n    try {\n      await this.persistence.runTransaction(\n        'notifyLocalViewChanges',\n        'readwrite',\n        txn => {\n          return PersistencePromise.forEach(\n            viewChanges,\n            (viewChange: LocalViewChanges) => {\n              return PersistencePromise.forEach(\n                viewChange.addedKeys,\n                (key: DocumentKey) =>\n                  this.persistence.referenceDelegate.addReference(\n                    txn,\n                    viewChange.targetId,\n                    key\n                  )\n              ).next(() =>\n                PersistencePromise.forEach(\n                  viewChange.removedKeys,\n                  (key: DocumentKey) =>\n                    this.persistence.referenceDelegate.removeReference(\n                      txn,\n                      viewChange.targetId,\n                      key\n                    )\n                )\n              );\n            }\n          );\n        }\n      );\n    } catch (e) {\n      if (isIndexedDbTransactionError(e)) {\n        // If `notifyLocalViewChanges` fails, we did not advance the sequence\n        // number for the documents that were included in this transaction.\n        // This might trigger them to be deleted earlier than they otherwise\n        // would have, but it should not invalidate the integrity of the data.\n        logDebug(LOG_TAG, 'Failed to update sequence numbers: ' + e);\n      } else {\n        throw e;\n      }\n    }\n\n    for (const viewChange of viewChanges) {\n      const targetId = viewChange.targetId;\n\n      if (!viewChange.fromCache) {\n        const targetData = this.targetDataByTarget.get(targetId);\n        debugAssert(\n          targetData !== null,\n          `Can't set limbo-free snapshot version for unknown target: ${targetId}`\n        );\n\n        // Advance the last limbo free snapshot version\n        const lastLimboFreeSnapshotVersion = targetData.snapshotVersion;\n        const updatedTargetData = targetData.withLastLimboFreeSnapshotVersion(\n          lastLimboFreeSnapshotVersion\n        );\n        this.targetDataByTarget = this.targetDataByTarget.insert(\n          targetId,\n          updatedTargetData\n        );\n      }\n    }\n  }\n\n  /**\n   * Gets the mutation batch after the passed in batchId in the mutation queue\n   * or null if empty.\n   * @param afterBatchId If provided, the batch to search after.\n   * @returns The next mutation or null if there wasn't one.\n   */\n  nextMutationBatch(afterBatchId?: BatchId): Promise<MutationBatch | null> {\n    return this.persistence.runTransaction(\n      'Get next mutation batch',\n      'readonly',\n      txn => {\n        if (afterBatchId === undefined) {\n          afterBatchId = BATCHID_UNKNOWN;\n        }\n        return this.mutationQueue.getNextMutationBatchAfterBatchId(\n          txn,\n          afterBatchId\n        );\n      }\n    );\n  }\n\n  /**\n   * Read the current value of a Document with a given key or null if not\n   * found - used for testing.\n   */\n  readDocument(key: DocumentKey): Promise<MaybeDocument | null> {\n    return this.persistence.runTransaction('read document', 'readonly', txn => {\n      return this.localDocuments.getDocument(txn, key);\n    });\n  }\n\n  /**\n   * Assigns the given target an internal ID so that its results can be pinned so\n   * they don't get GC'd. A target must be allocated in the local store before\n   * the store can be used to manage its view.\n   *\n   * Allocating an already allocated `Target` will return the existing `TargetData`\n   * for that `Target`.\n   */\n  allocateTarget(target: Target): Promise<TargetData> {\n    return this.persistence\n      .runTransaction('Allocate target', 'readwrite', txn => {\n        let targetData: TargetData;\n        return this.targetCache\n          .getTargetData(txn, target)\n          .next((cached: TargetData | null) => {\n            if (cached) {\n              // This target has been listened to previously, so reuse the\n              // previous targetID.\n              // TODO(mcg): freshen last accessed date?\n              targetData = cached;\n              return PersistencePromise.resolve(targetData);\n            } else {\n              return this.targetCache.allocateTargetId(txn).next(targetId => {\n                targetData = new TargetData(\n                  target,\n                  targetId,\n                  TargetPurpose.Listen,\n                  txn.currentSequenceNumber\n                );\n                return this.targetCache\n                  .addTargetData(txn, targetData)\n                  .next(() => targetData);\n              });\n            }\n          });\n      })\n      .then(targetData => {\n        // If Multi-Tab is enabled, the existing target data may be newer than\n        // the in-memory data\n        const cachedTargetData = this.targetDataByTarget.get(\n          targetData.targetId\n        );\n        if (\n          cachedTargetData === null ||\n          targetData.snapshotVersion.compareTo(\n            cachedTargetData.snapshotVersion\n          ) > 0\n        ) {\n          this.targetDataByTarget = this.targetDataByTarget.insert(\n            targetData.targetId,\n            targetData\n          );\n          this.targetIdByTarget.set(target, targetData.targetId);\n        }\n        return targetData;\n      });\n  }\n\n  /**\n   * Returns the TargetData as seen by the LocalStore, including updates that may\n   * have not yet been persisted to the TargetCache.\n   */\n  // Visible for testing.\n  getTargetData(\n    transaction: PersistenceTransaction,\n    target: Target\n  ): PersistencePromise<TargetData | null> {\n    const targetId = this.targetIdByTarget.get(target);\n    if (targetId !== undefined) {\n      return PersistencePromise.resolve<TargetData | null>(\n        this.targetDataByTarget.get(targetId)\n      );\n    } else {\n      return this.targetCache.getTargetData(transaction, target);\n    }\n  }\n\n  /**\n   * Unpin all the documents associated with the given target. If\n   * `keepPersistedTargetData` is set to false and Eager GC enabled, the method\n   * directly removes the associated target data from the target cache.\n   *\n   * Releasing a non-existing `Target` is a no-op.\n   */\n  // PORTING NOTE: `keepPersistedTargetData` is multi-tab only.\n  releaseTarget(\n    targetId: number,\n    keepPersistedTargetData: boolean\n  ): Promise<void> {\n    const targetData = this.targetDataByTarget.get(targetId);\n    debugAssert(\n      targetData !== null,\n      `Tried to release nonexistent target: ${targetId}`\n    );\n\n    const mode = keepPersistedTargetData ? 'readwrite' : 'readwrite-primary';\n    return this.persistence\n      .runTransaction('Release target', mode, txn => {\n        if (!keepPersistedTargetData) {\n          return this.persistence.referenceDelegate.removeTarget(\n            txn,\n            targetData!\n          );\n        } else {\n          return PersistencePromise.resolve();\n        }\n      })\n      .then(() => {\n        this.targetDataByTarget = this.targetDataByTarget.remove(targetId);\n        this.targetIdByTarget.delete(targetData!.target);\n      });\n  }\n\n  /**\n   * Runs the specified query against the local store and returns the results,\n   * potentially taking advantage of query data from previous executions (such\n   * as the set of remote keys).\n   *\n   * @param usePreviousResults Whether results from previous executions can\n   * be used to optimize this query execution.\n   */\n  executeQuery(\n    query: Query,\n    usePreviousResults: boolean\n  ): Promise<QueryResult> {\n    let lastLimboFreeSnapshotVersion = SnapshotVersion.min();\n    let remoteKeys = documentKeySet();\n\n    return this.persistence.runTransaction('Execute query', 'readonly', txn => {\n      return this.getTargetData(txn, query.toTarget())\n        .next(targetData => {\n          if (targetData) {\n            lastLimboFreeSnapshotVersion =\n              targetData.lastLimboFreeSnapshotVersion;\n            return this.targetCache\n              .getMatchingKeysForTargetId(txn, targetData.targetId)\n              .next(result => {\n                remoteKeys = result;\n              });\n          }\n        })\n        .next(() =>\n          this.queryEngine.getDocumentsMatchingQuery(\n            txn,\n            query,\n            usePreviousResults\n              ? lastLimboFreeSnapshotVersion\n              : SnapshotVersion.min(),\n            usePreviousResults ? remoteKeys : documentKeySet()\n          )\n        )\n        .next(documents => {\n          return { documents, remoteKeys };\n        });\n    });\n  }\n\n  private applyWriteToRemoteDocuments(\n    txn: PersistenceTransaction,\n    batchResult: MutationBatchResult,\n    documentBuffer: RemoteDocumentChangeBuffer\n  ): PersistencePromise<void> {\n    const batch = batchResult.batch;\n    const docKeys = batch.keys();\n    let promiseChain = PersistencePromise.resolve();\n    docKeys.forEach(docKey => {\n      promiseChain = promiseChain\n        .next(() => {\n          return documentBuffer.getEntry(txn, docKey);\n        })\n        .next((remoteDoc: MaybeDocument | null) => {\n          let doc = remoteDoc;\n          const ackVersion = batchResult.docVersions.get(docKey);\n          hardAssert(\n            ackVersion !== null,\n            'ackVersions should contain every doc in the write.'\n          );\n          if (!doc || doc.version.compareTo(ackVersion!) < 0) {\n            doc = batch.applyToRemoteDocument(docKey, doc, batchResult);\n            if (!doc) {\n              debugAssert(\n                !remoteDoc,\n                'Mutation batch ' +\n                  batch +\n                  ' applied to document ' +\n                  remoteDoc +\n                  ' resulted in null'\n              );\n            } else {\n              // We use the commitVersion as the readTime rather than the\n              // document's updateTime since the updateTime is not advanced\n              // for updates that do not modify the underlying document.\n              documentBuffer.addEntry(doc, batchResult.commitVersion);\n            }\n          }\n        });\n    });\n    return promiseChain.next(() =>\n      this.mutationQueue.removeMutationBatch(txn, batch)\n    );\n  }\n\n  collectGarbage(garbageCollector: LruGarbageCollector): Promise<LruResults> {\n    return this.persistence.runTransaction(\n      'Collect garbage',\n      'readwrite-primary',\n      txn => garbageCollector.collect(txn, this.targetDataByTarget)\n    );\n  }\n}\n\n/**\n * An implementation of LocalStore that provides additional functionality\n * for MultiTabSyncEngine.\n */\n// PORTING NOTE: Web only.\nexport class MultiTabLocalStore extends LocalStore {\n  protected mutationQueue: IndexedDbMutationQueue;\n  protected remoteDocuments: IndexedDbRemoteDocumentCache;\n  protected targetCache: IndexedDbTargetCache;\n\n  constructor(\n    protected persistence: IndexedDbPersistence,\n    queryEngine: QueryEngine,\n    initialUser: User\n  ) {\n    super(persistence, queryEngine, initialUser);\n\n    this.mutationQueue = persistence.getMutationQueue(initialUser);\n    this.remoteDocuments = persistence.getRemoteDocumentCache();\n    this.targetCache = persistence.getTargetCache();\n  }\n\n  /** Starts the LocalStore. */\n  start(): Promise<void> {\n    return this.synchronizeLastDocumentChangeReadTime();\n  }\n\n  /** Returns the local view of the documents affected by a mutation batch. */\n  lookupMutationDocuments(batchId: BatchId): Promise<MaybeDocumentMap | null> {\n    return this.persistence.runTransaction(\n      'Lookup mutation documents',\n      'readonly',\n      txn => {\n        return this.mutationQueue\n          .lookupMutationKeys(txn, batchId)\n          .next(keys => {\n            if (keys) {\n              return this.localDocuments.getDocuments(\n                txn,\n                keys\n              ) as PersistencePromise<MaybeDocumentMap | null>;\n            } else {\n              return PersistencePromise.resolve<MaybeDocumentMap | null>(null);\n            }\n          });\n      }\n    );\n  }\n\n  removeCachedMutationBatchMetadata(batchId: BatchId): void {\n    this.mutationQueue.removeCachedMutationKeys(batchId);\n  }\n\n  setNetworkEnabled(networkEnabled: boolean): void {\n    this.persistence.setNetworkEnabled(networkEnabled);\n  }\n\n  getActiveClients(): Promise<ClientId[]> {\n    return this.persistence.getActiveClients();\n  }\n\n  getTarget(targetId: TargetId): Promise<Target | null> {\n    const cachedTargetData = this.targetDataByTarget.get(targetId);\n\n    if (cachedTargetData) {\n      return Promise.resolve(cachedTargetData.target);\n    } else {\n      return this.persistence.runTransaction(\n        'Get target data',\n        'readonly',\n        txn => {\n          return this.targetCache\n            .getTargetDataForTarget(txn, targetId)\n            .next(targetData => (targetData ? targetData.target : null));\n        }\n      );\n    }\n  }\n\n  /**\n   * Returns the set of documents that have been updated since the last call.\n   * If this is the first call, returns the set of changes since client\n   * initialization. Further invocations will return document changes since\n   * the point of rejection.\n   */\n  getNewDocumentChanges(): Promise<MaybeDocumentMap> {\n    return this.persistence\n      .runTransaction('Get new document changes', 'readonly', txn =>\n        this.remoteDocuments.getNewDocumentChanges(\n          txn,\n          this.lastDocumentChangeReadTime\n        )\n      )\n      .then(({ changedDocs, readTime }) => {\n        this.lastDocumentChangeReadTime = readTime;\n        return changedDocs;\n      });\n  }\n\n  /**\n   * Reads the newest document change from persistence and forwards the internal\n   * synchronization marker so that calls to `getNewDocumentChanges()`\n   * only return changes that happened after client initialization.\n   */\n  async synchronizeLastDocumentChangeReadTime(): Promise<void> {\n    this.lastDocumentChangeReadTime = await this.persistence.runTransaction(\n      'Synchronize last document change read time',\n      'readonly',\n      txn => this.remoteDocuments.getLastReadTime(txn)\n    );\n  }\n}\n\n/**\n * Verifies the error thrown by a LocalStore operation. If a LocalStore\n * operation fails because the primary lease has been taken by another client,\n * we ignore the error (the persistence layer will immediately call\n * `applyPrimaryLease` to propagate the primary state change). All other errors\n * are re-thrown.\n *\n * @param err An error returned by a LocalStore operation.\n * @return A Promise that resolves after we recovered, or the original error.\n */\nexport async function ignoreIfPrimaryLeaseLoss(\n  err: FirestoreError\n): Promise<void> {\n  if (\n    err.code === Code.FAILED_PRECONDITION &&\n    err.message === PRIMARY_LEASE_LOST_ERROR_MSG\n  ) {\n    logDebug(LOG_TAG, 'Unexpectedly lost primary lease');\n  } else {\n    throw err;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { BatchId, TargetId } from '../core/types';\nimport { documentKeySet, DocumentKeySet } from '../model/collections';\nimport { DocumentKey } from '../model/document_key';\nimport { primitiveComparator } from '../util/misc';\nimport { SortedSet } from '../util/sorted_set';\n\n/**\n * A collection of references to a document from some kind of numbered entity\n * (either a target ID or batch ID). As references are added to or removed from\n * the set corresponding events are emitted to a registered garbage collector.\n *\n * Each reference is represented by a DocumentReference object. Each of them\n * contains enough information to uniquely identify the reference. They are all\n * stored primarily in a set sorted by key. A document is considered garbage if\n * there's no references in that set (this can be efficiently checked thanks to\n * sorting by key).\n *\n * ReferenceSet also keeps a secondary set that contains references sorted by\n * IDs. This one is used to efficiently implement removal of all references by\n * some target ID.\n */\nexport class ReferenceSet {\n  // A set of outstanding references to a document sorted by key.\n  private refsByKey = new SortedSet(DocReference.compareByKey);\n\n  // A set of outstanding references to a document sorted by target id.\n  private refsByTarget = new SortedSet(DocReference.compareByTargetId);\n\n  /** Returns true if the reference set contains no references. */\n  isEmpty(): boolean {\n    return this.refsByKey.isEmpty();\n  }\n\n  /** Adds a reference to the given document key for the given ID. */\n  addReference(key: DocumentKey, id: TargetId | BatchId): void {\n    const ref = new DocReference(key, id);\n    this.refsByKey = this.refsByKey.add(ref);\n    this.refsByTarget = this.refsByTarget.add(ref);\n  }\n\n  /** Add references to the given document keys for the given ID. */\n  addReferences(keys: DocumentKeySet, id: TargetId | BatchId): void {\n    keys.forEach(key => this.addReference(key, id));\n  }\n\n  /**\n   * Removes a reference to the given document key for the given\n   * ID.\n   */\n  removeReference(key: DocumentKey, id: TargetId | BatchId): void {\n    this.removeRef(new DocReference(key, id));\n  }\n\n  removeReferences(keys: DocumentKeySet, id: TargetId | BatchId): void {\n    keys.forEach(key => this.removeReference(key, id));\n  }\n\n  /**\n   * Clears all references with a given ID. Calls removeRef() for each key\n   * removed.\n   */\n  removeReferencesForId(id: TargetId | BatchId): DocumentKey[] {\n    const emptyKey = DocumentKey.EMPTY;\n    const startRef = new DocReference(emptyKey, id);\n    const endRef = new DocReference(emptyKey, id + 1);\n    const keys: DocumentKey[] = [];\n    this.refsByTarget.forEachInRange([startRef, endRef], ref => {\n      this.removeRef(ref);\n      keys.push(ref.key);\n    });\n    return keys;\n  }\n\n  removeAllReferences(): void {\n    this.refsByKey.forEach(ref => this.removeRef(ref));\n  }\n\n  private removeRef(ref: DocReference): void {\n    this.refsByKey = this.refsByKey.delete(ref);\n    this.refsByTarget = this.refsByTarget.delete(ref);\n  }\n\n  referencesForId(id: TargetId | BatchId): DocumentKeySet {\n    const emptyKey = DocumentKey.EMPTY;\n    const startRef = new DocReference(emptyKey, id);\n    const endRef = new DocReference(emptyKey, id + 1);\n    let keys = documentKeySet();\n    this.refsByTarget.forEachInRange([startRef, endRef], ref => {\n      keys = keys.add(ref.key);\n    });\n    return keys;\n  }\n\n  containsKey(key: DocumentKey): boolean {\n    const ref = new DocReference(key, 0);\n    const firstRef = this.refsByKey.firstAfterOrEqual(ref);\n    return firstRef !== null && key.isEqual(firstRef.key);\n  }\n}\n\nexport class DocReference {\n  constructor(\n    public key: DocumentKey,\n    public targetOrBatchId: TargetId | BatchId\n  ) {}\n\n  /** Compare by key then by ID */\n  static compareByKey(left: DocReference, right: DocReference): number {\n    return (\n      DocumentKey.comparator(left.key, right.key) ||\n      primitiveComparator(left.targetOrBatchId, right.targetOrBatchId)\n    );\n  }\n\n  /** Compare by ID then by key */\n  static compareByTargetId(left: DocReference, right: DocReference): number {\n    return (\n      primitiveComparator(left.targetOrBatchId, right.targetOrBatchId) ||\n      DocumentKey.comparator(left.key, right.key)\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { fail } from './assert';\nimport { Code, FirestoreError } from './error';\nimport { Dict, forEach } from './obj';\nimport { DocumentKey } from '../model/document_key';\nimport { ResourcePath } from '../model/path';\n\n/** Types accepted by validateType() and related methods for validation. */\nexport type ValidationType =\n  | 'undefined'\n  | 'object'\n  | 'function'\n  | 'boolean'\n  | 'number'\n  | 'string'\n  | 'non-empty string';\n\n/**\n * Validates that no arguments were passed in the invocation of functionName.\n *\n * Forward the magic \"arguments\" variable as second parameter on which the\n * parameter validation is performed:\n * validateNoArgs('myFunction', arguments);\n */\nexport function validateNoArgs(functionName: string, args: IArguments): void {\n  if (args.length !== 0) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Function ${functionName}() does not support arguments, ` +\n        'but was called with ' +\n        formatPlural(args.length, 'argument') +\n        '.'\n    );\n  }\n}\n\n/**\n * Validates the invocation of functionName has the exact number of arguments.\n *\n * Forward the magic \"arguments\" variable as second parameter on which the\n * parameter validation is performed:\n * validateExactNumberOfArgs('myFunction', arguments, 2);\n */\nexport function validateExactNumberOfArgs(\n  functionName: string,\n  args: IArguments,\n  numberOfArgs: number\n): void {\n  if (args.length !== numberOfArgs) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Function ${functionName}() requires ` +\n        formatPlural(numberOfArgs, 'argument') +\n        ', but was called with ' +\n        formatPlural(args.length, 'argument') +\n        '.'\n    );\n  }\n}\n\n/**\n * Validates the invocation of functionName has at least the provided number of\n * arguments (but can have many more).\n *\n * Forward the magic \"arguments\" variable as second parameter on which the\n * parameter validation is performed:\n * validateAtLeastNumberOfArgs('myFunction', arguments, 2);\n */\nexport function validateAtLeastNumberOfArgs(\n  functionName: string,\n  args: IArguments,\n  minNumberOfArgs: number\n): void {\n  if (args.length < minNumberOfArgs) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Function ${functionName}() requires at least ` +\n        formatPlural(minNumberOfArgs, 'argument') +\n        ', but was called with ' +\n        formatPlural(args.length, 'argument') +\n        '.'\n    );\n  }\n}\n\n/**\n * Validates the invocation of functionName has number of arguments between\n * the values provided.\n *\n * Forward the magic \"arguments\" variable as second parameter on which the\n * parameter validation is performed:\n * validateBetweenNumberOfArgs('myFunction', arguments, 2, 3);\n */\nexport function validateBetweenNumberOfArgs(\n  functionName: string,\n  args: IArguments,\n  minNumberOfArgs: number,\n  maxNumberOfArgs: number\n): void {\n  if (args.length < minNumberOfArgs || args.length > maxNumberOfArgs) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Function ${functionName}() requires between ${minNumberOfArgs} and ` +\n        `${maxNumberOfArgs} arguments, but was called with ` +\n        formatPlural(args.length, 'argument') +\n        '.'\n    );\n  }\n}\n\n/**\n * Validates the provided argument is an array and has as least the expected\n * number of elements.\n */\nexport function validateNamedArrayAtLeastNumberOfElements<T>(\n  functionName: string,\n  value: T[],\n  name: string,\n  minNumberOfElements: number\n): void {\n  if (!(value instanceof Array) || value.length < minNumberOfElements) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Function ${functionName}() requires its ${name} argument to be an ` +\n        'array with at least ' +\n        `${formatPlural(minNumberOfElements, 'element')}.`\n    );\n  }\n}\n\n/**\n * Validates the provided positional argument has the native JavaScript type\n * using typeof checks.\n */\nexport function validateArgType(\n  functionName: string,\n  type: ValidationType,\n  position: number,\n  argument: unknown\n): void {\n  validateType(functionName, type, `${ordinal(position)} argument`, argument);\n}\n\n/**\n * Validates the provided argument has the native JavaScript type using\n * typeof checks or is undefined.\n */\nexport function validateOptionalArgType(\n  functionName: string,\n  type: ValidationType,\n  position: number,\n  argument: unknown\n): void {\n  if (argument !== undefined) {\n    validateArgType(functionName, type, position, argument);\n  }\n}\n\n/**\n * Validates the provided named option has the native JavaScript type using\n * typeof checks.\n */\nexport function validateNamedType(\n  functionName: string,\n  type: ValidationType,\n  optionName: string,\n  argument: unknown\n): void {\n  validateType(functionName, type, `${optionName} option`, argument);\n}\n\n/**\n * Validates the provided named option has the native JavaScript type using\n * typeof checks or is undefined.\n */\nexport function validateNamedOptionalType(\n  functionName: string,\n  type: ValidationType,\n  optionName: string,\n  argument: unknown\n): void {\n  if (argument !== undefined) {\n    validateNamedType(functionName, type, optionName, argument);\n  }\n}\n\nexport function validateArrayElements<T>(\n  functionName: string,\n  optionName: string,\n  typeDescription: string,\n  argument: T[],\n  validator: (arg0: T) => boolean\n): void {\n  if (!(argument instanceof Array)) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Function ${functionName}() requires its ${optionName} ` +\n        `option to be an array, but it was: ${valueDescription(argument)}`\n    );\n  }\n\n  for (let i = 0; i < argument.length; ++i) {\n    if (!validator(argument[i])) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        `Function ${functionName}() requires all ${optionName} ` +\n          `elements to be ${typeDescription}, but the value at index ${i} ` +\n          `was: ${valueDescription(argument[i])}`\n      );\n    }\n  }\n}\n\nexport function validateOptionalArrayElements<T>(\n  functionName: string,\n  optionName: string,\n  typeDescription: string,\n  argument: T[] | undefined,\n  validator: (arg0: T) => boolean\n): void {\n  if (argument !== undefined) {\n    validateArrayElements(\n      functionName,\n      optionName,\n      typeDescription,\n      argument,\n      validator\n    );\n  }\n}\n\n/**\n * Validates that the provided named option equals one of the expected values.\n */\nexport function validateNamedPropertyEquals<T>(\n  functionName: string,\n  inputName: string,\n  optionName: string,\n  input: T,\n  expected: T[]\n): void {\n  const expectedDescription: string[] = [];\n\n  for (const val of expected) {\n    if (val === input) {\n      return;\n    }\n    expectedDescription.push(valueDescription(val));\n  }\n\n  const actualDescription = valueDescription(input);\n  throw new FirestoreError(\n    Code.INVALID_ARGUMENT,\n    `Invalid value ${actualDescription} provided to function ${functionName}() for option ` +\n      `\"${optionName}\". Acceptable values: ${expectedDescription.join(', ')}`\n  );\n}\n\n/**\n * Validates that the provided named option equals one of the expected values or\n * is undefined.\n */\nexport function validateNamedOptionalPropertyEquals<T>(\n  functionName: string,\n  inputName: string,\n  optionName: string,\n  input: T,\n  expected: T[]\n): void {\n  if (input !== undefined) {\n    validateNamedPropertyEquals(\n      functionName,\n      inputName,\n      optionName,\n      input,\n      expected\n    );\n  }\n}\n\n/**\n * Validates that the provided argument is a valid enum.\n *\n * @param functionName Function making the validation call.\n * @param enums Array containing all possible values for the enum.\n * @param position Position of the argument in `functionName`.\n * @param argument Argument to validate.\n * @return The value as T if the argument can be converted.\n */\nexport function validateStringEnum<T>(\n  functionName: string,\n  enums: T[],\n  position: number,\n  argument: unknown\n): T {\n  if (!enums.some(element => element === argument)) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Invalid value ${valueDescription(argument)} provided to function ` +\n        `${functionName}() for its ${ordinal(position)} argument. Acceptable ` +\n        `values: ${enums.join(', ')}`\n    );\n  }\n  return argument as T;\n}\n\n/**\n * Validates that `path` refers to a document (indicated by the fact it contains\n * an even numbers of segments).\n */\nexport function validateDocumentPath(path: ResourcePath): void {\n  if (!DocumentKey.isDocumentKey(path)) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Invalid document path (${path}). Path points to a collection.`\n    );\n  }\n}\n\n/**\n * Validates that `path` refers to a collection (indicated by the fact it\n * contains an odd numbers of segments).\n */\nexport function validateCollectionPath(path: ResourcePath): void {\n  if (DocumentKey.isDocumentKey(path)) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Invalid collection path (${path}). Path points to a document.`\n    );\n  }\n}\n\n/** Helper to validate the type of a provided input. */\nfunction validateType(\n  functionName: string,\n  type: ValidationType,\n  inputName: string,\n  input: unknown\n): void {\n  let valid = false;\n  if (type === 'object') {\n    valid = isPlainObject(input);\n  } else if (type === 'non-empty string') {\n    valid = typeof input === 'string' && input !== '';\n  } else {\n    valid = typeof input === type;\n  }\n\n  if (!valid) {\n    const description = valueDescription(input);\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Function ${functionName}() requires its ${inputName} ` +\n        `to be of type ${type}, but it was: ${description}`\n    );\n  }\n}\n\n/**\n * Returns true if it's a non-null object without a custom prototype\n * (i.e. excludes Array, Date, etc.).\n */\nexport function isPlainObject(input: unknown): boolean {\n  return (\n    typeof input === 'object' &&\n    input !== null &&\n    (Object.getPrototypeOf(input) === Object.prototype ||\n      Object.getPrototypeOf(input) === null)\n  );\n}\n\n/** Returns a string describing the type / value of the provided input. */\nexport function valueDescription(input: unknown): string {\n  if (input === undefined) {\n    return 'undefined';\n  } else if (input === null) {\n    return 'null';\n  } else if (typeof input === 'string') {\n    if (input.length > 20) {\n      input = `${input.substring(0, 20)}...`;\n    }\n    return JSON.stringify(input);\n  } else if (typeof input === 'number' || typeof input === 'boolean') {\n    return '' + input;\n  } else if (typeof input === 'object') {\n    if (input instanceof Array) {\n      return 'an array';\n    } else {\n      const customObjectName = tryGetCustomObjectType(input!);\n      if (customObjectName) {\n        return `a custom ${customObjectName} object`;\n      } else {\n        return 'an object';\n      }\n    }\n  } else if (typeof input === 'function') {\n    return 'a function';\n  } else {\n    return fail('Unknown wrong type: ' + typeof input);\n  }\n}\n\n/** Hacky method to try to get the constructor name for an object. */\nexport function tryGetCustomObjectType(input: object): string | null {\n  if (input.constructor) {\n    const funcNameRegex = /function\\s+([^\\s(]+)\\s*\\(/;\n    const results = funcNameRegex.exec(input.constructor.toString());\n    if (results && results.length > 1) {\n      return results[1];\n    }\n  }\n  return null;\n}\n\n/** Validates the provided argument is defined. */\nexport function validateDefined(\n  functionName: string,\n  position: number,\n  argument: unknown\n): void {\n  if (argument === undefined) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Function ${functionName}() requires a valid ${ordinal(position)} ` +\n        `argument, but it was undefined.`\n    );\n  }\n}\n\n/**\n * Validates the provided positional argument is an object, and its keys and\n * values match the expected keys and types provided in optionTypes.\n */\nexport function validateOptionNames(\n  functionName: string,\n  options: object,\n  optionNames: string[]\n): void {\n  forEach(options as Dict<unknown>, (key, _) => {\n    if (optionNames.indexOf(key) < 0) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        `Unknown option '${key}' passed to function ${functionName}(). ` +\n          'Available options: ' +\n          optionNames.join(', ')\n      );\n    }\n  });\n}\n\n/**\n * Helper method to throw an error that the provided argument did not pass\n * an instanceof check.\n */\nexport function invalidClassError(\n  functionName: string,\n  type: string,\n  position: number,\n  argument: unknown\n): Error {\n  const description = valueDescription(argument);\n  return new FirestoreError(\n    Code.INVALID_ARGUMENT,\n    `Function ${functionName}() requires its ${ordinal(position)} ` +\n      `argument to be a ${type}, but it was: ${description}`\n  );\n}\n\nexport function validatePositiveNumber(\n  functionName: string,\n  position: number,\n  n: number\n): void {\n  if (n <= 0) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Function ${functionName}() requires its ${ordinal(\n        position\n      )} argument to be a positive number, but it was: ${n}.`\n    );\n  }\n}\n\n/** Converts a number to its english word representation */\nfunction ordinal(num: number): string {\n  switch (num) {\n    case 1:\n      return 'first';\n    case 2:\n      return 'second';\n    case 3:\n      return 'third';\n    default:\n      return num + 'th';\n  }\n}\n\n/**\n * Formats the given word as plural conditionally given the preceding number.\n */\nfunction formatPlural(num: number, str: string): string {\n  return `${num} ${str}` + (num === 1 ? '' : 's');\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PlatformSupport } from '../platform/platform';\nimport { Code, FirestoreError } from '../util/error';\nimport {\n  invalidClassError,\n  validateArgType,\n  validateExactNumberOfArgs\n} from '../util/input_validation';\nimport { ByteString } from '../util/byte_string';\n\n/** Helper function to assert Uint8Array is available at runtime. */\nfunction assertUint8ArrayAvailable(): void {\n  if (typeof Uint8Array === 'undefined') {\n    throw new FirestoreError(\n      Code.UNIMPLEMENTED,\n      'Uint8Arrays are not available in this environment.'\n    );\n  }\n}\n\n/** Helper function to assert Base64 functions are available at runtime. */\nfunction assertBase64Available(): void {\n  if (!PlatformSupport.getPlatform().base64Available) {\n    throw new FirestoreError(\n      Code.UNIMPLEMENTED,\n      'Blobs are unavailable in Firestore in this environment.'\n    );\n  }\n}\n\n/**\n * Immutable class holding a blob (binary data).\n * This class is directly exposed in the public API.\n *\n * Note that while you can't hide the constructor in JavaScript code, we are\n * using the hack above to make sure no-one outside this module can call it.\n */\nexport class Blob {\n  // Prefix with underscore to signal that we consider this not part of the\n  // public API and to prevent it from showing up for autocompletion.\n  _byteString: ByteString;\n\n  constructor(byteString: ByteString) {\n    assertBase64Available();\n    this._byteString = byteString;\n  }\n\n  static fromBase64String(base64: string): Blob {\n    validateExactNumberOfArgs('Blob.fromBase64String', arguments, 1);\n    validateArgType('Blob.fromBase64String', 'string', 1, base64);\n    assertBase64Available();\n    try {\n      return new Blob(ByteString.fromBase64String(base64));\n    } catch (e) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Failed to construct Blob from Base64 string: ' + e\n      );\n    }\n  }\n\n  static fromUint8Array(array: Uint8Array): Blob {\n    validateExactNumberOfArgs('Blob.fromUint8Array', arguments, 1);\n    assertUint8ArrayAvailable();\n    if (!(array instanceof Uint8Array)) {\n      throw invalidClassError('Blob.fromUint8Array', 'Uint8Array', 1, array);\n    }\n    return new Blob(ByteString.fromUint8Array(array));\n  }\n\n  toBase64(): string {\n    validateExactNumberOfArgs('Blob.toBase64', arguments, 0);\n    assertBase64Available();\n    return this._byteString.toBase64();\n  }\n\n  toUint8Array(): Uint8Array {\n    validateExactNumberOfArgs('Blob.toUint8Array', arguments, 0);\n    assertUint8ArrayAvailable();\n    return this._byteString.toUint8Array();\n  }\n\n  toString(): string {\n    return 'Blob(base64: ' + this.toBase64() + ')';\n  }\n\n  isEqual(other: Blob): boolean {\n    return this._byteString.isEqual(other._byteString);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as firestore from '@firebase/firestore-types';\n\nimport { FieldPath as InternalFieldPath } from '../model/path';\nimport { Code, FirestoreError } from '../util/error';\nimport {\n  invalidClassError,\n  validateArgType,\n  validateNamedArrayAtLeastNumberOfElements\n} from '../util/input_validation';\n\n// The objects that are a part of this API are exposed to third-parties as\n// compiled javascript so we want to flag our private members with a leading\n// underscore to discourage their use.\n\n/**\n * A field class base class that is shared by the lite, full and legacy SDK,\n * which supports shared code that deals with FieldPaths.\n */\nexport abstract class BaseFieldPath {\n  /** Internal representation of a Firestore field path. */\n  readonly _internalPath: InternalFieldPath;\n\n  constructor(fieldNames: string[]) {\n    validateNamedArrayAtLeastNumberOfElements(\n      'FieldPath',\n      fieldNames,\n      'fieldNames',\n      1\n    );\n\n    for (let i = 0; i < fieldNames.length; ++i) {\n      validateArgType('FieldPath', 'string', i, fieldNames[i]);\n      if (fieldNames[i].length === 0) {\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          `Invalid field name at argument $(i + 1). ` +\n            'Field names must not be empty.'\n        );\n      }\n    }\n\n    this._internalPath = new InternalFieldPath(fieldNames);\n  }\n}\n\n/**\n * A FieldPath refers to a field in a document. The path may consist of a single\n * field name (referring to a top-level field in the document), or a list of\n * field names (referring to a nested field in the document).\n */\nexport class FieldPath extends BaseFieldPath implements firestore.FieldPath {\n  /**\n   * Creates a FieldPath from the provided field names. If more than one field\n   * name is provided, the path will point to a nested field in a document.\n   *\n   * @param fieldNames A list of field names.\n   */\n  constructor(...fieldNames: string[]) {\n    super(fieldNames);\n  }\n\n  /**\n   * Internal Note: The backend doesn't technically support querying by\n   * document ID. Instead it queries by the entire document name (full path\n   * included), but in the cases we currently support documentId(), the net\n   * effect is the same.\n   */\n  private static readonly _DOCUMENT_ID = new FieldPath(\n    InternalFieldPath.keyField().canonicalString()\n  );\n\n  static documentId(): FieldPath {\n    return FieldPath._DOCUMENT_ID;\n  }\n\n  isEqual(other: firestore.FieldPath): boolean {\n    if (!(other instanceof FieldPath)) {\n      throw invalidClassError('isEqual', 'FieldPath', 1, other);\n    }\n    return this._internalPath.isEqual(other._internalPath);\n  }\n}\n\n/**\n * Matches any characters in a field path string that are reserved.\n */\nconst RESERVED = new RegExp('[~\\\\*/\\\\[\\\\]]');\n\n/**\n * Parses a field path string into a FieldPath, treating dots as separators.\n */\nexport function fromDotSeparatedString(path: string): FieldPath {\n  const found = path.search(RESERVED);\n  if (found >= 0) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Invalid field path (${path}). Paths must not contain ` +\n        `'~', '*', '/', '[', or ']'`\n    );\n  }\n  try {\n    return new FieldPath(...path.split('.'));\n  } catch (e) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Invalid field path (${path}). Paths must not be empty, ` +\n        `begin with '.', end with '.', or contain '..'`\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as firestore from '@firebase/firestore-types';\nimport {\n  validateArgType,\n  validateAtLeastNumberOfArgs,\n  validateExactNumberOfArgs,\n  validateNoArgs\n} from '../util/input_validation';\nimport { FieldTransform } from '../model/mutation';\nimport {\n  ArrayRemoveTransformOperation,\n  ArrayUnionTransformOperation,\n  NumericIncrementTransformOperation,\n  ServerTimestampTransform\n} from '../model/transform_operation';\nimport { ParseContext, parseData, UserDataSource } from './user_data_reader';\nimport { debugAssert } from '../util/assert';\n\n/**\n * An opaque base class for FieldValue sentinel objects in our public API that\n * is shared between the full, lite and legacy SDK.\n */\nexport abstract class SerializableFieldValue {\n  /** The public API endpoint that returns this class. */\n  abstract readonly _methodName: string;\n\n  /** A pointer to the implementing class. */\n  readonly _delegate: SerializableFieldValue = this;\n\n  abstract _toFieldTransform(context: ParseContext): FieldTransform | null;\n\n  abstract isEqual(other: SerializableFieldValue): boolean;\n}\n\nexport class DeleteFieldValueImpl extends SerializableFieldValue {\n  constructor(readonly _methodName: string) {\n    super();\n  }\n\n  _toFieldTransform(context: ParseContext): null {\n    if (context.dataSource === UserDataSource.MergeSet) {\n      // No transform to add for a delete, but we need to add it to our\n      // fieldMask so it gets deleted.\n      context.fieldMask.push(context.path!);\n    } else if (context.dataSource === UserDataSource.Update) {\n      debugAssert(\n        context.path!.length > 0,\n        `${this._methodName}() at the top level should have already ` +\n          'been handled.'\n      );\n      throw context.createError(\n        `${this._methodName}() can only appear at the top level ` +\n          'of your update data'\n      );\n    } else {\n      // We shouldn't encounter delete sentinels for queries or non-merge set() calls.\n      throw context.createError(\n        `${this._methodName}() cannot be used with set() unless you pass ` +\n          '{merge:true}'\n      );\n    }\n    return null;\n  }\n\n  isEqual(other: FieldValue): boolean {\n    return other instanceof DeleteFieldValueImpl;\n  }\n}\n\nexport class ServerTimestampFieldValueImpl extends SerializableFieldValue {\n  constructor(readonly _methodName: string) {\n    super();\n  }\n\n  _toFieldTransform(context: ParseContext): FieldTransform {\n    return new FieldTransform(context.path!, ServerTimestampTransform.instance);\n  }\n\n  isEqual(other: FieldValue): boolean {\n    return other instanceof ServerTimestampFieldValueImpl;\n  }\n}\n\nexport class ArrayUnionFieldValueImpl extends SerializableFieldValue {\n  constructor(\n    readonly _methodName: string,\n    private readonly _elements: unknown[]\n  ) {\n    super();\n  }\n\n  _toFieldTransform(context: ParseContext): FieldTransform {\n    // Although array transforms are used with writes, the actual elements\n    // being uniomed or removed are not considered writes since they cannot\n    // contain any FieldValue sentinels, etc.\n    const parseContext = new ParseContext(\n      {\n        dataSource: UserDataSource.Argument,\n        methodName: this._methodName,\n        arrayElement: true\n      },\n      context.databaseId,\n      context.serializer,\n      context.ignoreUndefinedProperties\n    );\n    const parsedElements = this._elements.map(\n      element => parseData(element, parseContext)!\n    );\n    const arrayUnion = new ArrayUnionTransformOperation(parsedElements);\n    return new FieldTransform(context.path!, arrayUnion);\n  }\n\n  isEqual(other: FieldValue): boolean {\n    // TODO(mrschmidt): Implement isEquals\n    return this === other;\n  }\n}\n\nexport class ArrayRemoveFieldValueImpl extends SerializableFieldValue {\n  constructor(readonly _methodName: string, readonly _elements: unknown[]) {\n    super();\n  }\n\n  _toFieldTransform(context: ParseContext): FieldTransform {\n    // Although array transforms are used with writes, the actual elements\n    // being unioned or removed are not considered writes since they cannot\n    // contain any FieldValue sentinels, etc.\n    const parseContext = new ParseContext(\n      {\n        dataSource: UserDataSource.Argument,\n        methodName: this._methodName,\n        arrayElement: true\n      },\n      context.databaseId,\n      context.serializer,\n      context.ignoreUndefinedProperties\n    );\n    const parsedElements = this._elements.map(\n      element => parseData(element, parseContext)!\n    );\n    const arrayUnion = new ArrayRemoveTransformOperation(parsedElements);\n    return new FieldTransform(context.path!, arrayUnion);\n  }\n\n  isEqual(other: FieldValue): boolean {\n    // TODO(mrschmidt): Implement isEquals\n    return this === other;\n  }\n}\n\nexport class NumericIncrementFieldValueImpl extends SerializableFieldValue {\n  constructor(readonly _methodName: string, private readonly _operand: number) {\n    super();\n  }\n\n  _toFieldTransform(context: ParseContext): FieldTransform {\n    const parseContext = new ParseContext(\n      {\n        dataSource: UserDataSource.Argument,\n        methodName: this._methodName\n      },\n      context.databaseId,\n      context.serializer,\n      context.ignoreUndefinedProperties\n    );\n    const operand = parseData(this._operand, parseContext)!;\n    const numericIncrement = new NumericIncrementTransformOperation(\n      context.serializer,\n      operand\n    );\n    return new FieldTransform(context.path!, numericIncrement);\n  }\n\n  isEqual(other: FieldValue): boolean {\n    // TODO(mrschmidt): Implement isEquals\n    return this === other;\n  }\n}\n\n/** The public FieldValue class of the lite API. */\nexport abstract class FieldValue extends SerializableFieldValue\n  implements firestore.FieldValue {\n  static delete(): firestore.FieldValue {\n    validateNoArgs('FieldValue.delete', arguments);\n    return new FieldValueDelegate(\n      new DeleteFieldValueImpl('FieldValue.delete')\n    );\n  }\n\n  static serverTimestamp(): firestore.FieldValue {\n    validateNoArgs('FieldValue.serverTimestamp', arguments);\n    return new FieldValueDelegate(\n      new ServerTimestampFieldValueImpl('FieldValue.serverTimestamp')\n    );\n  }\n\n  static arrayUnion(...elements: unknown[]): firestore.FieldValue {\n    validateAtLeastNumberOfArgs('FieldValue.arrayUnion', arguments, 1);\n    // NOTE: We don't actually parse the data until it's used in set() or\n    // update() since we'd need the Firestore instance to do this.\n    return new FieldValueDelegate(\n      new ArrayUnionFieldValueImpl('FieldValue.arrayUnion', elements)\n    );\n  }\n\n  static arrayRemove(...elements: unknown[]): firestore.FieldValue {\n    validateAtLeastNumberOfArgs('FieldValue.arrayRemove', arguments, 1);\n    // NOTE: We don't actually parse the data until it's used in set() or\n    // update() since we'd need the Firestore instance to do this.\n    return new FieldValueDelegate(\n      new ArrayRemoveFieldValueImpl('FieldValue.arrayRemove', elements)\n    );\n  }\n\n  static increment(n: number): firestore.FieldValue {\n    validateArgType('FieldValue.increment', 'number', 1, n);\n    validateExactNumberOfArgs('FieldValue.increment', arguments, 1);\n    return new FieldValueDelegate(\n      new NumericIncrementFieldValueImpl('FieldValue.increment', n)\n    );\n  }\n}\n\n/**\n * A delegate class that allows the FieldValue implementations returned by\n * deleteField(), serverTimestamp(), arrayUnion(), arrayRemove() and\n * increment() to be an instance of the legacy FieldValue class declared above.\n *\n * We don't directly subclass `FieldValue` in the various field value\n * implementations as the base FieldValue class differs between the lite, full\n * and legacy SDK.\n */\nclass FieldValueDelegate extends FieldValue implements firestore.FieldValue {\n  readonly _methodName: string;\n\n  constructor(readonly _delegate: SerializableFieldValue) {\n    super();\n    this._methodName = _delegate._methodName;\n  }\n\n  _toFieldTransform(context: ParseContext): FieldTransform | null {\n    return this._delegate._toFieldTransform(context);\n  }\n\n  isEqual(other: firestore.FieldValue): boolean {\n    if (!(other instanceof FieldValueDelegate)) {\n      return false;\n    }\n    return this._delegate.isEqual(other._delegate);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Code, FirestoreError } from '../util/error';\nimport {\n  validateArgType,\n  validateExactNumberOfArgs\n} from '../util/input_validation';\nimport { primitiveComparator } from '../util/misc';\n\n/**\n * Immutable class representing a geo point as latitude-longitude pair.\n * This class is directly exposed in the public API, including its constructor.\n */\nexport class GeoPoint {\n  // Prefix with underscore to signal this is a private variable in JS and\n  // prevent it showing up for autocompletion when typing latitude or longitude.\n  private _lat: number;\n  private _long: number;\n\n  constructor(latitude: number, longitude: number) {\n    validateExactNumberOfArgs('GeoPoint', arguments, 2);\n    validateArgType('GeoPoint', 'number', 1, latitude);\n    validateArgType('GeoPoint', 'number', 2, longitude);\n    if (!isFinite(latitude) || latitude < -90 || latitude > 90) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Latitude must be a number between -90 and 90, but was: ' + latitude\n      );\n    }\n    if (!isFinite(longitude) || longitude < -180 || longitude > 180) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Longitude must be a number between -180 and 180, but was: ' + longitude\n      );\n    }\n\n    this._lat = latitude;\n    this._long = longitude;\n  }\n\n  /**\n   * Returns the latitude of this geo point, a number between -90 and 90.\n   */\n  get latitude(): number {\n    return this._lat;\n  }\n\n  /**\n   * Returns the longitude of this geo point, a number between -180 and 180.\n   */\n  get longitude(): number {\n    return this._long;\n  }\n\n  isEqual(other: GeoPoint): boolean {\n    return this._lat === other._lat && this._long === other._long;\n  }\n\n  /**\n   * Actually private to JS consumers of our API, so this function is prefixed\n   * with an underscore.\n   */\n  _compareTo(other: GeoPoint): number {\n    return (\n      primitiveComparator(this._lat, other._lat) ||\n      primitiveComparator(this._long, other._long)\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as firestore from '@firebase/firestore-types';\n\nimport * as api from '../protos/firestore_proto_api';\n\nimport { Timestamp } from './timestamp';\nimport { DatabaseId } from '../core/database_info';\nimport { DocumentKey } from '../model/document_key';\nimport {\n  FieldMask,\n  FieldTransform,\n  Mutation,\n  PatchMutation,\n  Precondition,\n  SetMutation,\n  TransformMutation\n} from '../model/mutation';\nimport { FieldPath } from '../model/path';\nimport { debugAssert, fail } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\nimport { isPlainObject, valueDescription } from '../util/input_validation';\nimport { Dict, forEach, isEmpty } from '../util/obj';\nimport { ObjectValue, ObjectValueBuilder } from '../model/object_value';\nimport { JsonProtoSerializer } from '../remote/serializer';\nimport { Blob } from './blob';\nimport { BaseFieldPath, fromDotSeparatedString } from './field_path';\nimport { DeleteFieldValueImpl, SerializableFieldValue } from './field_value';\nimport { GeoPoint } from './geo_point';\nimport { PlatformSupport } from '../platform/platform';\n\nconst RESERVED_FIELD_REGEX = /^__.*__$/;\n\n/**\n * An untyped Firestore Data Converter interface that is shared between the\n * lite, full and legacy SDK.\n */\nexport interface UntypedFirestoreDataConverter<T> {\n  toFirestore(modelObject: T): firestore.DocumentData;\n  fromFirestore(snapshot: unknown, options?: unknown): T;\n}\n\n/**\n * A reference to a document in a Firebase project.\n *\n * This class serves as a common base class for the public DocumentReferences\n * exposed in the lite, full and legacy SDK.\n */\nexport class DocumentKeyReference<T> {\n  constructor(\n    public readonly _databaseId: DatabaseId,\n    public readonly _key: DocumentKey,\n    public readonly _converter: UntypedFirestoreDataConverter<T> | null\n  ) {}\n}\n\n/** The result of parsing document data (e.g. for a setData call). */\nexport class ParsedSetData {\n  constructor(\n    readonly data: ObjectValue,\n    readonly fieldMask: FieldMask | null,\n    readonly fieldTransforms: FieldTransform[]\n  ) {}\n\n  toMutations(key: DocumentKey, precondition: Precondition): Mutation[] {\n    const mutations = [] as Mutation[];\n    if (this.fieldMask !== null) {\n      mutations.push(\n        new PatchMutation(key, this.data, this.fieldMask, precondition)\n      );\n    } else {\n      mutations.push(new SetMutation(key, this.data, precondition));\n    }\n    if (this.fieldTransforms.length > 0) {\n      mutations.push(new TransformMutation(key, this.fieldTransforms));\n    }\n    return mutations;\n  }\n}\n\n/** The result of parsing \"update\" data (i.e. for an updateData call). */\nexport class ParsedUpdateData {\n  constructor(\n    readonly data: ObjectValue,\n    readonly fieldMask: FieldMask,\n    readonly fieldTransforms: FieldTransform[]\n  ) {}\n\n  toMutations(key: DocumentKey, precondition: Precondition): Mutation[] {\n    const mutations = [\n      new PatchMutation(key, this.data, this.fieldMask, precondition)\n    ] as Mutation[];\n    if (this.fieldTransforms.length > 0) {\n      mutations.push(new TransformMutation(key, this.fieldTransforms));\n    }\n    return mutations;\n  }\n}\n\n/*\n * Represents what type of API method provided the data being parsed; useful\n * for determining which error conditions apply during parsing and providing\n * better error messages.\n */\nexport const enum UserDataSource {\n  Set,\n  Update,\n  MergeSet,\n  /**\n   * Indicates the source is a where clause, cursor bound, arrayUnion()\n   * element, etc. Of note, isWrite(source) will return false.\n   */\n  Argument,\n  /**\n   * Indicates that the source is an Argument that may directly contain nested\n   * arrays (e.g. the operand of an `in` query).\n   */\n  ArrayArgument\n}\n\nfunction isWrite(dataSource: UserDataSource): boolean {\n  switch (dataSource) {\n    case UserDataSource.Set: // fall through\n    case UserDataSource.MergeSet: // fall through\n    case UserDataSource.Update:\n      return true;\n    case UserDataSource.Argument:\n    case UserDataSource.ArrayArgument:\n      return false;\n    default:\n      throw fail(`Unexpected case for UserDataSource: ${dataSource}`);\n  }\n}\n\n/** Contains the settings that are mutated as we parse user data. */\ninterface ContextSettings {\n  /** Indicates what kind of API method this data came from. */\n  readonly dataSource: UserDataSource;\n  /** The name of the method the user called to create the ParseContext. */\n  readonly methodName: string;\n  /**\n   * A path within the object being parsed. This could be an empty path (in\n   * which case the context represents the root of the data being parsed), or a\n   * nonempty path (indicating the context represents a nested location within\n   * the data).\n   */\n  readonly path?: FieldPath;\n  /**\n   * Whether or not this context corresponds to an element of an array.\n   * If not set, elements are treated as if they were outside of arrays.\n   */\n  readonly arrayElement?: boolean;\n}\n\n/** A \"context\" object passed around while parsing user data. */\nexport class ParseContext {\n  readonly fieldTransforms: FieldTransform[];\n  readonly fieldMask: FieldPath[];\n  /**\n   * Initializes a ParseContext with the given source and path.\n   *\n   * @param settings The settings for the parser.\n   * @param databaseId The database ID of the Firestore instance.\n   * @param serializer The serializer to use to generate the Value proto.\n   * @param ignoreUndefinedProperties Whether to ignore undefined properties\n   * rather than throw.\n   * @param fieldTransforms A mutable list of field transforms encountered while\n   *     parsing the data.\n   * @param fieldMask A mutable list of field paths encountered while parsing\n   *     the data.\n   *\n   * TODO(b/34871131): We don't support array paths right now, so path can be\n   * null to indicate the context represents any location within an array (in\n   * which case certain features will not work and errors will be somewhat\n   * compromised).\n   */\n  constructor(\n    readonly settings: ContextSettings,\n    readonly databaseId: DatabaseId,\n    readonly serializer: JsonProtoSerializer,\n    readonly ignoreUndefinedProperties: boolean,\n    fieldTransforms?: FieldTransform[],\n    fieldMask?: FieldPath[]\n  ) {\n    // Minor hack: If fieldTransforms is undefined, we assume this is an\n    // external call and we need to validate the entire path.\n    if (fieldTransforms === undefined) {\n      this.validatePath();\n    }\n    this.fieldTransforms = fieldTransforms || [];\n    this.fieldMask = fieldMask || [];\n  }\n\n  get path(): FieldPath | undefined {\n    return this.settings.path;\n  }\n\n  get dataSource(): UserDataSource {\n    return this.settings.dataSource;\n  }\n\n  /** Returns a new context with the specified settings overwritten. */\n  contextWith(configuration: Partial<ContextSettings>): ParseContext {\n    return new ParseContext(\n      { ...this.settings, ...configuration },\n      this.databaseId,\n      this.serializer,\n      this.ignoreUndefinedProperties,\n      this.fieldTransforms,\n      this.fieldMask\n    );\n  }\n\n  childContextForField(field: string): ParseContext {\n    const childPath = this.path?.child(field);\n    const context = this.contextWith({ path: childPath, arrayElement: false });\n    context.validatePathSegment(field);\n    return context;\n  }\n\n  childContextForFieldPath(field: FieldPath): ParseContext {\n    const childPath = this.path?.child(field);\n    const context = this.contextWith({ path: childPath, arrayElement: false });\n    context.validatePath();\n    return context;\n  }\n\n  childContextForArray(index: number): ParseContext {\n    // TODO(b/34871131): We don't support array paths right now; so make path\n    // undefined.\n    return this.contextWith({ path: undefined, arrayElement: true });\n  }\n\n  createError(reason: string): Error {\n    const fieldDescription =\n      !this.path || this.path.isEmpty()\n        ? ''\n        : ` (found in field ${this.path.toString()})`;\n    return new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Function ${this.settings.methodName}() called with invalid data. ` +\n        reason +\n        fieldDescription\n    );\n  }\n\n  /** Returns 'true' if 'fieldPath' was traversed when creating this context. */\n  contains(fieldPath: FieldPath): boolean {\n    return (\n      this.fieldMask.find(field => fieldPath.isPrefixOf(field)) !== undefined ||\n      this.fieldTransforms.find(transform =>\n        fieldPath.isPrefixOf(transform.field)\n      ) !== undefined\n    );\n  }\n\n  private validatePath(): void {\n    // TODO(b/34871131): Remove null check once we have proper paths for fields\n    // within arrays.\n    if (!this.path) {\n      return;\n    }\n    for (let i = 0; i < this.path.length; i++) {\n      this.validatePathSegment(this.path.get(i));\n    }\n  }\n\n  private validatePathSegment(segment: string): void {\n    if (segment.length === 0) {\n      throw this.createError('Document fields must not be empty');\n    }\n    if (isWrite(this.dataSource) && RESERVED_FIELD_REGEX.test(segment)) {\n      throw this.createError('Document fields cannot begin and end with \"__\"');\n    }\n  }\n}\n\n/**\n * Helper for parsing raw user input (provided via the API) into internal model\n * classes.\n */\nexport class UserDataReader {\n  private readonly serializer: JsonProtoSerializer;\n\n  constructor(\n    private readonly databaseId: DatabaseId,\n    private readonly ignoreUndefinedProperties: boolean,\n    serializer?: JsonProtoSerializer\n  ) {\n    this.serializer =\n      serializer || PlatformSupport.getPlatform().newSerializer(databaseId);\n  }\n\n  /** Parse document data from a set() call. */\n  parseSetData(\n    methodName: string,\n    input: unknown,\n    options: firestore.SetOptions = {}\n  ): ParsedSetData {\n    const context = this.createContext(\n      options.merge || options.mergeFields\n        ? UserDataSource.MergeSet\n        : UserDataSource.Set,\n      methodName\n    );\n    validatePlainObject('Data must be an object, but it was:', context, input);\n    const updateData = parseObject(input, context)!;\n\n    let fieldMask: FieldMask | null;\n    let fieldTransforms: FieldTransform[];\n\n    if (options.merge) {\n      fieldMask = new FieldMask(context.fieldMask);\n      fieldTransforms = context.fieldTransforms;\n    } else if (options.mergeFields) {\n      const validatedFieldPaths: FieldPath[] = [];\n\n      for (const stringOrFieldPath of options.mergeFields) {\n        let fieldPath: FieldPath;\n\n        if (stringOrFieldPath instanceof BaseFieldPath) {\n          fieldPath = stringOrFieldPath._internalPath;\n        } else if (typeof stringOrFieldPath === 'string') {\n          fieldPath = fieldPathFromDotSeparatedString(\n            methodName,\n            stringOrFieldPath\n          );\n        } else {\n          throw fail(\n            'Expected stringOrFieldPath to be a string or a FieldPath'\n          );\n        }\n\n        if (!context.contains(fieldPath)) {\n          throw new FirestoreError(\n            Code.INVALID_ARGUMENT,\n            `Field '${fieldPath}' is specified in your field mask but missing from your input data.`\n          );\n        }\n\n        if (!fieldMaskContains(validatedFieldPaths, fieldPath)) {\n          validatedFieldPaths.push(fieldPath);\n        }\n      }\n\n      fieldMask = new FieldMask(validatedFieldPaths);\n      fieldTransforms = context.fieldTransforms.filter(transform =>\n        fieldMask!.covers(transform.field)\n      );\n    } else {\n      fieldMask = null;\n      fieldTransforms = context.fieldTransforms;\n    }\n\n    return new ParsedSetData(\n      new ObjectValue(updateData),\n      fieldMask,\n      fieldTransforms\n    );\n  }\n\n  /** Parse update data from an update() call. */\n  parseUpdateData(methodName: string, input: unknown): ParsedUpdateData {\n    const context = this.createContext(UserDataSource.Update, methodName);\n    validatePlainObject('Data must be an object, but it was:', context, input);\n\n    const fieldMaskPaths: FieldPath[] = [];\n    const updateData = new ObjectValueBuilder();\n    forEach(input as Dict<unknown>, (key, value) => {\n      const path = fieldPathFromDotSeparatedString(methodName, key);\n\n      const childContext = context.childContextForFieldPath(path);\n      if (\n        value instanceof SerializableFieldValue &&\n        value._delegate instanceof DeleteFieldValueImpl\n      ) {\n        // Add it to the field mask, but don't add anything to updateData.\n        fieldMaskPaths.push(path);\n      } else {\n        const parsedValue = parseData(value, childContext);\n        if (parsedValue != null) {\n          fieldMaskPaths.push(path);\n          updateData.set(path, parsedValue);\n        }\n      }\n    });\n\n    const mask = new FieldMask(fieldMaskPaths);\n    return new ParsedUpdateData(\n      updateData.build(),\n      mask,\n      context.fieldTransforms\n    );\n  }\n\n  /** Parse update data from a list of field/value arguments. */\n  parseUpdateVarargs(\n    methodName: string,\n    field: string | BaseFieldPath,\n    value: unknown,\n    moreFieldsAndValues: unknown[]\n  ): ParsedUpdateData {\n    const context = this.createContext(UserDataSource.Update, methodName);\n    const keys = [fieldPathFromArgument(methodName, field)];\n    const values = [value];\n\n    if (moreFieldsAndValues.length % 2 !== 0) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        `Function ${methodName}() needs to be called with an even number ` +\n          'of arguments that alternate between field names and values.'\n      );\n    }\n\n    for (let i = 0; i < moreFieldsAndValues.length; i += 2) {\n      keys.push(\n        fieldPathFromArgument(\n          methodName,\n          moreFieldsAndValues[i] as string | BaseFieldPath\n        )\n      );\n      values.push(moreFieldsAndValues[i + 1]);\n    }\n\n    const fieldMaskPaths: FieldPath[] = [];\n    const updateData = new ObjectValueBuilder();\n\n    // We iterate in reverse order to pick the last value for a field if the\n    // user specified the field multiple times.\n    for (let i = keys.length - 1; i >= 0; --i) {\n      if (!fieldMaskContains(fieldMaskPaths, keys[i])) {\n        const path = keys[i];\n        const value = values[i];\n        const childContext = context.childContextForFieldPath(path);\n        if (\n          value instanceof SerializableFieldValue &&\n          value._delegate instanceof DeleteFieldValueImpl\n        ) {\n          // Add it to the field mask, but don't add anything to updateData.\n          fieldMaskPaths.push(path);\n        } else {\n          const parsedValue = parseData(value, childContext);\n          if (parsedValue != null) {\n            fieldMaskPaths.push(path);\n            updateData.set(path, parsedValue);\n          }\n        }\n      }\n    }\n\n    const mask = new FieldMask(fieldMaskPaths);\n    return new ParsedUpdateData(\n      updateData.build(),\n      mask,\n      context.fieldTransforms\n    );\n  }\n\n  /** Creates a new top-level parse context. */\n  private createContext(\n    dataSource: UserDataSource,\n    methodName: string\n  ): ParseContext {\n    return new ParseContext(\n      {\n        dataSource,\n        methodName,\n        path: FieldPath.EMPTY_PATH,\n        arrayElement: false\n      },\n      this.databaseId,\n      this.serializer,\n      this.ignoreUndefinedProperties\n    );\n  }\n\n  /**\n   * Parse a \"query value\" (e.g. value in a where filter or a value in a cursor\n   * bound).\n   *\n   * @param allowArrays Whether the query value is an array that may directly\n   * contain additional arrays (e.g. the operand of an `in` query).\n   */\n  parseQueryValue(\n    methodName: string,\n    input: unknown,\n    allowArrays = false\n  ): api.Value {\n    const context = this.createContext(\n      allowArrays ? UserDataSource.ArrayArgument : UserDataSource.Argument,\n      methodName\n    );\n    const parsed = parseData(input, context);\n    debugAssert(parsed != null, 'Parsed data should not be null.');\n    debugAssert(\n      context.fieldTransforms.length === 0,\n      'Field transforms should have been disallowed.'\n    );\n    return parsed;\n  }\n}\n\n/**\n * Parses user data to Protobuf Values.\n *\n * @param input Data to be parsed.\n * @param context A context object representing the current path being parsed,\n * the source of the data being parsed, etc.\n * @return The parsed value, or null if the value was a FieldValue sentinel\n * that should not be included in the resulting parsed data.\n */\nexport function parseData(\n  input: unknown,\n  context: ParseContext\n): api.Value | null {\n  if (looksLikeJsonObject(input)) {\n    validatePlainObject('Unsupported field value:', context, input);\n    return parseObject(input, context);\n  } else if (input instanceof SerializableFieldValue) {\n    // FieldValues usually parse into transforms (except FieldValue.delete())\n    // in which case we do not want to include this field in our parsed data\n    // (as doing so will overwrite the field directly prior to the transform\n    // trying to transform it). So we don't add this location to\n    // context.fieldMask and we return null as our parsing result.\n    parseSentinelFieldValue(input, context);\n    return null;\n  } else {\n    // If context.path is null we are inside an array and we don't support\n    // field mask paths more granular than the top-level array.\n    if (context.path) {\n      context.fieldMask.push(context.path);\n    }\n\n    if (input instanceof Array) {\n      // TODO(b/34871131): Include the path containing the array in the error\n      // message.\n      // In the case of IN queries, the parsed data is an array (representing\n      // the set of values to be included for the IN query) that may directly\n      // contain additional arrays (each representing an individual field\n      // value), so we disable this validation.\n      if (\n        context.settings.arrayElement &&\n        context.dataSource !== UserDataSource.ArrayArgument\n      ) {\n        throw context.createError('Nested arrays are not supported');\n      }\n      return parseArray(input as unknown[], context);\n    } else {\n      return parseScalarValue(input, context);\n    }\n  }\n}\n\nfunction parseObject(\n  obj: Dict<unknown>,\n  context: ParseContext\n): { mapValue: api.MapValue } {\n  const fields: Dict<api.Value> = {};\n\n  if (isEmpty(obj)) {\n    // If we encounter an empty object, we explicitly add it to the update\n    // mask to ensure that the server creates a map entry.\n    if (context.path && context.path.length > 0) {\n      context.fieldMask.push(context.path);\n    }\n  } else {\n    forEach(obj, (key: string, val: unknown) => {\n      const parsedValue = parseData(val, context.childContextForField(key));\n      if (parsedValue != null) {\n        fields[key] = parsedValue;\n      }\n    });\n  }\n\n  return { mapValue: { fields } };\n}\n\nfunction parseArray(array: unknown[], context: ParseContext): api.Value {\n  const values: api.Value[] = [];\n  let entryIndex = 0;\n  for (const entry of array) {\n    let parsedEntry = parseData(\n      entry,\n      context.childContextForArray(entryIndex)\n    );\n    if (parsedEntry == null) {\n      // Just include nulls in the array for fields being replaced with a\n      // sentinel.\n      parsedEntry = { nullValue: 'NULL_VALUE' };\n    }\n    values.push(parsedEntry);\n    entryIndex++;\n  }\n  return { arrayValue: { values } };\n}\n\n/**\n * \"Parses\" the provided FieldValueImpl, adding any necessary transforms to\n * context.fieldTransforms.\n */\nfunction parseSentinelFieldValue(\n  value: SerializableFieldValue,\n  context: ParseContext\n): void {\n  // Sentinels are only supported with writes, and not within arrays.\n  if (!isWrite(context.dataSource)) {\n    throw context.createError(\n      `${value._methodName}() can only be used with update() and set()`\n    );\n  }\n  if (!context.path) {\n    throw context.createError(\n      `${value._methodName}() is not currently supported inside arrays`\n    );\n  }\n\n  const fieldTransform = value._toFieldTransform(context);\n  if (fieldTransform) {\n    context.fieldTransforms.push(fieldTransform);\n  }\n}\n\n/**\n * Helper to parse a scalar value (i.e. not an Object, Array, or FieldValue)\n *\n * @return The parsed value\n */\nfunction parseScalarValue(\n  value: unknown,\n  context: ParseContext\n): api.Value | null {\n  if (value === null) {\n    return { nullValue: 'NULL_VALUE' };\n  } else if (typeof value === 'number') {\n    return context.serializer.toNumber(value);\n  } else if (typeof value === 'boolean') {\n    return { booleanValue: value };\n  } else if (typeof value === 'string') {\n    return { stringValue: value };\n  } else if (value instanceof Date) {\n    const timestamp = Timestamp.fromDate(value);\n    return { timestampValue: context.serializer.toTimestamp(timestamp) };\n  } else if (value instanceof Timestamp) {\n    // Firestore backend truncates precision down to microseconds. To ensure\n    // offline mode works the same with regards to truncation, perform the\n    // truncation immediately without waiting for the backend to do that.\n    const timestamp = new Timestamp(\n      value.seconds,\n      Math.floor(value.nanoseconds / 1000) * 1000\n    );\n    return { timestampValue: context.serializer.toTimestamp(timestamp) };\n  } else if (value instanceof GeoPoint) {\n    return {\n      geoPointValue: {\n        latitude: value.latitude,\n        longitude: value.longitude\n      }\n    };\n  } else if (value instanceof Blob) {\n    return { bytesValue: context.serializer.toBytes(value) };\n  } else if (value instanceof DocumentKeyReference) {\n    const thisDb = context.databaseId;\n    const otherDb = value._databaseId;\n    if (!otherDb.isEqual(thisDb)) {\n      throw context.createError(\n        'Document reference is for database ' +\n          `${otherDb.projectId}/${otherDb.database} but should be ` +\n          `for database ${thisDb.projectId}/${thisDb.database}`\n      );\n    }\n    return {\n      referenceValue: context.serializer.toResourceName(\n        value._key.path,\n        value._databaseId\n      )\n    };\n  } else if (value === undefined && context.ignoreUndefinedProperties) {\n    return null;\n  } else {\n    throw context.createError(\n      `Unsupported field value: ${valueDescription(value)}`\n    );\n  }\n}\n\n/**\n * Checks whether an object looks like a JSON object that should be converted\n * into a struct. Normal class/prototype instances are considered to look like\n * JSON objects since they should be converted to a struct value. Arrays, Dates,\n * GeoPoints, etc. are not considered to look like JSON objects since they map\n * to specific FieldValue types other than ObjectValue.\n */\nfunction looksLikeJsonObject(input: unknown): boolean {\n  return (\n    typeof input === 'object' &&\n    input !== null &&\n    !(input instanceof Array) &&\n    !(input instanceof Date) &&\n    !(input instanceof Timestamp) &&\n    !(input instanceof GeoPoint) &&\n    !(input instanceof Blob) &&\n    !(input instanceof DocumentKeyReference) &&\n    !(input instanceof SerializableFieldValue)\n  );\n}\n\nfunction validatePlainObject(\n  message: string,\n  context: ParseContext,\n  input: unknown\n): asserts input is Dict<unknown> {\n  if (!looksLikeJsonObject(input) || !isPlainObject(input)) {\n    const description = valueDescription(input);\n    if (description === 'an object') {\n      // Massage the error if it was an object.\n      throw context.createError(message + ' a custom object');\n    } else {\n      throw context.createError(message + ' ' + description);\n    }\n  }\n}\n\n/**\n * Helper that calls fromDotSeparatedString() but wraps any error thrown.\n */\nexport function fieldPathFromArgument(\n  methodName: string,\n  path: string | BaseFieldPath\n): FieldPath {\n  if (path instanceof BaseFieldPath) {\n    return path._internalPath;\n  } else if (typeof path === 'string') {\n    return fieldPathFromDotSeparatedString(methodName, path);\n  } else {\n    const message = 'Field path arguments must be of type string or FieldPath.';\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Function ${methodName}() called with invalid data. ${message}`\n    );\n  }\n}\n\n/**\n * Wraps fromDotSeparatedString with an error message about the method that\n * was thrown.\n * @param methodName The publicly visible method name\n * @param path The dot-separated string form of a field path which will be split\n * on dots.\n */\nexport function fieldPathFromDotSeparatedString(\n  methodName: string,\n  path: string\n): FieldPath {\n  try {\n    return fromDotSeparatedString(path)._internalPath;\n  } catch (e) {\n    const message = errorMessage(e);\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Function ${methodName}() called with invalid data. ${message}`\n    );\n  }\n}\n\n/**\n * Extracts the message from a caught exception, which should be an Error object\n * though JS doesn't guarantee that.\n */\nfunction errorMessage(error: Error | object): string {\n  return error instanceof Error ? error.message : error.toString();\n}\n\n/** Checks `haystack` if FieldPath `needle` is present. Runs in O(n). */\nfunction fieldMaskContains(haystack: FieldPath[], needle: FieldPath): boolean {\n  return haystack.some(v => v.isEqual(needle));\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CredentialsProvider, Token } from '../api/credentials';\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { TargetId } from '../core/types';\nimport { TargetData } from '../local/target_data';\nimport { Mutation, MutationResult } from '../model/mutation';\nimport * as api from '../protos/firestore_proto_api';\nimport { hardAssert, debugAssert } from '../util/assert';\nimport { AsyncQueue, DelayedOperation, TimerId } from '../util/async_queue';\nimport { Code, FirestoreError } from '../util/error';\nimport { logError, logDebug } from '../util/log';\n\nimport { isNullOrUndefined } from '../util/types';\nimport { ExponentialBackoff } from './backoff';\nimport { Connection, Stream } from './connection';\nimport { JsonProtoSerializer } from './serializer';\nimport { WatchChange } from './watch_change';\nimport { ByteString } from '../util/byte_string';\n\nconst LOG_TAG = 'PersistentStream';\n\n// The generated proto interfaces for these class are missing the database\n// field. So we add it here.\n// TODO(b/36015800): Remove this once the api generator is fixed.\ninterface ListenRequest extends api.ListenRequest {\n  database?: string;\n}\nexport interface WriteRequest extends api.WriteRequest {\n  database?: string;\n}\n/**\n * PersistentStream can be in one of 5 states (each described in detail below)\n * based on the following state transition diagram:\n *\n *          start() called             auth & connection succeeded\n * INITIAL ----------------> STARTING -----------------------------> OPEN\n *                             ^  |                                   |\n *                             |  |                    error occurred |\n *                             |  \\-----------------------------v-----/\n *                             |                                |\n *                    backoff  |                                |\n *                    elapsed  |              start() called    |\n *                             \\--- BACKOFF <---------------- ERROR\n *\n * [any state] --------------------------> INITIAL\n *               stop() called or\n *               idle timer expired\n */\nconst enum PersistentStreamState {\n  /**\n   * The streaming RPC is not yet running and there's no error condition.\n   * Calling start() will start the stream immediately without backoff.\n   * While in this state isStarted() will return false.\n   */\n  Initial,\n\n  /**\n   * The stream is starting, either waiting for an auth token or for the stream\n   * to successfully open. While in this state, isStarted() will return true but\n   * isOpen() will return false.\n   */\n  Starting,\n\n  /**\n   * The streaming RPC is up and running. Requests and responses can flow\n   * freely. Both isStarted() and isOpen() will return true.\n   */\n  Open,\n\n  /**\n   * The stream encountered an error. The next start attempt will back off.\n   * While in this state isStarted() will return false.\n   */\n  Error,\n\n  /**\n   * An in-between state after an error where the stream is waiting before\n   * re-starting. After waiting is complete, the stream will try to open.\n   * While in this state isStarted() will return true but isOpen() will return\n   * false.\n   */\n  Backoff\n}\n\n/**\n * Provides a common interface that is shared by the listeners for stream\n * events by the concrete implementation classes.\n */\nexport interface PersistentStreamListener {\n  /**\n   * Called after the stream was established and can accept outgoing\n   * messages\n   */\n  onOpen: () => Promise<void>;\n  /**\n   * Called after the stream has closed. If there was an error, the\n   * FirestoreError will be set.\n   */\n  onClose: (err?: FirestoreError) => Promise<void>;\n}\n\n/** The time a stream stays open after it is marked idle. */\nconst IDLE_TIMEOUT_MS = 60 * 1000;\n\n/**\n * A PersistentStream is an abstract base class that represents a streaming RPC\n * to the Firestore backend. It's built on top of the connections own support\n * for streaming RPCs, and adds several critical features for our clients:\n *\n *   - Exponential backoff on failure\n *   - Authentication via CredentialsProvider\n *   - Dispatching all callbacks into the shared worker queue\n *   - Closing idle streams after 60 seconds of inactivity\n *\n * Subclasses of PersistentStream implement serialization of models to and\n * from the JSON representation of the protocol buffers for a specific\n * streaming RPC.\n *\n * ## Starting and Stopping\n *\n * Streaming RPCs are stateful and need to be start()ed before messages can\n * be sent and received. The PersistentStream will call the onOpen() function\n * of the listener once the stream is ready to accept requests.\n *\n * Should a start() fail, PersistentStream will call the registered onClose()\n * listener with a FirestoreError indicating what went wrong.\n *\n * A PersistentStream can be started and stopped repeatedly.\n *\n * Generic types:\n *  SendType: The type of the outgoing message of the underlying\n *    connection stream\n *  ReceiveType: The type of the incoming message of the underlying\n *    connection stream\n *  ListenerType: The type of the listener that will be used for callbacks\n */\nexport abstract class PersistentStream<\n  SendType,\n  ReceiveType,\n  ListenerType extends PersistentStreamListener\n> {\n  private state = PersistentStreamState.Initial;\n  /**\n   * A close count that's incremented every time the stream is closed; used by\n   * getCloseGuardedDispatcher() to invalidate callbacks that happen after\n   * close.\n   */\n  private closeCount = 0;\n\n  private idleTimer: DelayedOperation<void> | null = null;\n  private stream: Stream<SendType, ReceiveType> | null = null;\n\n  protected backoff: ExponentialBackoff;\n\n  constructor(\n    private queue: AsyncQueue,\n    connectionTimerId: TimerId,\n    private idleTimerId: TimerId,\n    protected connection: Connection,\n    private credentialsProvider: CredentialsProvider,\n    protected listener: ListenerType\n  ) {\n    this.backoff = new ExponentialBackoff(queue, connectionTimerId);\n  }\n\n  /**\n   * Returns true if start() has been called and no error has occurred. True\n   * indicates the stream is open or in the process of opening (which\n   * encompasses respecting backoff, getting auth tokens, and starting the\n   * actual RPC). Use isOpen() to determine if the stream is open and ready for\n   * outbound requests.\n   */\n  isStarted(): boolean {\n    return (\n      this.state === PersistentStreamState.Starting ||\n      this.state === PersistentStreamState.Open ||\n      this.state === PersistentStreamState.Backoff\n    );\n  }\n\n  /**\n   * Returns true if the underlying RPC is open (the onOpen() listener has been\n   * called) and the stream is ready for outbound requests.\n   */\n  isOpen(): boolean {\n    return this.state === PersistentStreamState.Open;\n  }\n\n  /**\n   * Starts the RPC. Only allowed if isStarted() returns false. The stream is\n   * not immediately ready for use: onOpen() will be invoked when the RPC is\n   * ready for outbound requests, at which point isOpen() will return true.\n   *\n   * When start returns, isStarted() will return true.\n   */\n  start(): void {\n    if (this.state === PersistentStreamState.Error) {\n      this.performBackoff();\n      return;\n    }\n\n    debugAssert(\n      this.state === PersistentStreamState.Initial,\n      'Already started'\n    );\n    this.auth();\n  }\n\n  /**\n   * Stops the RPC. This call is idempotent and allowed regardless of the\n   * current isStarted() state.\n   *\n   * When stop returns, isStarted() and isOpen() will both return false.\n   */\n  async stop(): Promise<void> {\n    if (this.isStarted()) {\n      await this.close(PersistentStreamState.Initial);\n    }\n  }\n\n  /**\n   * After an error the stream will usually back off on the next attempt to\n   * start it. If the error warrants an immediate restart of the stream, the\n   * sender can use this to indicate that the receiver should not back off.\n   *\n   * Each error will call the onClose() listener. That function can decide to\n   * inhibit backoff if required.\n   */\n  inhibitBackoff(): void {\n    debugAssert(\n      !this.isStarted(),\n      'Can only inhibit backoff in a stopped state'\n    );\n\n    this.state = PersistentStreamState.Initial;\n    this.backoff.reset();\n  }\n\n  /**\n   * Marks this stream as idle. If no further actions are performed on the\n   * stream for one minute, the stream will automatically close itself and\n   * notify the stream's onClose() handler with Status.OK. The stream will then\n   * be in a !isStarted() state, requiring the caller to start the stream again\n   * before further use.\n   *\n   * Only streams that are in state 'Open' can be marked idle, as all other\n   * states imply pending network operations.\n   */\n  markIdle(): void {\n    // Starts the idle time if we are in state 'Open' and are not yet already\n    // running a timer (in which case the previous idle timeout still applies).\n    if (this.isOpen() && this.idleTimer === null) {\n      this.idleTimer = this.queue.enqueueAfterDelay(\n        this.idleTimerId,\n        IDLE_TIMEOUT_MS,\n        () => this.handleIdleCloseTimer()\n      );\n    }\n  }\n\n  /** Sends a message to the underlying stream. */\n  protected sendRequest(msg: SendType): void {\n    this.cancelIdleCheck();\n    this.stream!.send(msg);\n  }\n\n  /** Called by the idle timer when the stream should close due to inactivity. */\n  private async handleIdleCloseTimer(): Promise<void> {\n    if (this.isOpen()) {\n      // When timing out an idle stream there's no reason to force the stream into backoff when\n      // it restarts so set the stream state to Initial instead of Error.\n      return this.close(PersistentStreamState.Initial);\n    }\n  }\n\n  /** Marks the stream as active again. */\n  private cancelIdleCheck(): void {\n    if (this.idleTimer) {\n      this.idleTimer.cancel();\n      this.idleTimer = null;\n    }\n  }\n\n  /**\n   * Closes the stream and cleans up as necessary:\n   *\n   * * closes the underlying GRPC stream;\n   * * calls the onClose handler with the given 'error';\n   * * sets internal stream state to 'finalState';\n   * * adjusts the backoff timer based on the error\n   *\n   * A new stream can be opened by calling start().\n   *\n   * @param finalState the intended state of the stream after closing.\n   * @param error the error the connection was closed with.\n   */\n  private async close(\n    finalState: PersistentStreamState,\n    error?: FirestoreError\n  ): Promise<void> {\n    debugAssert(this.isStarted(), 'Only started streams should be closed.');\n    debugAssert(\n      finalState === PersistentStreamState.Error || isNullOrUndefined(error),\n      \"Can't provide an error when not in an error state.\"\n    );\n\n    // Cancel any outstanding timers (they're guaranteed not to execute).\n    this.cancelIdleCheck();\n    this.backoff.cancel();\n\n    // Invalidates any stream-related callbacks (e.g. from auth or the\n    // underlying stream), guaranteeing they won't execute.\n    this.closeCount++;\n\n    if (finalState !== PersistentStreamState.Error) {\n      // If this is an intentional close ensure we don't delay our next connection attempt.\n      this.backoff.reset();\n    } else if (error && error.code === Code.RESOURCE_EXHAUSTED) {\n      // Log the error. (Probably either 'quota exceeded' or 'max queue length reached'.)\n      logError(error.toString());\n      logError(\n        'Using maximum backoff delay to prevent overloading the backend.'\n      );\n      this.backoff.resetToMax();\n    } else if (error && error.code === Code.UNAUTHENTICATED) {\n      // \"unauthenticated\" error means the token was rejected. Try force refreshing it in case it\n      // just expired.\n      this.credentialsProvider.invalidateToken();\n    }\n\n    // Clean up the underlying stream because we are no longer interested in events.\n    if (this.stream !== null) {\n      this.tearDown();\n      this.stream.close();\n      this.stream = null;\n    }\n\n    // This state must be assigned before calling onClose() to allow the callback to\n    // inhibit backoff or otherwise manipulate the state in its non-started state.\n    this.state = finalState;\n\n    // Notify the listener that the stream closed.\n    await this.listener.onClose(error);\n  }\n\n  /**\n   * Can be overridden to perform additional cleanup before the stream is closed.\n   * Calling super.tearDown() is not required.\n   */\n  protected tearDown(): void {}\n\n  /**\n   * Used by subclasses to start the concrete RPC and return the underlying\n   * connection stream.\n   */\n  protected abstract startRpc(\n    token: Token | null\n  ): Stream<SendType, ReceiveType>;\n\n  /**\n   * Called after the stream has received a message. The function will be\n   * called on the right queue and must return a Promise.\n   * @param message The message received from the stream.\n   */\n  protected abstract onMessage(message: ReceiveType): Promise<void>;\n\n  private auth(): void {\n    debugAssert(\n      this.state === PersistentStreamState.Initial,\n      'Must be in initial state to auth'\n    );\n\n    this.state = PersistentStreamState.Starting;\n\n    const dispatchIfNotClosed = this.getCloseGuardedDispatcher(this.closeCount);\n\n    // TODO(mikelehen): Just use dispatchIfNotClosed, but see TODO below.\n    const closeCount = this.closeCount;\n\n    this.credentialsProvider.getToken().then(\n      token => {\n        // Stream can be stopped while waiting for authentication.\n        // TODO(mikelehen): We really should just use dispatchIfNotClosed\n        // and let this dispatch onto the queue, but that opened a spec test can\n        // of worms that I don't want to deal with in this PR.\n        if (this.closeCount === closeCount) {\n          // Normally we'd have to schedule the callback on the AsyncQueue.\n          // However, the following calls are safe to be called outside the\n          // AsyncQueue since they don't chain asynchronous calls\n          this.startStream(token);\n        }\n      },\n      (error: Error) => {\n        dispatchIfNotClosed(() => {\n          const rpcError = new FirestoreError(\n            Code.UNKNOWN,\n            'Fetching auth token failed: ' + error.message\n          );\n          return this.handleStreamClose(rpcError);\n        });\n      }\n    );\n  }\n\n  private startStream(token: Token | null): void {\n    debugAssert(\n      this.state === PersistentStreamState.Starting,\n      'Trying to start stream in a non-starting state'\n    );\n\n    const dispatchIfNotClosed = this.getCloseGuardedDispatcher(this.closeCount);\n\n    this.stream = this.startRpc(token);\n    this.stream.onOpen(() => {\n      dispatchIfNotClosed(() => {\n        debugAssert(\n          this.state === PersistentStreamState.Starting,\n          'Expected stream to be in state Starting, but was ' + this.state\n        );\n        this.state = PersistentStreamState.Open;\n        return this.listener!.onOpen();\n      });\n    });\n    this.stream.onClose((error?: FirestoreError) => {\n      dispatchIfNotClosed(() => {\n        return this.handleStreamClose(error);\n      });\n    });\n    this.stream.onMessage((msg: ReceiveType) => {\n      dispatchIfNotClosed(() => {\n        return this.onMessage(msg);\n      });\n    });\n  }\n\n  private performBackoff(): void {\n    debugAssert(\n      this.state === PersistentStreamState.Error,\n      'Should only perform backoff when in Error state'\n    );\n    this.state = PersistentStreamState.Backoff;\n\n    this.backoff.backoffAndRun(async () => {\n      debugAssert(\n        this.state === PersistentStreamState.Backoff,\n        'Backoff elapsed but state is now: ' + this.state\n      );\n\n      this.state = PersistentStreamState.Initial;\n      this.start();\n      debugAssert(this.isStarted(), 'PersistentStream should have started');\n    });\n  }\n\n  // Visible for tests\n  handleStreamClose(error?: FirestoreError): Promise<void> {\n    debugAssert(\n      this.isStarted(),\n      \"Can't handle server close on non-started stream\"\n    );\n    logDebug(LOG_TAG, `close with error: ${error}`);\n\n    this.stream = null;\n\n    // In theory the stream could close cleanly, however, in our current model\n    // we never expect this to happen because if we stop a stream ourselves,\n    // this callback will never be called. To prevent cases where we retry\n    // without a backoff accidentally, we set the stream to error in all cases.\n    return this.close(PersistentStreamState.Error, error);\n  }\n\n  /**\n   * Returns a \"dispatcher\" function that dispatches operations onto the\n   * AsyncQueue but only runs them if closeCount remains unchanged. This allows\n   * us to turn auth / stream callbacks into no-ops if the stream is closed /\n   * re-opened, etc.\n   */\n  private getCloseGuardedDispatcher(\n    startCloseCount: number\n  ): (fn: () => Promise<void>) => void {\n    return (fn: () => Promise<void>): void => {\n      this.queue.enqueueAndForget(() => {\n        if (this.closeCount === startCloseCount) {\n          return fn();\n        } else {\n          logDebug(\n            LOG_TAG,\n            'stream callback skipped by getCloseGuardedDispatcher.'\n          );\n          return Promise.resolve();\n        }\n      });\n    };\n  }\n}\n\n/** Listener for the PersistentWatchStream */\nexport interface WatchStreamListener extends PersistentStreamListener {\n  /**\n   * Called on a watchChange. The snapshot parameter will be MIN if the watch\n   * change did not have a snapshot associated with it.\n   */\n  onWatchChange: (\n    watchChange: WatchChange,\n    snapshot: SnapshotVersion\n  ) => Promise<void>;\n}\n\n/**\n * A PersistentStream that implements the Listen RPC.\n *\n * Once the Listen stream has called the onOpen() listener, any number of\n * listen() and unlisten() calls can be made to control what changes will be\n * sent from the server for ListenResponses.\n */\nexport class PersistentListenStream extends PersistentStream<\n  api.ListenRequest,\n  api.ListenResponse,\n  WatchStreamListener\n> {\n  constructor(\n    queue: AsyncQueue,\n    connection: Connection,\n    credentials: CredentialsProvider,\n    private serializer: JsonProtoSerializer,\n    listener: WatchStreamListener\n  ) {\n    super(\n      queue,\n      TimerId.ListenStreamConnectionBackoff,\n      TimerId.ListenStreamIdle,\n      connection,\n      credentials,\n      listener\n    );\n  }\n\n  protected startRpc(\n    token: Token | null\n  ): Stream<api.ListenRequest, api.ListenResponse> {\n    return this.connection.openStream<api.ListenRequest, api.ListenResponse>(\n      'Listen',\n      token\n    );\n  }\n\n  protected onMessage(watchChangeProto: api.ListenResponse): Promise<void> {\n    // A successful response means the stream is healthy\n    this.backoff.reset();\n\n    const watchChange = this.serializer.fromWatchChange(watchChangeProto);\n    const snapshot = this.serializer.versionFromListenResponse(\n      watchChangeProto\n    );\n    return this.listener!.onWatchChange(watchChange, snapshot);\n  }\n\n  /**\n   * Registers interest in the results of the given target. If the target\n   * includes a resumeToken it will be included in the request. Results that\n   * affect the target will be streamed back as WatchChange messages that\n   * reference the targetId.\n   */\n  watch(targetData: TargetData): void {\n    const request: ListenRequest = {};\n    request.database = this.serializer.encodedDatabaseId;\n    request.addTarget = this.serializer.toTarget(targetData);\n\n    const labels = this.serializer.toListenRequestLabels(targetData);\n    if (labels) {\n      request.labels = labels;\n    }\n\n    this.sendRequest(request);\n  }\n\n  /**\n   * Unregisters interest in the results of the target associated with the\n   * given targetId.\n   */\n  unwatch(targetId: TargetId): void {\n    const request: ListenRequest = {};\n    request.database = this.serializer.encodedDatabaseId;\n    request.removeTarget = targetId;\n    this.sendRequest(request);\n  }\n}\n\n/** Listener for the PersistentWriteStream */\nexport interface WriteStreamListener extends PersistentStreamListener {\n  /**\n   * Called by the PersistentWriteStream upon a successful handshake response\n   * from the server, which is the receiver's cue to send any pending writes.\n   */\n  onHandshakeComplete: () => Promise<void>;\n\n  /**\n   * Called by the PersistentWriteStream upon receiving a StreamingWriteResponse\n   * from the server that contains a mutation result.\n   */\n  onMutationResult: (\n    commitVersion: SnapshotVersion,\n    results: MutationResult[]\n  ) => Promise<void>;\n}\n\n/**\n * A Stream that implements the Write RPC.\n *\n * The Write RPC requires the caller to maintain special streamToken\n * state in between calls, to help the server understand which responses the\n * client has processed by the time the next request is made. Every response\n * will contain a streamToken; this value must be passed to the next\n * request.\n *\n * After calling start() on this stream, the next request must be a handshake,\n * containing whatever streamToken is on hand. Once a response to this\n * request is received, all pending mutations may be submitted. When\n * submitting multiple batches of mutations at the same time, it's\n * okay to use the same streamToken for the calls to writeMutations.\n *\n * TODO(b/33271235): Use proto types\n */\nexport class PersistentWriteStream extends PersistentStream<\n  api.WriteRequest,\n  api.WriteResponse,\n  WriteStreamListener\n> {\n  private handshakeComplete_ = false;\n\n  constructor(\n    queue: AsyncQueue,\n    connection: Connection,\n    credentials: CredentialsProvider,\n    private serializer: JsonProtoSerializer,\n    listener: WriteStreamListener\n  ) {\n    super(\n      queue,\n      TimerId.WriteStreamConnectionBackoff,\n      TimerId.WriteStreamIdle,\n      connection,\n      credentials,\n      listener\n    );\n  }\n\n  /**\n   * The last received stream token from the server, used to acknowledge which\n   * responses the client has processed. Stream tokens are opaque checkpoint\n   * markers whose only real value is their inclusion in the next request.\n   *\n   * PersistentWriteStream manages propagating this value from responses to the\n   * next request.\n   */\n  private lastStreamToken: ByteString = ByteString.EMPTY_BYTE_STRING;\n\n  /**\n   * Tracks whether or not a handshake has been successfully exchanged and\n   * the stream is ready to accept mutations.\n   */\n  get handshakeComplete(): boolean {\n    return this.handshakeComplete_;\n  }\n\n  // Override of PersistentStream.start\n  start(): void {\n    this.handshakeComplete_ = false;\n    this.lastStreamToken = ByteString.EMPTY_BYTE_STRING;\n    super.start();\n  }\n\n  protected tearDown(): void {\n    if (this.handshakeComplete_) {\n      this.writeMutations([]);\n    }\n  }\n\n  protected startRpc(\n    token: Token | null\n  ): Stream<api.WriteRequest, api.WriteResponse> {\n    return this.connection.openStream<api.WriteRequest, api.WriteResponse>(\n      'Write',\n      token\n    );\n  }\n\n  protected onMessage(responseProto: api.WriteResponse): Promise<void> {\n    // Always capture the last stream token.\n    hardAssert(\n      !!responseProto.streamToken,\n      'Got a write response without a stream token'\n    );\n    this.lastStreamToken = this.serializer.fromBytes(responseProto.streamToken);\n\n    if (!this.handshakeComplete_) {\n      // The first response is always the handshake response\n      hardAssert(\n        !responseProto.writeResults || responseProto.writeResults.length === 0,\n        'Got mutation results for handshake'\n      );\n      this.handshakeComplete_ = true;\n      return this.listener!.onHandshakeComplete();\n    } else {\n      // A successful first write response means the stream is healthy,\n      // Note, that we could consider a successful handshake healthy, however,\n      // the write itself might be causing an error we want to back off from.\n      this.backoff.reset();\n\n      const results = this.serializer.fromWriteResults(\n        responseProto.writeResults,\n        responseProto.commitTime\n      );\n      const commitVersion = this.serializer.fromVersion(\n        responseProto.commitTime!\n      );\n      return this.listener!.onMutationResult(commitVersion, results);\n    }\n  }\n\n  /**\n   * Sends an initial streamToken to the server, performing the handshake\n   * required to make the StreamingWrite RPC work. Subsequent\n   * calls should wait until onHandshakeComplete was called.\n   */\n  writeHandshake(): void {\n    debugAssert(this.isOpen(), 'Writing handshake requires an opened stream');\n    debugAssert(!this.handshakeComplete_, 'Handshake already completed');\n    debugAssert(\n      this.lastStreamToken.isEqual(ByteString.EMPTY_BYTE_STRING),\n      'Stream token should be empty during handshake'\n    );\n    // TODO(dimond): Support stream resumption. We intentionally do not set the\n    // stream token on the handshake, ignoring any stream token we might have.\n    const request: WriteRequest = {};\n    request.database = this.serializer.encodedDatabaseId;\n    this.sendRequest(request);\n  }\n\n  /** Sends a group of mutations to the Firestore backend to apply. */\n  writeMutations(mutations: Mutation[]): void {\n    debugAssert(this.isOpen(), 'Writing mutations requires an opened stream');\n    debugAssert(\n      this.handshakeComplete_,\n      'Handshake must be complete before writing mutations'\n    );\n    debugAssert(\n      this.lastStreamToken.approximateByteSize() > 0,\n      'Trying to write mutation without a token'\n    );\n\n    const request: WriteRequest = {\n      streamToken: this.serializer.toBytes(this.lastStreamToken),\n      writes: mutations.map(mutation => this.serializer.toMutation(mutation))\n    };\n\n    this.sendRequest(request);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CredentialsProvider } from '../api/credentials';\nimport { MaybeDocument, Document } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { Mutation } from '../model/mutation';\nimport * as api from '../protos/firestore_proto_api';\nimport { debugCast, hardAssert } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\nimport { Connection } from './connection';\nimport { JsonProtoSerializer } from './serializer';\nimport {\n  PersistentListenStream,\n  PersistentWriteStream,\n  WatchStreamListener,\n  WriteStreamListener\n} from './persistent_stream';\nimport { AsyncQueue } from '../util/async_queue';\nimport { Query } from '../core/query';\n\n/**\n * Datastore and its related methods are a wrapper around the external Google\n * Cloud Datastore grpc API, which provides an interface that is more convenient\n * for the rest of the client SDK architecture to consume.\n */\nexport class Datastore {\n  // Make sure that the structural type of `Datastore` is unique.\n  // See https://github.com/microsoft/TypeScript/issues/5451\n  private _ = undefined;\n}\n\n/**\n * An implementation of Datastore that exposes additional state for internal\n * consumption.\n */\nclass DatastoreImpl extends Datastore {\n  terminated = false;\n\n  constructor(\n    public readonly connection: Connection,\n    public readonly credentials: CredentialsProvider,\n    public readonly serializer: JsonProtoSerializer\n  ) {\n    super();\n  }\n\n  private verifyNotTerminated(): void {\n    if (this.terminated) {\n      throw new FirestoreError(\n        Code.FAILED_PRECONDITION,\n        'The client has already been terminated.'\n      );\n    }\n  }\n\n  /** Gets an auth token and invokes the provided RPC. */\n  invokeRPC<Req, Resp>(rpcName: string, request: Req): Promise<Resp> {\n    this.verifyNotTerminated();\n    return this.credentials\n      .getToken()\n      .then(token => {\n        return this.connection.invokeRPC<Req, Resp>(rpcName, request, token);\n      })\n      .catch((error: FirestoreError) => {\n        if (error.code === Code.UNAUTHENTICATED) {\n          this.credentials.invalidateToken();\n        }\n        throw error;\n      });\n  }\n\n  /** Gets an auth token and invokes the provided RPC with streamed results. */\n  invokeStreamingRPC<Req, Resp>(\n    rpcName: string,\n    request: Req\n  ): Promise<Resp[]> {\n    this.verifyNotTerminated();\n    return this.credentials\n      .getToken()\n      .then(token => {\n        return this.connection.invokeStreamingRPC<Req, Resp>(\n          rpcName,\n          request,\n          token\n        );\n      })\n      .catch((error: FirestoreError) => {\n        if (error.code === Code.UNAUTHENTICATED) {\n          this.credentials.invalidateToken();\n        }\n        throw error;\n      });\n  }\n}\n\nexport function newDatastore(\n  connection: Connection,\n  credentials: CredentialsProvider,\n  serializer: JsonProtoSerializer\n): Datastore {\n  return new DatastoreImpl(connection, credentials, serializer);\n}\n\nexport async function invokeCommitRpc(\n  datastore: Datastore,\n  mutations: Mutation[]\n): Promise<void> {\n  const datastoreImpl = debugCast(datastore, DatastoreImpl);\n  const params = {\n    database: datastoreImpl.serializer.encodedDatabaseId,\n    writes: mutations.map(m => datastoreImpl.serializer.toMutation(m))\n  };\n  await datastoreImpl.invokeRPC('Commit', params);\n}\n\nexport async function invokeBatchGetDocumentsRpc(\n  datastore: Datastore,\n  keys: DocumentKey[]\n): Promise<MaybeDocument[]> {\n  const datastoreImpl = debugCast(datastore, DatastoreImpl);\n  const params = {\n    database: datastoreImpl.serializer.encodedDatabaseId,\n    documents: keys.map(k => datastoreImpl.serializer.toName(k))\n  };\n  const response = await datastoreImpl.invokeStreamingRPC<\n    api.BatchGetDocumentsRequest,\n    api.BatchGetDocumentsResponse\n  >('BatchGetDocuments', params);\n\n  const docs = new Map<string, MaybeDocument>();\n  response.forEach(proto => {\n    const doc = datastoreImpl.serializer.fromMaybeDocument(proto);\n    docs.set(doc.key.toString(), doc);\n  });\n  const result: MaybeDocument[] = [];\n  keys.forEach(key => {\n    const doc = docs.get(key.toString());\n    hardAssert(!!doc, 'Missing entity in write response for ' + key);\n    result.push(doc);\n  });\n  return result;\n}\n\nexport async function invokeRunQueryRpc(\n  datastore: Datastore,\n  query: Query\n): Promise<Document[]> {\n  const datastoreImpl = debugCast(datastore, DatastoreImpl);\n  const { structuredQuery, parent } = datastoreImpl.serializer.toQueryTarget(\n    query.toTarget()\n  );\n  const params = {\n    database: datastoreImpl.serializer.encodedDatabaseId,\n    parent,\n    structuredQuery\n  };\n\n  const response = await datastoreImpl.invokeStreamingRPC<\n    api.RunQueryRequest,\n    api.RunQueryResponse\n  >('RunQuery', params);\n\n  return (\n    response\n      // Omit RunQueryResponses that only contain readTimes.\n      .filter(proto => !!proto.document)\n      .map(proto => datastoreImpl.serializer.fromDocument(proto.document!))\n  );\n}\n\nexport function newPersistentWriteStream(\n  datastore: Datastore,\n  queue: AsyncQueue,\n  listener: WriteStreamListener\n): PersistentWriteStream {\n  const datastoreImpl = debugCast(datastore, DatastoreImpl);\n  return new PersistentWriteStream(\n    queue,\n    datastoreImpl.connection,\n    datastoreImpl.credentials,\n    datastoreImpl.serializer,\n    listener\n  );\n}\n\nexport function newPersistentWatchStream(\n  datastore: Datastore,\n  queue: AsyncQueue,\n  listener: WatchStreamListener\n): PersistentListenStream {\n  const datastoreImpl = debugCast(datastore, DatastoreImpl);\n  return new PersistentListenStream(\n    queue,\n    datastoreImpl.connection,\n    datastoreImpl.credentials,\n    datastoreImpl.serializer,\n    listener\n  );\n}\n\nexport function terminateDatastore(datastore: Datastore): void {\n  const datastoreImpl = debugCast(datastore, DatastoreImpl);\n  datastoreImpl.terminated = true;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ParsedSetData, ParsedUpdateData } from '../api/user_data_reader';\nimport { Document, MaybeDocument, NoDocument } from '../model/document';\n\nimport { DocumentKey } from '../model/document_key';\nimport {\n  DeleteMutation,\n  Mutation,\n  Precondition,\n  VerifyMutation\n} from '../model/mutation';\nimport {\n  Datastore,\n  invokeBatchGetDocumentsRpc,\n  invokeCommitRpc\n} from '../remote/datastore';\nimport { fail, debugAssert } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\nimport { SnapshotVersion } from './snapshot_version';\nimport { ResourcePath } from '../model/path';\n\n/**\n * Internal transaction object responsible for accumulating the mutations to\n * perform and the base versions for any documents read.\n */\nexport class Transaction {\n  // The version of each document that was read during this transaction.\n  private readVersions = new Map</* path */ string, SnapshotVersion>();\n  private mutations: Mutation[] = [];\n  private committed = false;\n\n  /**\n   * A deferred usage error that occurred previously in this transaction that\n   * will cause the transaction to fail once it actually commits.\n   */\n  private lastWriteError: FirestoreError | null = null;\n\n  /**\n   * Set of documents that have been written in the transaction.\n   *\n   * When there's more than one write to the same key in a transaction, any\n   * writes after the first are handled differently.\n   */\n  private writtenDocs: Set<DocumentKey> = new Set();\n\n  constructor(private datastore: Datastore) {}\n\n  async lookup(keys: DocumentKey[]): Promise<MaybeDocument[]> {\n    this.ensureCommitNotCalled();\n\n    if (this.mutations.length > 0) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Firestore transactions require all reads to be executed before all writes.'\n      );\n    }\n    const docs = await invokeBatchGetDocumentsRpc(this.datastore, keys);\n    docs.forEach(doc => {\n      if (doc instanceof NoDocument || doc instanceof Document) {\n        this.recordVersion(doc);\n      } else {\n        fail('Document in a transaction was a ' + doc.constructor.name);\n      }\n    });\n    return docs;\n  }\n\n  set(key: DocumentKey, data: ParsedSetData): void {\n    this.write(data.toMutations(key, this.precondition(key)));\n    this.writtenDocs.add(key);\n  }\n\n  update(key: DocumentKey, data: ParsedUpdateData): void {\n    try {\n      this.write(data.toMutations(key, this.preconditionForUpdate(key)));\n    } catch (e) {\n      this.lastWriteError = e;\n    }\n    this.writtenDocs.add(key);\n  }\n\n  delete(key: DocumentKey): void {\n    this.write([new DeleteMutation(key, this.precondition(key))]);\n    this.writtenDocs.add(key);\n  }\n\n  async commit(): Promise<void> {\n    this.ensureCommitNotCalled();\n\n    if (this.lastWriteError) {\n      throw this.lastWriteError;\n    }\n    const unwritten = this.readVersions;\n    // For each mutation, note that the doc was written.\n    this.mutations.forEach(mutation => {\n      unwritten.delete(mutation.key.toString());\n    });\n    // For each document that was read but not written to, we want to perform\n    // a `verify` operation.\n    unwritten.forEach((_, path) => {\n      const key = new DocumentKey(ResourcePath.fromString(path));\n      this.mutations.push(new VerifyMutation(key, this.precondition(key)));\n    });\n    await invokeCommitRpc(this.datastore, this.mutations);\n    this.committed = true;\n  }\n\n  private recordVersion(doc: MaybeDocument): void {\n    let docVersion: SnapshotVersion;\n\n    if (doc instanceof Document) {\n      docVersion = doc.version;\n    } else if (doc instanceof NoDocument) {\n      // For deleted docs, we must use baseVersion 0 when we overwrite them.\n      docVersion = SnapshotVersion.min();\n    } else {\n      throw fail('Document in a transaction was a ' + doc.constructor.name);\n    }\n\n    const existingVersion = this.readVersions.get(doc.key.toString());\n    if (existingVersion) {\n      if (!docVersion.isEqual(existingVersion)) {\n        // This transaction will fail no matter what.\n        throw new FirestoreError(\n          Code.ABORTED,\n          'Document version changed between two reads.'\n        );\n      }\n    } else {\n      this.readVersions.set(doc.key.toString(), docVersion);\n    }\n  }\n\n  /**\n   * Returns the version of this document when it was read in this transaction,\n   * as a precondition, or no precondition if it was not read.\n   */\n  private precondition(key: DocumentKey): Precondition {\n    const version = this.readVersions.get(key.toString());\n    if (!this.writtenDocs.has(key) && version) {\n      return Precondition.updateTime(version);\n    } else {\n      return Precondition.none();\n    }\n  }\n\n  /**\n   * Returns the precondition for a document if the operation is an update.\n   */\n  private preconditionForUpdate(key: DocumentKey): Precondition {\n    const version = this.readVersions.get(key.toString());\n    // The first time a document is written, we want to take into account the\n    // read time and existence\n    if (!this.writtenDocs.has(key) && version) {\n      if (version.isEqual(SnapshotVersion.min())) {\n        // The document doesn't exist, so fail the transaction.\n\n        // This has to be validated locally because you can't send a\n        // precondition that a document does not exist without changing the\n        // semantics of the backend write to be an insert. This is the reverse\n        // of what we want, since we want to assert that the document doesn't\n        // exist but then send the update and have it fail. Since we can't\n        // express that to the backend, we have to validate locally.\n\n        // Note: this can change once we can send separate verify writes in the\n        // transaction.\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          \"Can't update a document that doesn't exist.\"\n        );\n      }\n      // Document exists, base precondition on document update time.\n      return Precondition.updateTime(version);\n    } else {\n      // Document was not read, so we just use the preconditions for a blind\n      // update.\n      return Precondition.exists(true);\n    }\n  }\n\n  private write(mutations: Mutation[]): void {\n    this.ensureCommitNotCalled();\n    this.mutations = this.mutations.concat(mutations);\n  }\n\n  private ensureCommitNotCalled(): void {\n    debugAssert(\n      !this.committed,\n      'A transaction object cannot be used after its update callback has been invoked.'\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { OnlineState } from '../core/types';\nimport { debugAssert } from '../util/assert';\nimport { AsyncQueue, DelayedOperation, TimerId } from '../util/async_queue';\nimport { FirestoreError } from '../util/error';\nimport { logError, logDebug } from '../util/log';\n\nconst LOG_TAG = 'OnlineStateTracker';\n\n// To deal with transient failures, we allow multiple stream attempts before\n// giving up and transitioning from OnlineState.Unknown to Offline.\n// TODO(mikelehen): This used to be set to 2 as a mitigation for b/66228394.\n// @jdimond thinks that bug is sufficiently fixed so that we can set this back\n// to 1. If that works okay, we could potentially remove this logic entirely.\nconst MAX_WATCH_STREAM_FAILURES = 1;\n\n// To deal with stream attempts that don't succeed or fail in a timely manner,\n// we have a timeout for OnlineState to reach Online or Offline.\n// If the timeout is reached, we transition to Offline rather than waiting\n// indefinitely.\nconst ONLINE_STATE_TIMEOUT_MS = 10 * 1000;\n\n/**\n * A component used by the RemoteStore to track the OnlineState (that is,\n * whether or not the client as a whole should be considered to be online or\n * offline), implementing the appropriate heuristics.\n *\n * In particular, when the client is trying to connect to the backend, we\n * allow up to MAX_WATCH_STREAM_FAILURES within ONLINE_STATE_TIMEOUT_MS for\n * a connection to succeed. If we have too many failures or the timeout elapses,\n * then we set the OnlineState to Offline, and the client will behave as if\n * it is offline (get()s will return cached data, etc.).\n */\nexport class OnlineStateTracker {\n  /** The current OnlineState. */\n  private state = OnlineState.Unknown;\n\n  /**\n   * A count of consecutive failures to open the stream. If it reaches the\n   * maximum defined by MAX_WATCH_STREAM_FAILURES, we'll set the OnlineState to\n   * Offline.\n   */\n  private watchStreamFailures = 0;\n\n  /**\n   * A timer that elapses after ONLINE_STATE_TIMEOUT_MS, at which point we\n   * transition from OnlineState.Unknown to OnlineState.Offline without waiting\n   * for the stream to actually fail (MAX_WATCH_STREAM_FAILURES times).\n   */\n  private onlineStateTimer: DelayedOperation<void> | null = null;\n\n  /**\n   * Whether the client should log a warning message if it fails to connect to\n   * the backend (initially true, cleared after a successful stream, or if we've\n   * logged the message already).\n   */\n  private shouldWarnClientIsOffline = true;\n\n  constructor(\n    private asyncQueue: AsyncQueue,\n    private onlineStateHandler: (onlineState: OnlineState) => void\n  ) {}\n\n  /**\n   * Called by RemoteStore when a watch stream is started (including on each\n   * backoff attempt).\n   *\n   * If this is the first attempt, it sets the OnlineState to Unknown and starts\n   * the onlineStateTimer.\n   */\n  handleWatchStreamStart(): void {\n    if (this.watchStreamFailures === 0) {\n      this.setAndBroadcast(OnlineState.Unknown);\n\n      debugAssert(\n        this.onlineStateTimer === null,\n        `onlineStateTimer shouldn't be started yet`\n      );\n      this.onlineStateTimer = this.asyncQueue.enqueueAfterDelay(\n        TimerId.OnlineStateTimeout,\n        ONLINE_STATE_TIMEOUT_MS,\n        () => {\n          this.onlineStateTimer = null;\n          debugAssert(\n            this.state === OnlineState.Unknown,\n            'Timer should be canceled if we transitioned to a different state.'\n          );\n          this.logClientOfflineWarningIfNecessary(\n            `Backend didn't respond within ${ONLINE_STATE_TIMEOUT_MS / 1000} ` +\n              `seconds.`\n          );\n          this.setAndBroadcast(OnlineState.Offline);\n\n          // NOTE: handleWatchStreamFailure() will continue to increment\n          // watchStreamFailures even though we are already marked Offline,\n          // but this is non-harmful.\n\n          return Promise.resolve();\n        }\n      );\n    }\n  }\n\n  /**\n   * Updates our OnlineState as appropriate after the watch stream reports a\n   * failure. The first failure moves us to the 'Unknown' state. We then may\n   * allow multiple failures (based on MAX_WATCH_STREAM_FAILURES) before we\n   * actually transition to the 'Offline' state.\n   */\n  handleWatchStreamFailure(error: FirestoreError): void {\n    if (this.state === OnlineState.Online) {\n      this.setAndBroadcast(OnlineState.Unknown);\n\n      // To get to OnlineState.Online, set() must have been called which would\n      // have reset our heuristics.\n      debugAssert(\n        this.watchStreamFailures === 0,\n        'watchStreamFailures must be 0'\n      );\n      debugAssert(\n        this.onlineStateTimer === null,\n        'onlineStateTimer must be null'\n      );\n    } else {\n      this.watchStreamFailures++;\n      if (this.watchStreamFailures >= MAX_WATCH_STREAM_FAILURES) {\n        this.clearOnlineStateTimer();\n\n        this.logClientOfflineWarningIfNecessary(\n          `Connection failed ${MAX_WATCH_STREAM_FAILURES} ` +\n            `times. Most recent error: ${error.toString()}`\n        );\n\n        this.setAndBroadcast(OnlineState.Offline);\n      }\n    }\n  }\n\n  /**\n   * Explicitly sets the OnlineState to the specified state.\n   *\n   * Note that this resets our timers / failure counters, etc. used by our\n   * Offline heuristics, so must not be used in place of\n   * handleWatchStreamStart() and handleWatchStreamFailure().\n   */\n  set(newState: OnlineState): void {\n    this.clearOnlineStateTimer();\n    this.watchStreamFailures = 0;\n\n    if (newState === OnlineState.Online) {\n      // We've connected to watch at least once. Don't warn the developer\n      // about being offline going forward.\n      this.shouldWarnClientIsOffline = false;\n    }\n\n    this.setAndBroadcast(newState);\n  }\n\n  private setAndBroadcast(newState: OnlineState): void {\n    if (newState !== this.state) {\n      this.state = newState;\n      this.onlineStateHandler(newState);\n    }\n  }\n\n  private logClientOfflineWarningIfNecessary(details: string): void {\n    const message =\n      `Could not reach Cloud Firestore backend. ${details}\\n` +\n      `This typically indicates that your device does not have a healthy ` +\n      `Internet connection at the moment. The client will operate in offline ` +\n      `mode until it is able to successfully connect to the backend.`;\n    if (this.shouldWarnClientIsOffline) {\n      logError(message);\n      this.shouldWarnClientIsOffline = false;\n    } else {\n      logDebug(LOG_TAG, message);\n    }\n  }\n\n  private clearOnlineStateTimer(): void {\n    if (this.onlineStateTimer !== null) {\n      this.onlineStateTimer.cancel();\n      this.onlineStateTimer = null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { Transaction } from '../core/transaction';\nimport { OnlineState, TargetId } from '../core/types';\nimport { LocalStore } from '../local/local_store';\nimport { TargetData, TargetPurpose } from '../local/target_data';\nimport { MutationResult } from '../model/mutation';\nimport {\n  BATCHID_UNKNOWN,\n  MutationBatch,\n  MutationBatchResult\n} from '../model/mutation_batch';\nimport { debugAssert } from '../util/assert';\nimport { FirestoreError } from '../util/error';\nimport { logDebug } from '../util/log';\nimport { DocumentKeySet } from '../model/collections';\nimport { AsyncQueue } from '../util/async_queue';\nimport { ConnectivityMonitor, NetworkStatus } from './connectivity_monitor';\nimport {\n  Datastore,\n  newPersistentWatchStream,\n  newPersistentWriteStream\n} from './datastore';\nimport { OnlineStateTracker } from './online_state_tracker';\nimport {\n  PersistentListenStream,\n  PersistentWriteStream\n} from './persistent_stream';\nimport { RemoteSyncer } from './remote_syncer';\nimport { isPermanentWriteError } from './rpc_error';\nimport {\n  DocumentWatchChange,\n  ExistenceFilterChange,\n  TargetMetadataProvider,\n  WatchChange,\n  WatchChangeAggregator,\n  WatchTargetChange,\n  WatchTargetChangeState\n} from './watch_change';\nimport { ByteString } from '../util/byte_string';\nimport { isIndexedDbTransactionError } from '../local/simple_db';\n\nconst LOG_TAG = 'RemoteStore';\n\n// TODO(b/35853402): Negotiate this with the stream.\nconst MAX_PENDING_WRITES = 10;\n\n/**\n * RemoteStore - An interface to remotely stored data, basically providing a\n * wrapper around the Datastore that is more reliable for the rest of the\n * system.\n *\n * RemoteStore is responsible for maintaining the connection to the server.\n * - maintaining a list of active listens.\n * - reconnecting when the connection is dropped.\n * - resuming all the active listens on reconnect.\n *\n * RemoteStore handles all incoming events from the Datastore.\n * - listening to the watch stream and repackaging the events as RemoteEvents\n * - notifying SyncEngine of any changes to the active listens.\n *\n * RemoteStore takes writes from other components and handles them reliably.\n * - pulling pending mutations from LocalStore and sending them to Datastore.\n * - retrying mutations that failed because of network problems.\n * - acking mutations to the SyncEngine once they are accepted or rejected.\n */\nexport class RemoteStore implements TargetMetadataProvider {\n  /**\n   * A list of up to MAX_PENDING_WRITES writes that we have fetched from the\n   * LocalStore via fillWritePipeline() and have or will send to the write\n   * stream.\n   *\n   * Whenever writePipeline.length > 0 the RemoteStore will attempt to start or\n   * restart the write stream. When the stream is established the writes in the\n   * pipeline will be sent in order.\n   *\n   * Writes remain in writePipeline until they are acknowledged by the backend\n   * and thus will automatically be re-sent if the stream is interrupted /\n   * restarted before they're acknowledged.\n   *\n   * Write responses from the backend are linked to their originating request\n   * purely based on order, and so we can just shift() writes from the front of\n   * the writePipeline as we receive responses.\n   */\n  private writePipeline: MutationBatch[] = [];\n\n  /**\n   * A mapping of watched targets that the client cares about tracking and the\n   * user has explicitly called a 'listen' for this target.\n   *\n   * These targets may or may not have been sent to or acknowledged by the\n   * server. On re-establishing the listen stream, these targets should be sent\n   * to the server. The targets removed with unlistens are removed eagerly\n   * without waiting for confirmation from the listen stream.\n   */\n  private listenTargets = new Map<TargetId, TargetData>();\n\n  private connectivityMonitor: ConnectivityMonitor;\n  private watchStream: PersistentListenStream;\n  private writeStream: PersistentWriteStream;\n  private watchChangeAggregator: WatchChangeAggregator | null = null;\n\n  /**\n   * Set to true by enableNetwork() and false by disableNetwork() and indicates\n   * the user-preferred network state.\n   */\n  private networkEnabled = false;\n\n  private isPrimary = false;\n\n  /**\n   * When set to `true`, the network was taken offline due to an IndexedDB\n   * failure. The state is flipped to `false` when access becomes available\n   * again.\n   */\n  private indexedDbFailed = false;\n\n  private onlineStateTracker: OnlineStateTracker;\n\n  constructor(\n    /**\n     * The local store, used to fill the write pipeline with outbound mutations.\n     */\n    private localStore: LocalStore,\n    /** The client-side proxy for interacting with the backend. */\n    private datastore: Datastore,\n    private asyncQueue: AsyncQueue,\n    onlineStateHandler: (onlineState: OnlineState) => void,\n    connectivityMonitor: ConnectivityMonitor\n  ) {\n    this.connectivityMonitor = connectivityMonitor;\n    this.connectivityMonitor.addCallback((status: NetworkStatus) => {\n      asyncQueue.enqueueAndForget(async () => {\n        if (this.canUseNetwork()) {\n          logDebug(\n            LOG_TAG,\n            'Restarting streams for network reachability change.'\n          );\n          await this.restartNetwork();\n        }\n      });\n    });\n\n    this.onlineStateTracker = new OnlineStateTracker(\n      asyncQueue,\n      onlineStateHandler\n    );\n\n    // Create streams (but note they're not started yet).\n    this.watchStream = newPersistentWatchStream(this.datastore, asyncQueue, {\n      onOpen: this.onWatchStreamOpen.bind(this),\n      onClose: this.onWatchStreamClose.bind(this),\n      onWatchChange: this.onWatchStreamChange.bind(this)\n    });\n\n    this.writeStream = newPersistentWriteStream(this.datastore, asyncQueue, {\n      onOpen: this.onWriteStreamOpen.bind(this),\n      onClose: this.onWriteStreamClose.bind(this),\n      onHandshakeComplete: this.onWriteHandshakeComplete.bind(this),\n      onMutationResult: this.onMutationResult.bind(this)\n    });\n  }\n\n  /**\n   * SyncEngine to notify of watch and write events. This must be set\n   * immediately after construction.\n   */\n  syncEngine!: RemoteSyncer;\n\n  /**\n   * Starts up the remote store, creating streams, restoring state from\n   * LocalStore, etc.\n   */\n  start(): Promise<void> {\n    return this.enableNetwork();\n  }\n\n  /** Re-enables the network. Idempotent. */\n  enableNetwork(): Promise<void> {\n    this.networkEnabled = true;\n    return this.enableNetworkInternal();\n  }\n\n  private async enableNetworkInternal(): Promise<void> {\n    if (this.canUseNetwork()) {\n      if (this.shouldStartWatchStream()) {\n        this.startWatchStream();\n      } else {\n        this.onlineStateTracker.set(OnlineState.Unknown);\n      }\n\n      // This will start the write stream if necessary.\n      await this.fillWritePipeline();\n    }\n  }\n\n  /**\n   * Temporarily disables the network. The network can be re-enabled using\n   * enableNetwork().\n   */\n  async disableNetwork(): Promise<void> {\n    this.networkEnabled = false;\n    await this.disableNetworkInternal();\n\n    // Set the OnlineState to Offline so get()s return from cache, etc.\n    this.onlineStateTracker.set(OnlineState.Offline);\n  }\n\n  private async disableNetworkInternal(): Promise<void> {\n    await this.writeStream.stop();\n    await this.watchStream.stop();\n\n    if (this.writePipeline.length > 0) {\n      logDebug(\n        LOG_TAG,\n        `Stopping write stream with ${this.writePipeline.length} pending writes`\n      );\n      this.writePipeline = [];\n    }\n\n    this.cleanUpWatchStreamState();\n  }\n\n  async shutdown(): Promise<void> {\n    logDebug(LOG_TAG, 'RemoteStore shutting down.');\n    this.networkEnabled = false;\n    await this.disableNetworkInternal();\n    this.connectivityMonitor.shutdown();\n\n    // Set the OnlineState to Unknown (rather than Offline) to avoid potentially\n    // triggering spurious listener events with cached data, etc.\n    this.onlineStateTracker.set(OnlineState.Unknown);\n  }\n\n  /**\n   * Starts new listen for the given target. Uses resume token if provided. It\n   * is a no-op if the target of given `TargetData` is already being listened to.\n   */\n  listen(targetData: TargetData): void {\n    if (this.listenTargets.has(targetData.targetId)) {\n      return;\n    }\n\n    // Mark this as something the client is currently listening for.\n    this.listenTargets.set(targetData.targetId, targetData);\n\n    if (this.shouldStartWatchStream()) {\n      // The listen will be sent in onWatchStreamOpen\n      this.startWatchStream();\n    } else if (this.watchStream.isOpen()) {\n      this.sendWatchRequest(targetData);\n    }\n  }\n\n  /**\n   * Removes the listen from server. It is a no-op if the given target id is\n   * not being listened to.\n   */\n  unlisten(targetId: TargetId): void {\n    debugAssert(\n      this.listenTargets.has(targetId),\n      `unlisten called on target no currently watched: ${targetId}`\n    );\n\n    this.listenTargets.delete(targetId);\n    if (this.watchStream.isOpen()) {\n      this.sendUnwatchRequest(targetId);\n    }\n\n    if (this.listenTargets.size === 0) {\n      if (this.watchStream.isOpen()) {\n        this.watchStream.markIdle();\n      } else if (this.canUseNetwork()) {\n        // Revert to OnlineState.Unknown if the watch stream is not open and we\n        // have no listeners, since without any listens to send we cannot\n        // confirm if the stream is healthy and upgrade to OnlineState.Online.\n        this.onlineStateTracker.set(OnlineState.Unknown);\n      }\n    }\n  }\n\n  /** {@link TargetMetadataProvider.getTargetDataForTarget} */\n  getTargetDataForTarget(targetId: TargetId): TargetData | null {\n    return this.listenTargets.get(targetId) || null;\n  }\n\n  /** {@link TargetMetadataProvider.getRemoteKeysForTarget} */\n  getRemoteKeysForTarget(targetId: TargetId): DocumentKeySet {\n    return this.syncEngine.getRemoteKeysForTarget(targetId);\n  }\n\n  /**\n   * We need to increment the the expected number of pending responses we're due\n   * from watch so we wait for the ack to process any messages from this target.\n   */\n  private sendWatchRequest(targetData: TargetData): void {\n    this.watchChangeAggregator!.recordPendingTargetRequest(targetData.targetId);\n    this.watchStream.watch(targetData);\n  }\n\n  /**\n   * We need to increment the expected number of pending responses we're due\n   * from watch so we wait for the removal on the server before we process any\n   * messages from this target.\n   */\n  private sendUnwatchRequest(targetId: TargetId): void {\n    this.watchChangeAggregator!.recordPendingTargetRequest(targetId);\n    this.watchStream.unwatch(targetId);\n  }\n\n  private startWatchStream(): void {\n    debugAssert(\n      this.shouldStartWatchStream(),\n      'startWatchStream() called when shouldStartWatchStream() is false.'\n    );\n\n    this.watchChangeAggregator = new WatchChangeAggregator(this);\n    this.watchStream.start();\n    this.onlineStateTracker.handleWatchStreamStart();\n  }\n\n  /**\n   * Returns whether the watch stream should be started because it's necessary\n   * and has not yet been started.\n   */\n  private shouldStartWatchStream(): boolean {\n    return (\n      this.canUseNetwork() &&\n      !this.watchStream.isStarted() &&\n      this.listenTargets.size > 0\n    );\n  }\n\n  canUseNetwork(): boolean {\n    return !this.indexedDbFailed && this.isPrimary && this.networkEnabled;\n  }\n\n  private cleanUpWatchStreamState(): void {\n    this.watchChangeAggregator = null;\n  }\n\n  private async onWatchStreamOpen(): Promise<void> {\n    this.listenTargets.forEach((targetData, targetId) => {\n      this.sendWatchRequest(targetData);\n    });\n  }\n\n  private async onWatchStreamClose(error?: FirestoreError): Promise<void> {\n    if (error === undefined) {\n      // Graceful stop (due to stop() or idle timeout). Make sure that's\n      // desirable.\n      debugAssert(\n        !this.shouldStartWatchStream(),\n        'Watch stream was stopped gracefully while still needed.'\n      );\n    }\n\n    this.cleanUpWatchStreamState();\n\n    // If we still need the watch stream, retry the connection.\n    if (this.shouldStartWatchStream()) {\n      this.onlineStateTracker.handleWatchStreamFailure(error!);\n\n      this.startWatchStream();\n    } else {\n      // No need to restart watch stream because there are no active targets.\n      // The online state is set to unknown because there is no active attempt\n      // at establishing a connection\n      this.onlineStateTracker.set(OnlineState.Unknown);\n    }\n  }\n\n  private async onWatchStreamChange(\n    watchChange: WatchChange,\n    snapshotVersion: SnapshotVersion\n  ): Promise<void> {\n    // Mark the client as online since we got a message from the server\n    this.onlineStateTracker.set(OnlineState.Online);\n\n    if (\n      watchChange instanceof WatchTargetChange &&\n      watchChange.state === WatchTargetChangeState.Removed &&\n      watchChange.cause\n    ) {\n      // There was an error on a target, don't wait for a consistent snapshot\n      // to raise events\n      try {\n        await this.handleTargetError(watchChange);\n      } catch (e) {\n        logDebug(\n          LOG_TAG,\n          'Failed to remove targets %s: %s ',\n          watchChange.targetIds.join(','),\n          e\n        );\n        await this.disableNetworkUntilRecovery(e);\n      }\n      return;\n    }\n\n    if (watchChange instanceof DocumentWatchChange) {\n      this.watchChangeAggregator!.handleDocumentChange(watchChange);\n    } else if (watchChange instanceof ExistenceFilterChange) {\n      this.watchChangeAggregator!.handleExistenceFilter(watchChange);\n    } else {\n      debugAssert(\n        watchChange instanceof WatchTargetChange,\n        'Expected watchChange to be an instance of WatchTargetChange'\n      );\n      this.watchChangeAggregator!.handleTargetChange(watchChange);\n    }\n\n    if (!snapshotVersion.isEqual(SnapshotVersion.min())) {\n      try {\n        const lastRemoteSnapshotVersion = await this.localStore.getLastRemoteSnapshotVersion();\n        if (snapshotVersion.compareTo(lastRemoteSnapshotVersion) >= 0) {\n          // We have received a target change with a global snapshot if the snapshot\n          // version is not equal to SnapshotVersion.min().\n          await this.raiseWatchSnapshot(snapshotVersion);\n        }\n      } catch (e) {\n        logDebug(LOG_TAG, 'Failed to raise snapshot:', e);\n        await this.disableNetworkUntilRecovery(e);\n      }\n    }\n  }\n\n  /**\n   * Recovery logic for IndexedDB errors that takes the network offline until\n   * `op` succeeds. Retries are scheduled with backoff using\n   * `enqueueRetryable()`. If `op()` is not provided, IndexedDB access is\n   * validated via a generic operation.\n   *\n   * The returned Promise is resolved once the network is disabled and before\n   * any retry attempt.\n   */\n  private async disableNetworkUntilRecovery(\n    e: FirestoreError,\n    op?: () => Promise<unknown>\n  ): Promise<void> {\n    if (isIndexedDbTransactionError(e)) {\n      debugAssert(\n        !this.indexedDbFailed,\n        'Unexpected network event when IndexedDB was marked failed.'\n      );\n      this.indexedDbFailed = true;\n\n      // Disable network and raise offline snapshots\n      await this.disableNetworkInternal();\n      this.onlineStateTracker.set(OnlineState.Offline);\n\n      if (!op) {\n        // Use a simple read operation to determine if IndexedDB recovered.\n        // Ideally, we would expose a health check directly on SimpleDb, but\n        // RemoteStore only has access to persistence through LocalStore.\n        op = () => this.localStore.getLastRemoteSnapshotVersion();\n      }\n\n      // Probe IndexedDB periodically and re-enable network\n      this.asyncQueue.enqueueRetryable(async () => {\n        logDebug(LOG_TAG, 'Retrying IndexedDB access');\n        await op!();\n        this.indexedDbFailed = false;\n        await this.enableNetworkInternal();\n      });\n    } else {\n      throw e;\n    }\n  }\n\n  /**\n   * Executes `op`. If `op` fails, takes the network offline until `op`\n   * succeeds. Returns after the first attempt.\n   */\n  private executeWithRecovery(op: () => Promise<void>): Promise<void> {\n    return op().catch(e => this.disableNetworkUntilRecovery(e, op));\n  }\n\n  /**\n   * Takes a batch of changes from the Datastore, repackages them as a\n   * RemoteEvent, and passes that on to the listener, which is typically the\n   * SyncEngine.\n   */\n  private raiseWatchSnapshot(snapshotVersion: SnapshotVersion): Promise<void> {\n    debugAssert(\n      !snapshotVersion.isEqual(SnapshotVersion.min()),\n      \"Can't raise event for unknown SnapshotVersion\"\n    );\n    const remoteEvent = this.watchChangeAggregator!.createRemoteEvent(\n      snapshotVersion\n    );\n\n    // Update in-memory resume tokens. LocalStore will update the\n    // persistent view of these when applying the completed RemoteEvent.\n    remoteEvent.targetChanges.forEach((change, targetId) => {\n      if (change.resumeToken.approximateByteSize() > 0) {\n        const targetData = this.listenTargets.get(targetId);\n        // A watched target might have been removed already.\n        if (targetData) {\n          this.listenTargets.set(\n            targetId,\n            targetData.withResumeToken(change.resumeToken, snapshotVersion)\n          );\n        }\n      }\n    });\n\n    // Re-establish listens for the targets that have been invalidated by\n    // existence filter mismatches.\n    remoteEvent.targetMismatches.forEach(targetId => {\n      const targetData = this.listenTargets.get(targetId);\n      if (!targetData) {\n        // A watched target might have been removed already.\n        return;\n      }\n\n      // Clear the resume token for the target, since we're in a known mismatch\n      // state.\n      this.listenTargets.set(\n        targetId,\n        targetData.withResumeToken(\n          ByteString.EMPTY_BYTE_STRING,\n          targetData.snapshotVersion\n        )\n      );\n\n      // Cause a hard reset by unwatching and rewatching immediately, but\n      // deliberately don't send a resume token so that we get a full update.\n      this.sendUnwatchRequest(targetId);\n\n      // Mark the target we send as being on behalf of an existence filter\n      // mismatch, but don't actually retain that in listenTargets. This ensures\n      // that we flag the first re-listen this way without impacting future\n      // listens of this target (that might happen e.g. on reconnect).\n      const requestTargetData = new TargetData(\n        targetData.target,\n        targetId,\n        TargetPurpose.ExistenceFilterMismatch,\n        targetData.sequenceNumber\n      );\n      this.sendWatchRequest(requestTargetData);\n    });\n\n    // Finally raise remote event\n    return this.syncEngine.applyRemoteEvent(remoteEvent);\n  }\n\n  /** Handles an error on a target */\n  private async handleTargetError(\n    watchChange: WatchTargetChange\n  ): Promise<void> {\n    debugAssert(!!watchChange.cause, 'Handling target error without a cause');\n    const error = watchChange.cause!;\n    for (const targetId of watchChange.targetIds) {\n      // A watched target might have been removed already.\n      if (this.listenTargets.has(targetId)) {\n        await this.syncEngine.rejectListen(targetId, error);\n        this.listenTargets.delete(targetId);\n        this.watchChangeAggregator!.removeTarget(targetId);\n      }\n    }\n  }\n\n  /**\n   * Attempts to fill our write pipeline with writes from the LocalStore.\n   *\n   * Called internally to bootstrap or refill the write pipeline and by\n   * SyncEngine whenever there are new mutations to process.\n   *\n   * Starts the write stream if necessary.\n   */\n  async fillWritePipeline(): Promise<void> {\n    let lastBatchIdRetrieved =\n      this.writePipeline.length > 0\n        ? this.writePipeline[this.writePipeline.length - 1].batchId\n        : BATCHID_UNKNOWN;\n\n    while (this.canAddToWritePipeline()) {\n      try {\n        const batch = await this.localStore.nextMutationBatch(\n          lastBatchIdRetrieved\n        );\n\n        if (batch === null) {\n          if (this.writePipeline.length === 0) {\n            this.writeStream.markIdle();\n          }\n          break;\n        } else {\n          lastBatchIdRetrieved = batch.batchId;\n          this.addToWritePipeline(batch);\n        }\n      } catch (e) {\n        await this.disableNetworkUntilRecovery(e);\n      }\n    }\n\n    if (this.shouldStartWriteStream()) {\n      this.startWriteStream();\n    }\n  }\n\n  /**\n   * Returns true if we can add to the write pipeline (i.e. the network is\n   * enabled and the write pipeline is not full).\n   */\n  private canAddToWritePipeline(): boolean {\n    return (\n      this.canUseNetwork() && this.writePipeline.length < MAX_PENDING_WRITES\n    );\n  }\n\n  // For testing\n  outstandingWrites(): number {\n    return this.writePipeline.length;\n  }\n\n  /**\n   * Queues additional writes to be sent to the write stream, sending them\n   * immediately if the write stream is established.\n   */\n  private addToWritePipeline(batch: MutationBatch): void {\n    debugAssert(\n      this.canAddToWritePipeline(),\n      'addToWritePipeline called when pipeline is full'\n    );\n    this.writePipeline.push(batch);\n\n    if (this.writeStream.isOpen() && this.writeStream.handshakeComplete) {\n      this.writeStream.writeMutations(batch.mutations);\n    }\n  }\n\n  private shouldStartWriteStream(): boolean {\n    return (\n      this.canUseNetwork() &&\n      !this.writeStream.isStarted() &&\n      this.writePipeline.length > 0\n    );\n  }\n\n  private startWriteStream(): void {\n    debugAssert(\n      this.shouldStartWriteStream(),\n      'startWriteStream() called when shouldStartWriteStream() is false.'\n    );\n    this.writeStream.start();\n  }\n\n  private async onWriteStreamOpen(): Promise<void> {\n    this.writeStream.writeHandshake();\n  }\n\n  private async onWriteHandshakeComplete(): Promise<void> {\n    // Send the write pipeline now that the stream is established.\n    for (const batch of this.writePipeline) {\n      this.writeStream.writeMutations(batch.mutations);\n    }\n  }\n\n  private async onMutationResult(\n    commitVersion: SnapshotVersion,\n    results: MutationResult[]\n  ): Promise<void> {\n    // This is a response to a write containing mutations and should be\n    // correlated to the first write in our write pipeline.\n    debugAssert(\n      this.writePipeline.length > 0,\n      'Got result for empty write pipeline'\n    );\n    const batch = this.writePipeline.shift()!;\n    const success = MutationBatchResult.from(batch, commitVersion, results);\n\n    await this.executeWithRecovery(() =>\n      this.syncEngine.applySuccessfulWrite(success)\n    );\n\n    // It's possible that with the completion of this mutation another\n    // slot has freed up.\n    await this.fillWritePipeline();\n  }\n\n  private async onWriteStreamClose(error?: FirestoreError): Promise<void> {\n    if (error === undefined) {\n      // Graceful stop (due to stop() or idle timeout). Make sure that's\n      // desirable.\n      debugAssert(\n        !this.shouldStartWriteStream(),\n        'Write stream was stopped gracefully while still needed.'\n      );\n    }\n\n    // If the write stream closed after the write handshake completes, a write\n    // operation failed and we fail the pending operation.\n    if (error && this.writeStream.handshakeComplete) {\n      // This error affects the actual write.\n      await this.handleWriteError(error!);\n    }\n\n    // The write stream might have been started by refilling the write\n    // pipeline for failed writes\n    if (this.shouldStartWriteStream()) {\n      this.startWriteStream();\n    }\n  }\n\n  private async handleWriteError(error: FirestoreError): Promise<void> {\n    // Only handle permanent errors here. If it's transient, just let the retry\n    // logic kick in.\n    if (isPermanentWriteError(error.code)) {\n      // This was a permanent error, the request itself was the problem\n      // so it's not going to succeed if we resend it.\n      const batch = this.writePipeline.shift()!;\n\n      // In this case it's also unlikely that the server itself is melting\n      // down -- this was just a bad request so inhibit backoff on the next\n      // restart.\n      this.writeStream.inhibitBackoff();\n\n      await this.executeWithRecovery(() =>\n        this.syncEngine.rejectFailedWrite(batch.batchId, error)\n      );\n\n      // It's possible that with the completion of this mutation\n      // another slot has freed up.\n      await this.fillWritePipeline();\n    } else {\n      // Transient error, just let the retry logic kick in.\n    }\n  }\n\n  createTransaction(): Transaction {\n    return new Transaction(this.datastore);\n  }\n\n  private async restartNetwork(): Promise<void> {\n    this.networkEnabled = false;\n    await this.disableNetworkInternal();\n    this.onlineStateTracker.set(OnlineState.Unknown);\n    await this.enableNetwork();\n  }\n\n  async handleCredentialChange(): Promise<void> {\n    if (this.canUseNetwork()) {\n      // Tear down and re-create our network streams. This will ensure we get a fresh auth token\n      // for the new user and re-fill the write pipeline with new mutations from the LocalStore\n      // (since mutations are per-user).\n      logDebug(LOG_TAG, 'RemoteStore restarting streams for new credential');\n      await this.restartNetwork();\n    }\n  }\n\n  /**\n   * Toggles the network state when the client gains or loses its primary lease.\n   */\n  async applyPrimaryState(isPrimary: boolean): Promise<void> {\n    this.isPrimary = isPrimary;\n\n    if (isPrimary && this.networkEnabled) {\n      await this.enableNetwork();\n    } else if (!isPrimary) {\n      await this.disableNetworkInternal();\n      this.onlineStateTracker.set(OnlineState.Unknown);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { BatchId, MutationBatchState, TargetId } from '../core/types';\nimport { QueryTargetState } from './shared_client_state_syncer';\nimport { debugAssert } from '../util/assert';\nimport { ClientId } from './shared_client_state';\nimport { User } from '../auth/user';\n\n// The format of the LocalStorage key that stores the client state is:\n//     firestore_clients_<persistence_prefix>_<instance_key>\nexport const CLIENT_STATE_KEY_PREFIX = 'firestore_clients';\n\n/** Assembles the key for a client state in WebStorage */\nexport function createWebStorageClientStateKey(\n  persistenceKey: string,\n  clientId: ClientId\n): string {\n  debugAssert(\n    clientId.indexOf('_') === -1,\n    `Client key cannot contain '_', but was '${clientId}'`\n  );\n\n  return `${CLIENT_STATE_KEY_PREFIX}_${persistenceKey}_${clientId}`;\n}\n\n/**\n * The JSON representation of a clients's metadata as used during WebStorage\n * serialization. The ClientId is omitted here as it is encoded as part of the\n * key.\n */\nexport interface ClientStateSchema {\n  activeTargetIds: number[];\n  updateTimeMs: number;\n}\n\n// The format of the WebStorage key that stores the mutation state is:\n//     firestore_mutations_<persistence_prefix>_<batch_id>\n//     (for unauthenticated users)\n// or: firestore_mutations_<persistence_prefix>_<batch_id>_<user_uid>\n//\n// 'user_uid' is last to avoid needing to escape '_' characters that it might\n// contain.\nexport const MUTATION_BATCH_KEY_PREFIX = 'firestore_mutations';\n\n/** Assembles the key for a mutation batch in WebStorage */\nexport function createWebStorageMutationBatchKey(\n  persistenceKey: string,\n  user: User,\n  batchId: BatchId\n): string {\n  let mutationKey = `${MUTATION_BATCH_KEY_PREFIX}_${persistenceKey}_${batchId}`;\n\n  if (user.isAuthenticated()) {\n    mutationKey += `_${user.uid}`;\n  }\n\n  return mutationKey;\n}\n\n/**\n * The JSON representation of a mutation batch's metadata as used during\n * WebStorage serialization. The UserId and BatchId is omitted as it is\n * encoded as part of the key.\n */\nexport interface MutationMetadataSchema {\n  state: MutationBatchState;\n  error?: { code: string; message: string }; // Only set when state === 'rejected'\n  updateTimeMs: number;\n}\n\n// The format of the WebStorage key that stores a query target's metadata is:\n//     firestore_targets_<persistence_prefix>_<target_id>\nexport const QUERY_TARGET_KEY_PREFIX = 'firestore_targets';\n\n/** Assembles the key for a query state in WebStorage */\nexport function createWebStorageQueryTargetMetadataKey(\n  persistenceKey: string,\n  targetId: TargetId\n): string {\n  return `${QUERY_TARGET_KEY_PREFIX}_${persistenceKey}_${targetId}`;\n}\n\n/**\n * The JSON representation of a query target's state as used during WebStorage\n * serialization. The TargetId is omitted as it is encoded as part of the key.\n */\nexport interface QueryTargetStateSchema {\n  state: QueryTargetState;\n  error?: { code: string; message: string }; // Only set when state === 'rejected'\n  updateTimeMs: number;\n}\n\n// The WebStorage prefix that stores the primary tab's online state. The\n// format of the key is:\n//     firestore_online_state_<persistence_prefix>\nexport const ONLINE_STATE_KEY_PREFIX = 'firestore_online_state';\n\n/** Assembles the key for the online state of the primary tab. */\nexport function createWebStorageOnlineStateKey(persistenceKey: string): string {\n  return `${ONLINE_STATE_KEY_PREFIX}_${persistenceKey}`;\n}\n\n/**\n * The JSON representation of the system's online state, as written by the\n * primary client.\n */\nexport interface SharedOnlineStateSchema {\n  /**\n   * The clientId of the client that wrote this onlineState value. Tracked so\n   * that on startup, clients can check if this client is still active when\n   * determining whether to apply this value or not.\n   */\n  readonly clientId: string;\n  readonly onlineState: string;\n}\n\n// The WebStorage key prefix for the key that stores the last sequence number allocated. The key\n// looks like 'firestore_sequence_number_<persistence_prefix>'.\nexport const SEQUENCE_NUMBER_KEY_PREFIX = 'firestore_sequence_number';\n\n/** Assembles the key for the current sequence number. */\nexport function createWebStorageSequenceNumberKey(\n  persistenceKey: string\n): string {\n  return `${SEQUENCE_NUMBER_KEY_PREFIX}_${persistenceKey}`;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { User } from '../auth/user';\nimport { ListenSequence } from '../core/listen_sequence';\nimport {\n  BatchId,\n  ListenSequenceNumber,\n  MutationBatchState,\n  OnlineState,\n  TargetId\n} from '../core/types';\nimport { TargetIdSet, targetIdSet } from '../model/collections';\nimport { Platform } from '../platform/platform';\nimport { hardAssert, debugAssert } from '../util/assert';\nimport { AsyncQueue } from '../util/async_queue';\nimport { Code, FirestoreError } from '../util/error';\nimport { logError, logDebug } from '../util/log';\nimport { SortedSet } from '../util/sorted_set';\nimport { SortedMap } from '../util/sorted_map';\nimport { primitiveComparator } from '../util/misc';\nimport { isSafeInteger } from '../util/types';\nimport {\n  QueryTargetState,\n  SharedClientStateSyncer\n} from './shared_client_state_syncer';\nimport {\n  CLIENT_STATE_KEY_PREFIX,\n  ClientStateSchema,\n  createWebStorageClientStateKey,\n  createWebStorageMutationBatchKey,\n  createWebStorageOnlineStateKey,\n  createWebStorageQueryTargetMetadataKey,\n  createWebStorageSequenceNumberKey,\n  MUTATION_BATCH_KEY_PREFIX,\n  MutationMetadataSchema,\n  QUERY_TARGET_KEY_PREFIX,\n  QueryTargetStateSchema,\n  SharedOnlineStateSchema\n} from './shared_client_state_schema';\n\nconst LOG_TAG = 'SharedClientState';\n\n/**\n * A randomly-generated key assigned to each Firestore instance at startup.\n */\nexport type ClientId = string;\n\n/**\n * A `SharedClientState` keeps track of the global state of the mutations\n * and query targets for all active clients with the same persistence key (i.e.\n * project ID and FirebaseApp name). It relays local changes to other clients\n * and updates its local state as new state is observed.\n *\n * `SharedClientState` is primarily used for synchronization in Multi-Tab\n * environments. Each tab is responsible for registering its active query\n * targets and mutations. `SharedClientState` will then notify the listener\n * assigned to `.syncEngine` for updates to mutations and queries that\n * originated in other clients.\n *\n * To receive notifications, `.syncEngine` and `.onlineStateHandler` has to be\n * assigned before calling `start()`.\n */\nexport interface SharedClientState {\n  syncEngine: SharedClientStateSyncer | null;\n  onlineStateHandler: ((onlineState: OnlineState) => void) | null;\n  sequenceNumberHandler:\n    | ((sequenceNumber: ListenSequenceNumber) => void)\n    | null;\n\n  /** Registers the Mutation Batch ID of a newly pending mutation. */\n  addPendingMutation(batchId: BatchId): void;\n\n  /**\n   * Records that a pending mutation has been acknowledged or rejected.\n   * Called by the primary client to notify secondary clients of mutation\n   * results as they come back from the backend.\n   */\n  updateMutationState(\n    batchId: BatchId,\n    state: 'acknowledged' | 'rejected',\n    error?: FirestoreError\n  ): void;\n\n  /**\n   * Associates a new Query Target ID with the local Firestore client. Returns\n   * the new query state for the query (which can be 'current' if the query is\n   * already associated with another tab).\n   *\n   * If the target id is already associated with local client, the method simply\n   * returns its `QueryTargetState`.\n   */\n  addLocalQueryTarget(targetId: TargetId): QueryTargetState;\n\n  /** Removes the Query Target ID association from the local client. */\n  removeLocalQueryTarget(targetId: TargetId): void;\n\n  /** Checks whether the target is associated with the local client. */\n  isLocalQueryTarget(targetId: TargetId): boolean;\n\n  /**\n   * Processes an update to a query target.\n   *\n   * Called by the primary client to notify secondary clients of document\n   * changes or state transitions that affect the provided query target.\n   */\n  updateQueryState(\n    targetId: TargetId,\n    state: QueryTargetState,\n    error?: FirestoreError\n  ): void;\n\n  /**\n   * Removes the target's metadata entry.\n   *\n   * Called by the primary client when all clients stopped listening to a query\n   * target.\n   */\n  clearQueryState(targetId: TargetId): void;\n\n  /**\n   * Gets the active Query Targets IDs for all active clients.\n   *\n   * The implementation for this may require O(n) runtime, where 'n' is the size\n   * of the result set.\n   */\n  // Visible for testing\n  getAllActiveQueryTargets(): SortedSet<TargetId>;\n\n  /**\n   * Checks whether the provided target ID is currently being listened to by\n   * any of the active clients.\n   *\n   * The implementation may require O(n*log m) runtime, where 'n' is the number\n   * of clients and 'm' the number of targets.\n   */\n  isActiveQueryTarget(targetId: TargetId): boolean;\n\n  /**\n   * Starts the SharedClientState, reads existing client data and registers\n   * listeners for updates to new and existing clients.\n   */\n  start(): Promise<void>;\n\n  /** Shuts down the `SharedClientState` and its listeners. */\n  shutdown(): void;\n\n  /**\n   * Changes the active user and removes all existing user-specific data. The\n   * user change does not call back into SyncEngine (for example, no mutations\n   * will be marked as removed).\n   */\n  handleUserChange(\n    user: User,\n    removedBatchIds: BatchId[],\n    addedBatchIds: BatchId[]\n  ): void;\n\n  /** Changes the shared online state of all clients. */\n  setOnlineState(onlineState: OnlineState): void;\n\n  writeSequenceNumber(sequenceNumber: ListenSequenceNumber): void;\n}\n\n/**\n * Holds the state of a mutation batch, including its user ID, batch ID and\n * whether the batch is 'pending', 'acknowledged' or 'rejected'.\n */\n// Visible for testing\nexport class MutationMetadata {\n  constructor(\n    readonly user: User,\n    readonly batchId: BatchId,\n    readonly state: MutationBatchState,\n    readonly error?: FirestoreError\n  ) {\n    debugAssert(\n      (error !== undefined) === (state === 'rejected'),\n      `MutationMetadata must contain an error iff state is 'rejected'`\n    );\n  }\n\n  /**\n   * Parses a MutationMetadata from its JSON representation in WebStorage.\n   * Logs a warning and returns null if the format of the data is not valid.\n   */\n  static fromWebStorageEntry(\n    user: User,\n    batchId: BatchId,\n    value: string\n  ): MutationMetadata | null {\n    const mutationBatch = JSON.parse(value) as MutationMetadataSchema;\n\n    let validData =\n      typeof mutationBatch === 'object' &&\n      ['pending', 'acknowledged', 'rejected'].indexOf(mutationBatch.state) !==\n        -1 &&\n      (mutationBatch.error === undefined ||\n        typeof mutationBatch.error === 'object');\n\n    let firestoreError: FirestoreError | undefined = undefined;\n\n    if (validData && mutationBatch.error) {\n      validData =\n        typeof mutationBatch.error.message === 'string' &&\n        typeof mutationBatch.error.code === 'string';\n      if (validData) {\n        firestoreError = new FirestoreError(\n          mutationBatch.error.code as Code,\n          mutationBatch.error.message\n        );\n      }\n    }\n\n    if (validData) {\n      return new MutationMetadata(\n        user,\n        batchId,\n        mutationBatch.state,\n        firestoreError\n      );\n    } else {\n      logError(\n        LOG_TAG,\n        `Failed to parse mutation state for ID '${batchId}': ${value}`\n      );\n      return null;\n    }\n  }\n\n  toWebStorageJSON(): string {\n    const batchMetadata: MutationMetadataSchema = {\n      state: this.state,\n      updateTimeMs: Date.now() // Modify the existing value to trigger update.\n    };\n\n    if (this.error) {\n      batchMetadata.error = {\n        code: this.error.code,\n        message: this.error.message\n      };\n    }\n\n    return JSON.stringify(batchMetadata);\n  }\n}\n\n/**\n * Holds the state of a query target, including its target ID and whether the\n * target is 'not-current', 'current' or 'rejected'.\n */\n// Visible for testing\nexport class QueryTargetMetadata {\n  constructor(\n    readonly targetId: TargetId,\n    readonly state: QueryTargetState,\n    readonly error?: FirestoreError\n  ) {\n    debugAssert(\n      (error !== undefined) === (state === 'rejected'),\n      `QueryTargetMetadata must contain an error iff state is 'rejected'`\n    );\n  }\n\n  /**\n   * Parses a QueryTargetMetadata from its JSON representation in WebStorage.\n   * Logs a warning and returns null if the format of the data is not valid.\n   */\n  static fromWebStorageEntry(\n    targetId: TargetId,\n    value: string\n  ): QueryTargetMetadata | null {\n    const targetState = JSON.parse(value) as QueryTargetStateSchema;\n\n    let validData =\n      typeof targetState === 'object' &&\n      ['not-current', 'current', 'rejected'].indexOf(targetState.state) !==\n        -1 &&\n      (targetState.error === undefined ||\n        typeof targetState.error === 'object');\n\n    let firestoreError: FirestoreError | undefined = undefined;\n\n    if (validData && targetState.error) {\n      validData =\n        typeof targetState.error.message === 'string' &&\n        typeof targetState.error.code === 'string';\n      if (validData) {\n        firestoreError = new FirestoreError(\n          targetState.error.code as Code,\n          targetState.error.message\n        );\n      }\n    }\n\n    if (validData) {\n      return new QueryTargetMetadata(\n        targetId,\n        targetState.state,\n        firestoreError\n      );\n    } else {\n      logError(\n        LOG_TAG,\n        `Failed to parse target state for ID '${targetId}': ${value}`\n      );\n      return null;\n    }\n  }\n\n  toWebStorageJSON(): string {\n    const targetState: QueryTargetStateSchema = {\n      state: this.state,\n      updateTimeMs: Date.now() // Modify the existing value to trigger update.\n    };\n\n    if (this.error) {\n      targetState.error = {\n        code: this.error.code,\n        message: this.error.message\n      };\n    }\n\n    return JSON.stringify(targetState);\n  }\n}\n\n/**\n * Metadata state of a single client denoting the query targets it is actively\n * listening to.\n */\n// Visible for testing.\nexport interface ClientState {\n  readonly activeTargetIds: TargetIdSet;\n}\n\n/**\n * This class represents the immutable ClientState for a client read from\n * WebStorage, containing the list of active query targets.\n */\nclass RemoteClientState implements ClientState {\n  private constructor(\n    readonly clientId: ClientId,\n    readonly activeTargetIds: TargetIdSet\n  ) {}\n\n  /**\n   * Parses a RemoteClientState from the JSON representation in WebStorage.\n   * Logs a warning and returns null if the format of the data is not valid.\n   */\n  static fromWebStorageEntry(\n    clientId: ClientId,\n    value: string\n  ): RemoteClientState | null {\n    const clientState = JSON.parse(value) as ClientStateSchema;\n\n    let validData =\n      typeof clientState === 'object' &&\n      clientState.activeTargetIds instanceof Array;\n\n    let activeTargetIdsSet = targetIdSet();\n\n    for (let i = 0; validData && i < clientState.activeTargetIds.length; ++i) {\n      validData = isSafeInteger(clientState.activeTargetIds[i]);\n      activeTargetIdsSet = activeTargetIdsSet.add(\n        clientState.activeTargetIds[i]\n      );\n    }\n\n    if (validData) {\n      return new RemoteClientState(clientId, activeTargetIdsSet);\n    } else {\n      logError(\n        LOG_TAG,\n        `Failed to parse client data for instance '${clientId}': ${value}`\n      );\n      return null;\n    }\n  }\n}\n\n/**\n * This class represents the online state for all clients participating in\n * multi-tab. The online state is only written to by the primary client, and\n * used in secondary clients to update their query views.\n */\nexport class SharedOnlineState {\n  constructor(readonly clientId: string, readonly onlineState: OnlineState) {}\n\n  /**\n   * Parses a SharedOnlineState from its JSON representation in WebStorage.\n   * Logs a warning and returns null if the format of the data is not valid.\n   */\n  static fromWebStorageEntry(value: string): SharedOnlineState | null {\n    const onlineState = JSON.parse(value) as SharedOnlineStateSchema;\n\n    const validData =\n      typeof onlineState === 'object' &&\n      ['Unknown', 'Online', 'Offline'].indexOf(onlineState.onlineState) !==\n        -1 &&\n      typeof onlineState.clientId === 'string';\n\n    if (validData) {\n      return new SharedOnlineState(\n        onlineState.clientId,\n        onlineState.onlineState as OnlineState\n      );\n    } else {\n      logError(LOG_TAG, `Failed to parse online state: ${value}`);\n      return null;\n    }\n  }\n}\n\n/**\n * Metadata state of the local client. Unlike `RemoteClientState`, this class is\n * mutable and keeps track of all pending mutations, which allows us to\n * update the range of pending mutation batch IDs as new mutations are added or\n * removed.\n *\n * The data in `LocalClientState` is not read from WebStorage and instead\n * updated via its instance methods. The updated state can be serialized via\n * `toWebStorageJSON()`.\n */\n// Visible for testing.\nexport class LocalClientState implements ClientState {\n  activeTargetIds = targetIdSet();\n\n  addQueryTarget(targetId: TargetId): void {\n    this.activeTargetIds = this.activeTargetIds.add(targetId);\n  }\n\n  removeQueryTarget(targetId: TargetId): void {\n    this.activeTargetIds = this.activeTargetIds.delete(targetId);\n  }\n\n  /**\n   * Converts this entry into a JSON-encoded format we can use for WebStorage.\n   * Does not encode `clientId` as it is part of the key in WebStorage.\n   */\n  toWebStorageJSON(): string {\n    const data: ClientStateSchema = {\n      activeTargetIds: this.activeTargetIds.toArray(),\n      updateTimeMs: Date.now() // Modify the existing value to trigger update.\n    };\n    return JSON.stringify(data);\n  }\n}\n\n/**\n * `WebStorageSharedClientState` uses WebStorage (window.localStorage) as the\n * backing store for the SharedClientState. It keeps track of all active\n * clients and supports modifications of the local client's data.\n */\nexport class WebStorageSharedClientState implements SharedClientState {\n  syncEngine: SharedClientStateSyncer | null = null;\n  onlineStateHandler: ((onlineState: OnlineState) => void) | null = null;\n  sequenceNumberHandler:\n    | ((sequenceNumber: ListenSequenceNumber) => void)\n    | null = null;\n\n  private readonly storage: Storage;\n  private readonly localClientStorageKey: string;\n  private readonly sequenceNumberKey: string;\n  private readonly storageListener = this.handleWebStorageEvent.bind(this);\n  private readonly onlineStateKey: string;\n  private readonly clientStateKeyRe: RegExp;\n  private readonly mutationBatchKeyRe: RegExp;\n  private readonly queryTargetKeyRe: RegExp;\n  private activeClients = new SortedMap<string, ClientState>(\n    primitiveComparator\n  );\n  private started = false;\n  private currentUser: User;\n\n  /**\n   * Captures WebStorage events that occur before `start()` is called. These\n   * events are replayed once `WebStorageSharedClientState` is started.\n   */\n  private earlyEvents: StorageEvent[] = [];\n\n  constructor(\n    private readonly queue: AsyncQueue,\n    private readonly platform: Platform,\n    private readonly persistenceKey: string,\n    private readonly localClientId: ClientId,\n    initialUser: User\n  ) {\n    if (!WebStorageSharedClientState.isAvailable(this.platform)) {\n      throw new FirestoreError(\n        Code.UNIMPLEMENTED,\n        'LocalStorage is not available on this platform.'\n      );\n    }\n    // Escape the special characters mentioned here:\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions\n    const escapedPersistenceKey = persistenceKey.replace(\n      /[.*+?^${}()|[\\]\\\\]/g,\n      '\\\\$&'\n    );\n\n    this.storage = this.platform.window!.localStorage;\n    this.currentUser = initialUser;\n    this.localClientStorageKey = createWebStorageClientStateKey(\n      this.persistenceKey,\n      this.localClientId\n    );\n    this.sequenceNumberKey = createWebStorageSequenceNumberKey(\n      this.persistenceKey\n    );\n    this.activeClients = this.activeClients.insert(\n      this.localClientId,\n      new LocalClientState()\n    );\n\n    this.clientStateKeyRe = new RegExp(\n      `^${CLIENT_STATE_KEY_PREFIX}_${escapedPersistenceKey}_([^_]*)$`\n    );\n    this.mutationBatchKeyRe = new RegExp(\n      `^${MUTATION_BATCH_KEY_PREFIX}_${escapedPersistenceKey}_(\\\\d+)(?:_(.*))?$`\n    );\n    this.queryTargetKeyRe = new RegExp(\n      `^${QUERY_TARGET_KEY_PREFIX}_${escapedPersistenceKey}_(\\\\d+)$`\n    );\n\n    this.onlineStateKey = createWebStorageOnlineStateKey(this.persistenceKey);\n\n    // Rather than adding the storage observer during start(), we add the\n    // storage observer during initialization. This ensures that we collect\n    // events before other components populate their initial state (during their\n    // respective start() calls). Otherwise, we might for example miss a\n    // mutation that is added after LocalStore's start() processed the existing\n    // mutations but before we observe WebStorage events.\n    this.platform.window!.addEventListener('storage', this.storageListener);\n  }\n\n  /** Returns 'true' if WebStorage is available in the current environment. */\n  static isAvailable(platform: Platform): boolean {\n    return !!(platform.window && platform.window.localStorage != null);\n  }\n\n  async start(): Promise<void> {\n    debugAssert(!this.started, 'WebStorageSharedClientState already started');\n    debugAssert(\n      this.syncEngine !== null,\n      'syncEngine property must be set before calling start()'\n    );\n    debugAssert(\n      this.onlineStateHandler !== null,\n      'onlineStateHandler property must be set before calling start()'\n    );\n\n    // Retrieve the list of existing clients to backfill the data in\n    // SharedClientState.\n    const existingClients = await this.syncEngine!.getActiveClients();\n\n    for (const clientId of existingClients) {\n      if (clientId === this.localClientId) {\n        continue;\n      }\n\n      const storageItem = this.getItem(\n        createWebStorageClientStateKey(this.persistenceKey, clientId)\n      );\n      if (storageItem) {\n        const clientState = RemoteClientState.fromWebStorageEntry(\n          clientId,\n          storageItem\n        );\n        if (clientState) {\n          this.activeClients = this.activeClients.insert(\n            clientState.clientId,\n            clientState\n          );\n        }\n      }\n    }\n\n    this.persistClientState();\n\n    // Check if there is an existing online state and call the callback handler\n    // if applicable.\n    const onlineStateJSON = this.storage.getItem(this.onlineStateKey);\n    if (onlineStateJSON) {\n      const onlineState = this.fromWebStorageOnlineState(onlineStateJSON);\n      if (onlineState) {\n        this.handleOnlineStateEvent(onlineState);\n      }\n    }\n\n    for (const event of this.earlyEvents) {\n      this.handleWebStorageEvent(event);\n    }\n\n    this.earlyEvents = [];\n\n    // Register a window unload hook to remove the client metadata entry from\n    // WebStorage even if `shutdown()` was not called.\n    this.platform.window!.addEventListener('unload', () => this.shutdown());\n\n    this.started = true;\n  }\n\n  writeSequenceNumber(sequenceNumber: ListenSequenceNumber): void {\n    this.setItem(this.sequenceNumberKey, JSON.stringify(sequenceNumber));\n  }\n\n  getAllActiveQueryTargets(): TargetIdSet {\n    return this.extractActiveQueryTargets(this.activeClients);\n  }\n\n  isActiveQueryTarget(targetId: TargetId): boolean {\n    let found = false;\n    this.activeClients.forEach((key, value) => {\n      if (value.activeTargetIds.has(targetId)) {\n        found = true;\n      }\n    });\n    return found;\n  }\n\n  addPendingMutation(batchId: BatchId): void {\n    this.persistMutationState(batchId, 'pending');\n  }\n\n  updateMutationState(\n    batchId: BatchId,\n    state: 'acknowledged' | 'rejected',\n    error?: FirestoreError\n  ): void {\n    this.persistMutationState(batchId, state, error);\n\n    // Once a final mutation result is observed by other clients, they no longer\n    // access the mutation's metadata entry. Since WebStorage replays events\n    // in order, it is safe to delete the entry right after updating it.\n    this.removeMutationState(batchId);\n  }\n\n  addLocalQueryTarget(targetId: TargetId): QueryTargetState {\n    let queryState: QueryTargetState = 'not-current';\n\n    // Lookup an existing query state if the target ID was already registered\n    // by another tab\n    if (this.isActiveQueryTarget(targetId)) {\n      const storageItem = this.storage.getItem(\n        createWebStorageQueryTargetMetadataKey(this.persistenceKey, targetId)\n      );\n\n      if (storageItem) {\n        const metadata = QueryTargetMetadata.fromWebStorageEntry(\n          targetId,\n          storageItem\n        );\n        if (metadata) {\n          queryState = metadata.state;\n        }\n      }\n    }\n\n    this.localClientState.addQueryTarget(targetId);\n    this.persistClientState();\n\n    return queryState;\n  }\n\n  removeLocalQueryTarget(targetId: TargetId): void {\n    this.localClientState.removeQueryTarget(targetId);\n    this.persistClientState();\n  }\n\n  isLocalQueryTarget(targetId: TargetId): boolean {\n    return this.localClientState.activeTargetIds.has(targetId);\n  }\n\n  clearQueryState(targetId: TargetId): void {\n    this.removeItem(\n      createWebStorageQueryTargetMetadataKey(this.persistenceKey, targetId)\n    );\n  }\n\n  updateQueryState(\n    targetId: TargetId,\n    state: QueryTargetState,\n    error?: FirestoreError\n  ): void {\n    this.persistQueryTargetState(targetId, state, error);\n  }\n\n  handleUserChange(\n    user: User,\n    removedBatchIds: BatchId[],\n    addedBatchIds: BatchId[]\n  ): void {\n    removedBatchIds.forEach(batchId => {\n      this.removeMutationState(batchId);\n    });\n    this.currentUser = user;\n    addedBatchIds.forEach(batchId => {\n      this.addPendingMutation(batchId);\n    });\n  }\n\n  setOnlineState(onlineState: OnlineState): void {\n    this.persistOnlineState(onlineState);\n  }\n\n  shutdown(): void {\n    if (this.started) {\n      this.platform.window!.removeEventListener(\n        'storage',\n        this.storageListener\n      );\n      this.removeItem(this.localClientStorageKey);\n      this.started = false;\n    }\n  }\n\n  private getItem(key: string): string | null {\n    const value = this.storage.getItem(key);\n    logDebug(LOG_TAG, 'READ', key, value);\n    return value;\n  }\n\n  private setItem(key: string, value: string): void {\n    logDebug(LOG_TAG, 'SET', key, value);\n    this.storage.setItem(key, value);\n  }\n\n  private removeItem(key: string): void {\n    logDebug(LOG_TAG, 'REMOVE', key);\n    this.storage.removeItem(key);\n  }\n\n  private handleWebStorageEvent(event: StorageEvent): void {\n    if (event.storageArea === this.storage) {\n      logDebug(LOG_TAG, 'EVENT', event.key, event.newValue);\n\n      if (event.key === this.localClientStorageKey) {\n        logError(\n          'Received WebStorage notification for local change. Another client might have ' +\n            'garbage-collected our state'\n        );\n        return;\n      }\n\n      this.queue.enqueueRetryable(async () => {\n        if (!this.started) {\n          this.earlyEvents.push(event);\n          return;\n        }\n\n        if (event.key === null) {\n          return;\n        }\n\n        if (this.clientStateKeyRe.test(event.key)) {\n          if (event.newValue != null) {\n            const clientState = this.fromWebStorageClientState(\n              event.key,\n              event.newValue\n            );\n            if (clientState) {\n              return this.handleClientStateEvent(\n                clientState.clientId,\n                clientState\n              );\n            }\n          } else {\n            const clientId = this.fromWebStorageClientStateKey(event.key)!;\n            return this.handleClientStateEvent(clientId, null);\n          }\n        } else if (this.mutationBatchKeyRe.test(event.key)) {\n          if (event.newValue !== null) {\n            const mutationMetadata = this.fromWebStorageMutationMetadata(\n              event.key,\n              event.newValue\n            );\n            if (mutationMetadata) {\n              return this.handleMutationBatchEvent(mutationMetadata);\n            }\n          }\n        } else if (this.queryTargetKeyRe.test(event.key)) {\n          if (event.newValue !== null) {\n            const queryTargetMetadata = this.fromWebStorageQueryTargetMetadata(\n              event.key,\n              event.newValue\n            );\n            if (queryTargetMetadata) {\n              return this.handleQueryTargetEvent(queryTargetMetadata);\n            }\n          }\n        } else if (event.key === this.onlineStateKey) {\n          if (event.newValue !== null) {\n            const onlineState = this.fromWebStorageOnlineState(event.newValue);\n            if (onlineState) {\n              return this.handleOnlineStateEvent(onlineState);\n            }\n          }\n        } else if (event.key === this.sequenceNumberKey) {\n          debugAssert(\n            !!this.sequenceNumberHandler,\n            'Missing sequenceNumberHandler'\n          );\n          const sequenceNumber = fromWebStorageSequenceNumber(event.newValue);\n          if (sequenceNumber !== ListenSequence.INVALID) {\n            this.sequenceNumberHandler!(sequenceNumber);\n          }\n        }\n      });\n    }\n  }\n\n  private get localClientState(): LocalClientState {\n    return this.activeClients.get(this.localClientId) as LocalClientState;\n  }\n\n  private persistClientState(): void {\n    this.setItem(\n      this.localClientStorageKey,\n      this.localClientState.toWebStorageJSON()\n    );\n  }\n\n  private persistMutationState(\n    batchId: BatchId,\n    state: MutationBatchState,\n    error?: FirestoreError\n  ): void {\n    const mutationState = new MutationMetadata(\n      this.currentUser,\n      batchId,\n      state,\n      error\n    );\n    const mutationKey = createWebStorageMutationBatchKey(\n      this.persistenceKey,\n      this.currentUser,\n      batchId\n    );\n    this.setItem(mutationKey, mutationState.toWebStorageJSON());\n  }\n\n  private removeMutationState(batchId: BatchId): void {\n    const mutationKey = createWebStorageMutationBatchKey(\n      this.persistenceKey,\n      this.currentUser,\n      batchId\n    );\n    this.removeItem(mutationKey);\n  }\n\n  private persistOnlineState(onlineState: OnlineState): void {\n    const entry: SharedOnlineStateSchema = {\n      clientId: this.localClientId,\n      onlineState\n    };\n    this.storage.setItem(this.onlineStateKey, JSON.stringify(entry));\n  }\n\n  private persistQueryTargetState(\n    targetId: TargetId,\n    state: QueryTargetState,\n    error?: FirestoreError\n  ): void {\n    const targetKey = createWebStorageQueryTargetMetadataKey(\n      this.persistenceKey,\n      targetId\n    );\n    const targetMetadata = new QueryTargetMetadata(targetId, state, error);\n    this.setItem(targetKey, targetMetadata.toWebStorageJSON());\n  }\n\n  /**\n   * Parses a client state key in WebStorage. Returns null if the key does not\n   * match the expected key format.\n   */\n  private fromWebStorageClientStateKey(key: string): ClientId | null {\n    const match = this.clientStateKeyRe.exec(key);\n    return match ? match[1] : null;\n  }\n\n  /**\n   * Parses a client state in WebStorage. Returns 'null' if the value could not\n   * be parsed.\n   */\n  private fromWebStorageClientState(\n    key: string,\n    value: string\n  ): RemoteClientState | null {\n    const clientId = this.fromWebStorageClientStateKey(key);\n    debugAssert(clientId !== null, `Cannot parse client state key '${key}'`);\n    return RemoteClientState.fromWebStorageEntry(clientId, value);\n  }\n\n  /**\n   * Parses a mutation batch state in WebStorage. Returns 'null' if the value\n   * could not be parsed.\n   */\n  private fromWebStorageMutationMetadata(\n    key: string,\n    value: string\n  ): MutationMetadata | null {\n    const match = this.mutationBatchKeyRe.exec(key);\n    debugAssert(match !== null, `Cannot parse mutation batch key '${key}'`);\n\n    const batchId = Number(match[1]);\n    const userId = match[2] !== undefined ? match[2] : null;\n    return MutationMetadata.fromWebStorageEntry(\n      new User(userId),\n      batchId,\n      value\n    );\n  }\n\n  /**\n   * Parses a query target state from WebStorage. Returns 'null' if the value\n   * could not be parsed.\n   */\n  private fromWebStorageQueryTargetMetadata(\n    key: string,\n    value: string\n  ): QueryTargetMetadata | null {\n    const match = this.queryTargetKeyRe.exec(key);\n    debugAssert(match !== null, `Cannot parse query target key '${key}'`);\n\n    const targetId = Number(match[1]);\n    return QueryTargetMetadata.fromWebStorageEntry(targetId, value);\n  }\n\n  /**\n   * Parses an online state from WebStorage. Returns 'null' if the value\n   * could not be parsed.\n   */\n  private fromWebStorageOnlineState(value: string): SharedOnlineState | null {\n    return SharedOnlineState.fromWebStorageEntry(value);\n  }\n\n  private async handleMutationBatchEvent(\n    mutationBatch: MutationMetadata\n  ): Promise<void> {\n    if (mutationBatch.user.uid !== this.currentUser.uid) {\n      logDebug(\n        LOG_TAG,\n        `Ignoring mutation for non-active user ${mutationBatch.user.uid}`\n      );\n      return;\n    }\n\n    return this.syncEngine!.applyBatchState(\n      mutationBatch.batchId,\n      mutationBatch.state,\n      mutationBatch.error\n    );\n  }\n\n  private handleQueryTargetEvent(\n    targetMetadata: QueryTargetMetadata\n  ): Promise<void> {\n    return this.syncEngine!.applyTargetState(\n      targetMetadata.targetId,\n      targetMetadata.state,\n      targetMetadata.error\n    );\n  }\n\n  private handleClientStateEvent(\n    clientId: ClientId,\n    clientState: RemoteClientState | null\n  ): Promise<void> {\n    const updatedClients = clientState\n      ? this.activeClients.insert(clientId, clientState)\n      : this.activeClients.remove(clientId);\n\n    const existingTargets = this.extractActiveQueryTargets(this.activeClients);\n    const newTargets = this.extractActiveQueryTargets(updatedClients);\n\n    const addedTargets: TargetId[] = [];\n    const removedTargets: TargetId[] = [];\n\n    newTargets.forEach(targetId => {\n      if (!existingTargets.has(targetId)) {\n        addedTargets.push(targetId);\n      }\n    });\n\n    existingTargets.forEach(targetId => {\n      if (!newTargets.has(targetId)) {\n        removedTargets.push(targetId);\n      }\n    });\n\n    return this.syncEngine!.applyActiveTargetsChange(\n      addedTargets,\n      removedTargets\n    ).then(() => {\n      this.activeClients = updatedClients;\n    });\n  }\n\n  private handleOnlineStateEvent(onlineState: SharedOnlineState): void {\n    // We check whether the client that wrote this online state is still active\n    // by comparing its client ID to the list of clients kept active in\n    // IndexedDb. If a client does not update their IndexedDb client state\n    // within 5 seconds, it is considered inactive and we don't emit an online\n    // state event.\n    if (this.activeClients.get(onlineState.clientId)) {\n      this.onlineStateHandler!(onlineState.onlineState);\n    }\n  }\n\n  private extractActiveQueryTargets(\n    clients: SortedMap<string, ClientState>\n  ): SortedSet<TargetId> {\n    let activeTargets = targetIdSet();\n    clients.forEach((kev, value) => {\n      activeTargets = activeTargets.unionWith(value.activeTargetIds);\n    });\n    return activeTargets;\n  }\n}\n\nfunction fromWebStorageSequenceNumber(\n  seqString: string | null\n): ListenSequenceNumber {\n  let sequenceNumber = ListenSequence.INVALID;\n  if (seqString != null) {\n    try {\n      const parsed = JSON.parse(seqString);\n      hardAssert(\n        typeof parsed === 'number',\n        'Found non-numeric sequence number'\n      );\n      sequenceNumber = parsed;\n    } catch (e) {\n      logError(LOG_TAG, 'Failed to read sequence number from WebStorage', e);\n    }\n  }\n  return sequenceNumber;\n}\n\n/**\n * `MemorySharedClientState` is a simple implementation of SharedClientState for\n * clients using memory persistence. The state in this class remains fully\n * isolated and no synchronization is performed.\n */\nexport class MemorySharedClientState implements SharedClientState {\n  private localState = new LocalClientState();\n  private queryState: { [targetId: number]: QueryTargetState } = {};\n\n  syncEngine: SharedClientStateSyncer | null = null;\n  onlineStateHandler: ((onlineState: OnlineState) => void) | null = null;\n  sequenceNumberHandler:\n    | ((sequenceNumber: ListenSequenceNumber) => void)\n    | null = null;\n\n  addPendingMutation(batchId: BatchId): void {\n    // No op.\n  }\n\n  updateMutationState(\n    batchId: BatchId,\n    state: 'acknowledged' | 'rejected',\n    error?: FirestoreError\n  ): void {\n    // No op.\n  }\n\n  addLocalQueryTarget(targetId: TargetId): QueryTargetState {\n    this.localState.addQueryTarget(targetId);\n    return this.queryState[targetId] || 'not-current';\n  }\n\n  updateQueryState(\n    targetId: TargetId,\n    state: QueryTargetState,\n    error?: FirestoreError\n  ): void {\n    this.queryState[targetId] = state;\n  }\n\n  removeLocalQueryTarget(targetId: TargetId): void {\n    this.localState.removeQueryTarget(targetId);\n  }\n\n  isLocalQueryTarget(targetId: TargetId): boolean {\n    return this.localState.activeTargetIds.has(targetId);\n  }\n\n  clearQueryState(targetId: TargetId): void {\n    delete this.queryState[targetId];\n  }\n\n  getAllActiveQueryTargets(): TargetIdSet {\n    return this.localState.activeTargetIds;\n  }\n\n  isActiveQueryTarget(targetId: TargetId): boolean {\n    return this.localState.activeTargetIds.has(targetId);\n  }\n\n  start(): Promise<void> {\n    this.localState = new LocalClientState();\n    return Promise.resolve();\n  }\n\n  handleUserChange(\n    user: User,\n    removedBatchIds: BatchId[],\n    addedBatchIds: BatchId[]\n  ): void {\n    // No op.\n  }\n\n  setOnlineState(onlineState: OnlineState): void {\n    // No op.\n  }\n\n  shutdown(): void {}\n\n  writeSequenceNumber(sequenceNumber: ListenSequenceNumber): void {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { QueryResult } from '../local/local_store';\nimport {\n  documentKeySet,\n  DocumentKeySet,\n  MaybeDocumentMap\n} from '../model/collections';\nimport { Document, MaybeDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { DocumentSet } from '../model/document_set';\nimport { TargetChange } from '../remote/remote_event';\nimport { debugAssert, fail } from '../util/assert';\n\nimport { Query } from './query';\nimport { OnlineState } from './types';\nimport {\n  ChangeType,\n  DocumentChangeSet,\n  SyncState,\n  ViewSnapshot\n} from './view_snapshot';\n\nexport type LimboDocumentChange = AddedLimboDocument | RemovedLimboDocument;\nexport class AddedLimboDocument {\n  constructor(public key: DocumentKey) {}\n}\nexport class RemovedLimboDocument {\n  constructor(public key: DocumentKey) {}\n}\n\n/** The result of applying a set of doc changes to a view. */\nexport interface ViewDocumentChanges {\n  /** The new set of docs that should be in the view. */\n  documentSet: DocumentSet;\n  /** The diff of these docs with the previous set of docs. */\n  changeSet: DocumentChangeSet;\n  /**\n   * Whether the set of documents passed in was not sufficient to calculate the\n   * new state of the view and there needs to be another pass based on the\n   * local cache.\n   */\n  needsRefill: boolean;\n\n  mutatedKeys: DocumentKeySet;\n}\n\nexport interface ViewChange {\n  snapshot?: ViewSnapshot;\n  limboChanges: LimboDocumentChange[];\n}\n\n/**\n * View is responsible for computing the final merged truth of what docs are in\n * a query. It gets notified of local and remote changes to docs, and applies\n * the query filters and limits to determine the most correct possible results.\n */\nexport class View {\n  private syncState: SyncState | null = null;\n  /**\n   * A flag whether the view is current with the backend. A view is considered\n   * current after it has seen the current flag from the backend and did not\n   * lose consistency within the watch stream (e.g. because of an existence\n   * filter mismatch).\n   */\n  private current = false;\n  private documentSet: DocumentSet;\n  /** Documents in the view but not in the remote target */\n  private limboDocuments = documentKeySet();\n  /** Document Keys that have local changes */\n  private mutatedKeys = documentKeySet();\n\n  constructor(\n    private query: Query,\n    /** Documents included in the remote target */\n    private _syncedDocuments: DocumentKeySet\n  ) {\n    this.documentSet = new DocumentSet(query.docComparator.bind(query));\n  }\n\n  /**\n   * The set of remote documents that the server has told us belongs to the target associated with\n   * this view.\n   */\n  get syncedDocuments(): DocumentKeySet {\n    return this._syncedDocuments;\n  }\n\n  /**\n   * Iterates over a set of doc changes, applies the query limit, and computes\n   * what the new results should be, what the changes were, and whether we may\n   * need to go back to the local cache for more results. Does not make any\n   * changes to the view.\n   * @param docChanges The doc changes to apply to this view.\n   * @param previousChanges If this is being called with a refill, then start\n   *        with this set of docs and changes instead of the current view.\n   * @return a new set of docs, changes, and refill flag.\n   */\n  computeDocChanges(\n    docChanges: MaybeDocumentMap,\n    previousChanges?: ViewDocumentChanges\n  ): ViewDocumentChanges {\n    const changeSet = previousChanges\n      ? previousChanges.changeSet\n      : new DocumentChangeSet();\n    const oldDocumentSet = previousChanges\n      ? previousChanges.documentSet\n      : this.documentSet;\n    let newMutatedKeys = previousChanges\n      ? previousChanges.mutatedKeys\n      : this.mutatedKeys;\n    let newDocumentSet = oldDocumentSet;\n    let needsRefill = false;\n\n    // Track the last doc in a (full) limit. This is necessary, because some\n    // update (a delete, or an update moving a doc past the old limit) might\n    // mean there is some other document in the local cache that either should\n    // come (1) between the old last limit doc and the new last document, in the\n    // case of updates, or (2) after the new last document, in the case of\n    // deletes. So we keep this doc at the old limit to compare the updates to.\n    //\n    // Note that this should never get used in a refill (when previousChanges is\n    // set), because there will only be adds -- no deletes or updates.\n    const lastDocInLimit =\n      this.query.hasLimitToFirst() && oldDocumentSet.size === this.query.limit\n        ? oldDocumentSet.last()\n        : null;\n    const firstDocInLimit =\n      this.query.hasLimitToLast() && oldDocumentSet.size === this.query.limit\n        ? oldDocumentSet.first()\n        : null;\n\n    docChanges.inorderTraversal(\n      (key: DocumentKey, newMaybeDoc: MaybeDocument) => {\n        const oldDoc = oldDocumentSet.get(key);\n        let newDoc = newMaybeDoc instanceof Document ? newMaybeDoc : null;\n        if (newDoc) {\n          debugAssert(\n            key.isEqual(newDoc.key),\n            'Mismatching keys found in document changes: ' +\n              key +\n              ' != ' +\n              newDoc.key\n          );\n          newDoc = this.query.matches(newDoc) ? newDoc : null;\n        }\n\n        const oldDocHadPendingMutations = oldDoc\n          ? this.mutatedKeys.has(oldDoc.key)\n          : false;\n        const newDocHasPendingMutations = newDoc\n          ? newDoc.hasLocalMutations ||\n            // We only consider committed mutations for documents that were\n            // mutated during the lifetime of the view.\n            (this.mutatedKeys.has(newDoc.key) && newDoc.hasCommittedMutations)\n          : false;\n\n        let changeApplied = false;\n\n        // Calculate change\n        if (oldDoc && newDoc) {\n          const docsEqual = oldDoc.data().isEqual(newDoc.data());\n          if (!docsEqual) {\n            if (!this.shouldWaitForSyncedDocument(oldDoc, newDoc)) {\n              changeSet.track({\n                type: ChangeType.Modified,\n                doc: newDoc\n              });\n              changeApplied = true;\n\n              if (\n                (lastDocInLimit &&\n                  this.query.docComparator(newDoc, lastDocInLimit) > 0) ||\n                (firstDocInLimit &&\n                  this.query.docComparator(newDoc, firstDocInLimit) < 0)\n              ) {\n                // This doc moved from inside the limit to outside the limit.\n                // That means there may be some other doc in the local cache\n                // that should be included instead.\n                needsRefill = true;\n              }\n            }\n          } else if (oldDocHadPendingMutations !== newDocHasPendingMutations) {\n            changeSet.track({ type: ChangeType.Metadata, doc: newDoc });\n            changeApplied = true;\n          }\n        } else if (!oldDoc && newDoc) {\n          changeSet.track({ type: ChangeType.Added, doc: newDoc });\n          changeApplied = true;\n        } else if (oldDoc && !newDoc) {\n          changeSet.track({ type: ChangeType.Removed, doc: oldDoc });\n          changeApplied = true;\n\n          if (lastDocInLimit || firstDocInLimit) {\n            // A doc was removed from a full limit query. We'll need to\n            // requery from the local cache to see if we know about some other\n            // doc that should be in the results.\n            needsRefill = true;\n          }\n        }\n\n        if (changeApplied) {\n          if (newDoc) {\n            newDocumentSet = newDocumentSet.add(newDoc);\n            if (newDocHasPendingMutations) {\n              newMutatedKeys = newMutatedKeys.add(key);\n            } else {\n              newMutatedKeys = newMutatedKeys.delete(key);\n            }\n          } else {\n            newDocumentSet = newDocumentSet.delete(key);\n            newMutatedKeys = newMutatedKeys.delete(key);\n          }\n        }\n      }\n    );\n\n    // Drop documents out to meet limit/limitToLast requirement.\n    if (this.query.hasLimitToFirst() || this.query.hasLimitToLast()) {\n      while (newDocumentSet.size > this.query.limit!) {\n        const oldDoc = this.query.hasLimitToFirst()\n          ? newDocumentSet.last()\n          : newDocumentSet.first();\n        newDocumentSet = newDocumentSet.delete(oldDoc!.key);\n        newMutatedKeys = newMutatedKeys.delete(oldDoc!.key);\n        changeSet.track({ type: ChangeType.Removed, doc: oldDoc! });\n      }\n    }\n\n    debugAssert(\n      !needsRefill || !previousChanges,\n      'View was refilled using docs that themselves needed refilling.'\n    );\n    return {\n      documentSet: newDocumentSet,\n      changeSet,\n      needsRefill,\n      mutatedKeys: newMutatedKeys\n    };\n  }\n\n  private shouldWaitForSyncedDocument(\n    oldDoc: Document,\n    newDoc: Document\n  ): boolean {\n    // We suppress the initial change event for documents that were modified as\n    // part of a write acknowledgment (e.g. when the value of a server transform\n    // is applied) as Watch will send us the same document again.\n    // By suppressing the event, we only raise two user visible events (one with\n    // `hasPendingWrites` and the final state of the document) instead of three\n    // (one with `hasPendingWrites`, the modified document with\n    // `hasPendingWrites` and the final state of the document).\n    return (\n      oldDoc.hasLocalMutations &&\n      newDoc.hasCommittedMutations &&\n      !newDoc.hasLocalMutations\n    );\n  }\n\n  /**\n   * Updates the view with the given ViewDocumentChanges and optionally updates\n   * limbo docs and sync state from the provided target change.\n   * @param docChanges The set of changes to make to the view's docs.\n   * @param updateLimboDocuments Whether to update limbo documents based on this\n   *        change.\n   * @param targetChange A target change to apply for computing limbo docs and\n   *        sync state.\n   * @return A new ViewChange with the given docs, changes, and sync state.\n   */\n  // PORTING NOTE: The iOS/Android clients always compute limbo document changes.\n  applyChanges(\n    docChanges: ViewDocumentChanges,\n    updateLimboDocuments: boolean,\n    targetChange?: TargetChange\n  ): ViewChange {\n    debugAssert(\n      !docChanges.needsRefill,\n      'Cannot apply changes that need a refill'\n    );\n    const oldDocs = this.documentSet;\n    this.documentSet = docChanges.documentSet;\n    this.mutatedKeys = docChanges.mutatedKeys;\n    // Sort changes based on type and query comparator\n    const changes = docChanges.changeSet.getChanges();\n    changes.sort((c1, c2) => {\n      return (\n        compareChangeType(c1.type, c2.type) ||\n        this.query.docComparator(c1.doc, c2.doc)\n      );\n    });\n\n    this.applyTargetChange(targetChange);\n    const limboChanges = updateLimboDocuments\n      ? this.updateLimboDocuments()\n      : [];\n    const synced = this.limboDocuments.size === 0 && this.current;\n    const newSyncState = synced ? SyncState.Synced : SyncState.Local;\n    const syncStateChanged = newSyncState !== this.syncState;\n    this.syncState = newSyncState;\n\n    if (changes.length === 0 && !syncStateChanged) {\n      // no changes\n      return { limboChanges };\n    } else {\n      const snap: ViewSnapshot = new ViewSnapshot(\n        this.query,\n        docChanges.documentSet,\n        oldDocs,\n        changes,\n        docChanges.mutatedKeys,\n        newSyncState === SyncState.Local,\n        syncStateChanged,\n        /* excludesMetadataChanges= */ false\n      );\n      return {\n        snapshot: snap,\n        limboChanges\n      };\n    }\n  }\n\n  /**\n   * Applies an OnlineState change to the view, potentially generating a\n   * ViewChange if the view's syncState changes as a result.\n   */\n  applyOnlineStateChange(onlineState: OnlineState): ViewChange {\n    if (this.current && onlineState === OnlineState.Offline) {\n      // If we're offline, set `current` to false and then call applyChanges()\n      // to refresh our syncState and generate a ViewChange as appropriate. We\n      // are guaranteed to get a new TargetChange that sets `current` back to\n      // true once the client is back online.\n      this.current = false;\n      return this.applyChanges(\n        {\n          documentSet: this.documentSet,\n          changeSet: new DocumentChangeSet(),\n          mutatedKeys: this.mutatedKeys,\n          needsRefill: false\n        },\n        /* updateLimboDocuments= */ false\n      );\n    } else {\n      // No effect, just return a no-op ViewChange.\n      return { limboChanges: [] };\n    }\n  }\n\n  /**\n   * Returns whether the doc for the given key should be in limbo.\n   */\n  private shouldBeInLimbo(key: DocumentKey): boolean {\n    // If the remote end says it's part of this query, it's not in limbo.\n    if (this._syncedDocuments.has(key)) {\n      return false;\n    }\n    // The local store doesn't think it's a result, so it shouldn't be in limbo.\n    if (!this.documentSet.has(key)) {\n      return false;\n    }\n    // If there are local changes to the doc, they might explain why the server\n    // doesn't know that it's part of the query. So don't put it in limbo.\n    // TODO(klimt): Ideally, we would only consider changes that might actually\n    // affect this specific query.\n    if (this.documentSet.get(key)!.hasLocalMutations) {\n      return false;\n    }\n    // Everything else is in limbo.\n    return true;\n  }\n\n  /**\n   * Updates syncedDocuments, current, and limbo docs based on the given change.\n   * Returns the list of changes to which docs are in limbo.\n   */\n  private applyTargetChange(targetChange?: TargetChange): void {\n    if (targetChange) {\n      targetChange.addedDocuments.forEach(\n        key => (this._syncedDocuments = this._syncedDocuments.add(key))\n      );\n      targetChange.modifiedDocuments.forEach(key => {\n        debugAssert(\n          this._syncedDocuments.has(key),\n          `Modified document ${key} not found in view.`\n        );\n      });\n      targetChange.removedDocuments.forEach(\n        key => (this._syncedDocuments = this._syncedDocuments.delete(key))\n      );\n      this.current = targetChange.current;\n    }\n  }\n\n  private updateLimboDocuments(): LimboDocumentChange[] {\n    // We can only determine limbo documents when we're in-sync with the server.\n    if (!this.current) {\n      return [];\n    }\n\n    // TODO(klimt): Do this incrementally so that it's not quadratic when\n    // updating many documents.\n    const oldLimboDocuments = this.limboDocuments;\n    this.limboDocuments = documentKeySet();\n    this.documentSet.forEach(doc => {\n      if (this.shouldBeInLimbo(doc.key)) {\n        this.limboDocuments = this.limboDocuments.add(doc.key);\n      }\n    });\n\n    // Diff the new limbo docs with the old limbo docs.\n    const changes: LimboDocumentChange[] = [];\n    oldLimboDocuments.forEach(key => {\n      if (!this.limboDocuments.has(key)) {\n        changes.push(new RemovedLimboDocument(key));\n      }\n    });\n    this.limboDocuments.forEach(key => {\n      if (!oldLimboDocuments.has(key)) {\n        changes.push(new AddedLimboDocument(key));\n      }\n    });\n    return changes;\n  }\n\n  /**\n   * Update the in-memory state of the current view with the state read from\n   * persistence.\n   *\n   * We update the query view whenever a client's primary status changes:\n   * - When a client transitions from primary to secondary, it can miss\n   *   LocalStorage updates and its query views may temporarily not be\n   *   synchronized with the state on disk.\n   * - For secondary to primary transitions, the client needs to update the list\n   *   of `syncedDocuments` since secondary clients update their query views\n   *   based purely on synthesized RemoteEvents.\n   *\n   * @param queryResult.documents - The documents that match the query according\n   * to the LocalStore.\n   * @param queryResult.remoteKeys - The keys of the documents that match the\n   * query according to the backend.\n   *\n   * @return The ViewChange that resulted from this synchronization.\n   */\n  // PORTING NOTE: Multi-tab only.\n  synchronizeWithPersistedState(queryResult: QueryResult): ViewChange {\n    this._syncedDocuments = queryResult.remoteKeys;\n    this.limboDocuments = documentKeySet();\n    const docChanges = this.computeDocChanges(queryResult.documents);\n    return this.applyChanges(docChanges, /*updateLimboDocuments=*/ true);\n  }\n\n  /**\n   * Returns a view snapshot as if this query was just listened to. Contains\n   * a document add for every existing document and the `fromCache` and\n   * `hasPendingWrites` status of the already established view.\n   */\n  // PORTING NOTE: Multi-tab only.\n  computeInitialSnapshot(): ViewSnapshot {\n    return ViewSnapshot.fromInitialDocuments(\n      this.query,\n      this.documentSet,\n      this.mutatedKeys,\n      this.syncState === SyncState.Local\n    );\n  }\n}\n\nfunction compareChangeType(c1: ChangeType, c2: ChangeType): number {\n  const order = (change: ChangeType): 0 | 1 | 2 => {\n    switch (change) {\n      case ChangeType.Added:\n        return 1;\n      case ChangeType.Modified:\n        return 2;\n      case ChangeType.Metadata:\n        // A metadata change is converted to a modified change at the public\n        // api layer.  Since we sort by document key and then change type,\n        // metadata and modified changes must be sorted equivalently.\n        return 2;\n      case ChangeType.Removed:\n        return 0;\n      default:\n        return fail('Unknown ChangeType: ' + change);\n    }\n  };\n\n  return order(c1) - order(c2);\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Deferred } from '../util/promise';\nimport { TimerId, AsyncQueue } from '../util/async_queue';\nimport { ExponentialBackoff } from '../remote/backoff';\nimport { Transaction } from './transaction';\nimport { Datastore } from '../remote/datastore';\nimport { isNullOrUndefined } from '../util/types';\nimport { isPermanentError } from '../remote/rpc_error';\nimport { FirestoreError } from '../util/error';\n\nconst RETRY_COUNT = 5;\n\n/**\n * TransactionRunner encapsulates the logic needed to run and retry transactions\n * with backoff.\n */\nexport class TransactionRunner<T> {\n  private retries = RETRY_COUNT;\n  private backoff: ExponentialBackoff;\n\n  constructor(\n    private readonly asyncQueue: AsyncQueue,\n    private readonly datastore: Datastore,\n    private readonly updateFunction: (transaction: Transaction) => Promise<T>,\n    private readonly deferred: Deferred<T>\n  ) {\n    this.backoff = new ExponentialBackoff(\n      this.asyncQueue,\n      TimerId.TransactionRetry\n    );\n  }\n\n  /** Runs the transaction and sets the result on deferred. */\n  run(): void {\n    this.runWithBackOff();\n  }\n\n  private runWithBackOff(): void {\n    this.backoff.backoffAndRun(async () => {\n      const transaction = new Transaction(this.datastore);\n      const userPromise = this.tryRunUpdateFunction(transaction);\n      if (userPromise) {\n        userPromise\n          .then(result => {\n            this.asyncQueue.enqueueAndForget(() => {\n              return transaction\n                .commit()\n                .then(() => {\n                  this.deferred.resolve(result);\n                })\n                .catch(commitError => {\n                  this.handleTransactionError(commitError);\n                });\n            });\n          })\n          .catch(userPromiseError => {\n            this.handleTransactionError(userPromiseError);\n          });\n      }\n    });\n  }\n\n  private tryRunUpdateFunction(transaction: Transaction): Promise<T> | null {\n    try {\n      const userPromise = this.updateFunction(transaction);\n      if (\n        isNullOrUndefined(userPromise) ||\n        !userPromise.catch ||\n        !userPromise.then\n      ) {\n        this.deferred.reject(\n          Error('Transaction callback must return a Promise')\n        );\n        return null;\n      }\n      return userPromise;\n    } catch (error) {\n      // Do not retry errors thrown by user provided updateFunction.\n      this.deferred.reject(error);\n      return null;\n    }\n  }\n\n  private handleTransactionError(error: Error): void {\n    if (this.retries > 0 && this.isRetryableTransactionError(error)) {\n      this.retries -= 1;\n      this.asyncQueue.enqueueAndForget(() => {\n        this.runWithBackOff();\n        return Promise.resolve();\n      });\n    } else {\n      this.deferred.reject(error);\n    }\n  }\n\n  private isRetryableTransactionError(error: Error): boolean {\n    if (error.name === 'FirebaseError') {\n      // In transactions, the backend will fail outdated reads with FAILED_PRECONDITION and\n      // non-matching document versions with ABORTED. These errors should be retried.\n      const code = (error as FirestoreError).code;\n      return (\n        code === 'aborted' ||\n        code === 'failed-precondition' ||\n        !isPermanentError(code)\n      );\n    }\n    return false;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { User } from '../auth/user';\nimport {\n  ignoreIfPrimaryLeaseLoss,\n  LocalStore,\n  MultiTabLocalStore\n} from '../local/local_store';\nimport { LocalViewChanges } from '../local/local_view_changes';\nimport { ReferenceSet } from '../local/reference_set';\nimport { TargetData, TargetPurpose } from '../local/target_data';\nimport {\n  documentKeySet,\n  DocumentKeySet,\n  MaybeDocumentMap\n} from '../model/collections';\nimport { MaybeDocument, NoDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { Mutation } from '../model/mutation';\nimport { BATCHID_UNKNOWN, MutationBatchResult } from '../model/mutation_batch';\nimport { RemoteEvent, TargetChange } from '../remote/remote_event';\nimport { RemoteStore } from '../remote/remote_store';\nimport { RemoteSyncer } from '../remote/remote_syncer';\nimport { debugAssert, fail, hardAssert } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\nimport { logDebug } from '../util/log';\nimport { primitiveComparator } from '../util/misc';\nimport { ObjectMap } from '../util/obj_map';\nimport { Deferred } from '../util/promise';\nimport { SortedMap } from '../util/sorted_map';\n\nimport { ClientId, SharedClientState } from '../local/shared_client_state';\nimport {\n  QueryTargetState,\n  SharedClientStateSyncer\n} from '../local/shared_client_state_syncer';\nimport { SortedSet } from '../util/sorted_set';\nimport { ListenSequence } from './listen_sequence';\nimport { LimitType, Query } from './query';\nimport { SnapshotVersion } from './snapshot_version';\nimport { Target } from './target';\nimport { TargetIdGenerator } from './target_id_generator';\nimport { Transaction } from './transaction';\nimport {\n  BatchId,\n  MutationBatchState,\n  OnlineState,\n  OnlineStateSource,\n  TargetId\n} from './types';\nimport {\n  AddedLimboDocument,\n  LimboDocumentChange,\n  RemovedLimboDocument,\n  View,\n  ViewChange,\n  ViewDocumentChanges\n} from './view';\nimport { ViewSnapshot } from './view_snapshot';\nimport { AsyncQueue, wrapInUserErrorIfRecoverable } from '../util/async_queue';\nimport { TransactionRunner } from './transaction_runner';\nimport { Datastore } from '../remote/datastore';\n\nconst LOG_TAG = 'SyncEngine';\n\n/**\n * QueryView contains all of the data that SyncEngine needs to keep track of for\n * a particular query.\n */\nclass QueryView {\n  constructor(\n    /**\n     * The query itself.\n     */\n    public query: Query,\n    /**\n     * The target number created by the client that is used in the watch\n     * stream to identify this query.\n     */\n    public targetId: TargetId,\n    /**\n     * The view is responsible for computing the final merged truth of what\n     * docs are in the query. It gets notified of local and remote changes,\n     * and applies the query filters and limits to determine the most correct\n     * possible results.\n     */\n    public view: View\n  ) {}\n}\n\n/** Tracks a limbo resolution. */\nclass LimboResolution {\n  constructor(public key: DocumentKey) {}\n\n  /**\n   * Set to true once we've received a document. This is used in\n   * getRemoteKeysForTarget() and ultimately used by WatchChangeAggregator to\n   * decide whether it needs to manufacture a delete event for the target once\n   * the target is CURRENT.\n   */\n  receivedDocument: boolean = false;\n}\n\n/**\n * Interface implemented by EventManager to handle notifications from\n * SyncEngine.\n */\nexport interface SyncEngineListener {\n  /** Handles new view snapshots. */\n  onWatchChange(snapshots: ViewSnapshot[]): void;\n\n  /** Handles the failure of a query. */\n  onWatchError(query: Query, error: Error): void;\n\n  /** Handles a change in online state. */\n  onOnlineStateChange(onlineState: OnlineState): void;\n}\n\n/**\n * SyncEngine is the central controller in the client SDK architecture. It is\n * the glue code between the EventManager, LocalStore, and RemoteStore. Some of\n * SyncEngine's responsibilities include:\n * 1. Coordinating client requests and remote events between the EventManager\n *    and the local and remote data stores.\n * 2. Managing a View object for each query, providing the unified view between\n *    the local and remote data stores.\n * 3. Notifying the RemoteStore when the LocalStore has new mutations in its\n *    queue that need sending to the backend.\n *\n * The SyncEngine’s methods should only ever be called by methods running in the\n * global async queue.\n */\nexport class SyncEngine implements RemoteSyncer {\n  protected syncEngineListener: SyncEngineListener | null = null;\n\n  protected queryViewsByQuery = new ObjectMap<Query, QueryView>(q =>\n    q.canonicalId()\n  );\n  protected queriesByTarget = new Map<TargetId, Query[]>();\n  /**\n   * The keys of documents that are in limbo for which we haven't yet started a\n   * limbo resolution query.\n   */\n  private enqueuedLimboResolutions: DocumentKey[] = [];\n  /**\n   * Keeps track of the target ID for each document that is in limbo with an\n   * active target.\n   */\n  protected activeLimboTargetsByKey = new SortedMap<DocumentKey, TargetId>(\n    DocumentKey.comparator\n  );\n  /**\n   * Keeps track of the information about an active limbo resolution for each\n   * active target ID that was started for the purpose of limbo resolution.\n   */\n  protected activeLimboResolutionsByTarget = new Map<\n    TargetId,\n    LimboResolution\n  >();\n  protected limboDocumentRefs = new ReferenceSet();\n  /** Stores user completion handlers, indexed by User and BatchId. */\n  private mutationUserCallbacks = {} as {\n    [uidKey: string]: SortedMap<BatchId, Deferred<void>>;\n  };\n  /** Stores user callbacks waiting for all pending writes to be acknowledged. */\n  private pendingWritesCallbacks = new Map<BatchId, Array<Deferred<void>>>();\n  private limboTargetIdGenerator = TargetIdGenerator.forSyncEngine();\n\n  private onlineState = OnlineState.Unknown;\n\n  constructor(\n    protected localStore: LocalStore,\n    protected remoteStore: RemoteStore,\n    protected datastore: Datastore,\n    // PORTING NOTE: Manages state synchronization in multi-tab environments.\n    protected sharedClientState: SharedClientState,\n    private currentUser: User,\n    private maxConcurrentLimboResolutions: number\n  ) {}\n\n  get isPrimaryClient(): boolean {\n    return true;\n  }\n\n  /** Subscribes to SyncEngine notifications. Has to be called exactly once. */\n  subscribe(syncEngineListener: SyncEngineListener): void {\n    debugAssert(\n      syncEngineListener !== null,\n      'SyncEngine listener cannot be null'\n    );\n    debugAssert(\n      this.syncEngineListener === null,\n      'SyncEngine already has a subscriber.'\n    );\n\n    this.syncEngineListener = syncEngineListener;\n  }\n\n  /**\n   * Initiates the new listen, resolves promise when listen enqueued to the\n   * server. All the subsequent view snapshots or errors are sent to the\n   * subscribed handlers. Returns the initial snapshot.\n   */\n  async listen(query: Query): Promise<ViewSnapshot> {\n    this.assertSubscribed('listen()');\n\n    let targetId;\n    let viewSnapshot;\n\n    const queryView = this.queryViewsByQuery.get(query);\n    if (queryView) {\n      // PORTING NOTE: With Multi-Tab Web, it is possible that a query view\n      // already exists when EventManager calls us for the first time. This\n      // happens when the primary tab is already listening to this query on\n      // behalf of another tab and the user of the primary also starts listening\n      // to the query. EventManager will not have an assigned target ID in this\n      // case and calls `listen` to obtain this ID.\n      targetId = queryView.targetId;\n      this.sharedClientState.addLocalQueryTarget(targetId);\n      viewSnapshot = queryView.view.computeInitialSnapshot();\n    } else {\n      const targetData = await this.localStore.allocateTarget(query.toTarget());\n\n      const status = this.sharedClientState.addLocalQueryTarget(\n        targetData.targetId\n      );\n      targetId = targetData.targetId;\n      viewSnapshot = await this.initializeViewAndComputeSnapshot(\n        query,\n        targetId,\n        status === 'current'\n      );\n      if (this.isPrimaryClient) {\n        this.remoteStore.listen(targetData);\n      }\n    }\n\n    return viewSnapshot;\n  }\n\n  /**\n   * Registers a view for a previously unknown query and computes its initial\n   * snapshot.\n   */\n  protected async initializeViewAndComputeSnapshot(\n    query: Query,\n    targetId: TargetId,\n    current: boolean\n  ): Promise<ViewSnapshot> {\n    const queryResult = await this.localStore.executeQuery(\n      query,\n      /* usePreviousResults= */ true\n    );\n    const view = new View(query, queryResult.remoteKeys);\n    const viewDocChanges = view.computeDocChanges(queryResult.documents);\n    const synthesizedTargetChange = TargetChange.createSynthesizedTargetChangeForCurrentChange(\n      targetId,\n      current && this.onlineState !== OnlineState.Offline\n    );\n    const viewChange = view.applyChanges(\n      viewDocChanges,\n      /* updateLimboDocuments= */ this.isPrimaryClient,\n      synthesizedTargetChange\n    );\n    this.updateTrackedLimbos(targetId, viewChange.limboChanges);\n\n    debugAssert(\n      !!viewChange.snapshot,\n      'applyChanges for new view should always return a snapshot'\n    );\n\n    const data = new QueryView(query, targetId, view);\n    this.queryViewsByQuery.set(query, data);\n    if (this.queriesByTarget.has(targetId)) {\n      this.queriesByTarget.get(targetId)!.push(query);\n    } else {\n      this.queriesByTarget.set(targetId, [query]);\n    }\n    return viewChange.snapshot!;\n  }\n\n  /** Stops listening to the query. */\n  async unlisten(query: Query): Promise<void> {\n    this.assertSubscribed('unlisten()');\n\n    const queryView = this.queryViewsByQuery.get(query)!;\n    debugAssert(!!queryView, 'Trying to unlisten on query not found:' + query);\n\n    // Only clean up the query view and target if this is the only query mapped\n    // to the target.\n    const queries = this.queriesByTarget.get(queryView.targetId)!;\n    if (queries.length > 1) {\n      this.queriesByTarget.set(\n        queryView.targetId,\n        queries.filter(q => !q.isEqual(query))\n      );\n      this.queryViewsByQuery.delete(query);\n      return;\n    }\n\n    // No other queries are mapped to the target, clean up the query and the target.\n    if (this.isPrimaryClient) {\n      // We need to remove the local query target first to allow us to verify\n      // whether any other client is still interested in this target.\n      this.sharedClientState.removeLocalQueryTarget(queryView.targetId);\n      const targetRemainsActive = this.sharedClientState.isActiveQueryTarget(\n        queryView.targetId\n      );\n\n      if (!targetRemainsActive) {\n        await this.localStore\n          .releaseTarget(queryView.targetId, /*keepPersistedTargetData=*/ false)\n          .then(() => {\n            this.sharedClientState.clearQueryState(queryView.targetId);\n            this.remoteStore.unlisten(queryView.targetId);\n            this.removeAndCleanupTarget(queryView.targetId);\n          })\n          .catch(ignoreIfPrimaryLeaseLoss);\n      }\n    } else {\n      this.removeAndCleanupTarget(queryView.targetId);\n      await this.localStore.releaseTarget(\n        queryView.targetId,\n        /*keepPersistedTargetData=*/ true\n      );\n    }\n  }\n\n  /**\n   * Initiates the write of local mutation batch which involves adding the\n   * writes to the mutation queue, notifying the remote store about new\n   * mutations and raising events for any changes this write caused.\n   *\n   * The promise returned by this call is resolved when the above steps\n   * have completed, *not* when the write was acked by the backend. The\n   * userCallback is resolved once the write was acked/rejected by the\n   * backend (or failed locally for any other reason).\n   */\n  async write(batch: Mutation[], userCallback: Deferred<void>): Promise<void> {\n    this.assertSubscribed('write()');\n\n    try {\n      const result = await this.localStore.localWrite(batch);\n      this.sharedClientState.addPendingMutation(result.batchId);\n      this.addMutationCallback(result.batchId, userCallback);\n      await this.emitNewSnapsAndNotifyLocalStore(result.changes);\n      await this.remoteStore.fillWritePipeline();\n    } catch (e) {\n      // If we can't persist the mutation, we reject the user callback and\n      // don't send the mutation. The user can then retry the write.\n      const error = wrapInUserErrorIfRecoverable(e, `Failed to persist write`);\n      userCallback.reject(error);\n    }\n  }\n\n  /**\n   * Takes an updateFunction in which a set of reads and writes can be performed\n   * atomically. In the updateFunction, the client can read and write values\n   * using the supplied transaction object. After the updateFunction, all\n   * changes will be committed. If a retryable error occurs (ex: some other\n   * client has changed any of the data referenced), then the updateFunction\n   * will be called again after a backoff. If the updateFunction still fails\n   * after all retries, then the transaction will be rejected.\n   *\n   * The transaction object passed to the updateFunction contains methods for\n   * accessing documents and collections. Unlike other datastore access, data\n   * accessed with the transaction will not reflect local changes that have not\n   * been committed. For this reason, it is required that all reads are\n   * performed before any writes. Transactions must be performed while online.\n   *\n   * The Deferred input is resolved when the transaction is fully committed.\n   */\n  runTransaction<T>(\n    asyncQueue: AsyncQueue,\n    updateFunction: (transaction: Transaction) => Promise<T>,\n    deferred: Deferred<T>\n  ): void {\n    new TransactionRunner<T>(\n      asyncQueue,\n      this.datastore,\n      updateFunction,\n      deferred\n    ).run();\n  }\n\n  async applyRemoteEvent(remoteEvent: RemoteEvent): Promise<void> {\n    this.assertSubscribed('applyRemoteEvent()');\n    try {\n      const changes = await this.localStore.applyRemoteEvent(remoteEvent);\n      // Update `receivedDocument` as appropriate for any limbo targets.\n      remoteEvent.targetChanges.forEach((targetChange, targetId) => {\n        const limboResolution = this.activeLimboResolutionsByTarget.get(\n          targetId\n        );\n        if (limboResolution) {\n          // Since this is a limbo resolution lookup, it's for a single document\n          // and it could be added, modified, or removed, but not a combination.\n          hardAssert(\n            targetChange.addedDocuments.size +\n              targetChange.modifiedDocuments.size +\n              targetChange.removedDocuments.size <=\n              1,\n            'Limbo resolution for single document contains multiple changes.'\n          );\n          if (targetChange.addedDocuments.size > 0) {\n            limboResolution.receivedDocument = true;\n          } else if (targetChange.modifiedDocuments.size > 0) {\n            hardAssert(\n              limboResolution.receivedDocument,\n              'Received change for limbo target document without add.'\n            );\n          } else if (targetChange.removedDocuments.size > 0) {\n            hardAssert(\n              limboResolution.receivedDocument,\n              'Received remove for limbo target document without add.'\n            );\n            limboResolution.receivedDocument = false;\n          } else {\n            // This was probably just a CURRENT targetChange or similar.\n          }\n        }\n      });\n      await this.emitNewSnapsAndNotifyLocalStore(changes, remoteEvent);\n    } catch (error) {\n      await ignoreIfPrimaryLeaseLoss(error);\n    }\n  }\n\n  /**\n   * Applies an OnlineState change to the sync engine and notifies any views of\n   * the change.\n   */\n  applyOnlineStateChange(\n    onlineState: OnlineState,\n    source: OnlineStateSource\n  ): void {\n    this.assertSubscribed('applyOnlineStateChange()');\n    const newViewSnapshots = [] as ViewSnapshot[];\n    this.queryViewsByQuery.forEach((query, queryView) => {\n      const viewChange = queryView.view.applyOnlineStateChange(onlineState);\n      debugAssert(\n        viewChange.limboChanges.length === 0,\n        'OnlineState should not affect limbo documents.'\n      );\n      if (viewChange.snapshot) {\n        newViewSnapshots.push(viewChange.snapshot);\n      }\n    });\n    this.syncEngineListener!.onOnlineStateChange(onlineState);\n    this.syncEngineListener!.onWatchChange(newViewSnapshots);\n    this.onlineState = onlineState;\n  }\n\n  async rejectListen(targetId: TargetId, err: FirestoreError): Promise<void> {\n    this.assertSubscribed('rejectListens()');\n\n    // PORTING NOTE: Multi-tab only.\n    this.sharedClientState.updateQueryState(targetId, 'rejected', err);\n\n    const limboResolution = this.activeLimboResolutionsByTarget.get(targetId);\n    const limboKey = limboResolution && limboResolution.key;\n    if (limboKey) {\n      // TODO(klimt): We really only should do the following on permission\n      // denied errors, but we don't have the cause code here.\n\n      // It's a limbo doc. Create a synthetic event saying it was deleted.\n      // This is kind of a hack. Ideally, we would have a method in the local\n      // store to purge a document. However, it would be tricky to keep all of\n      // the local store's invariants with another method.\n      let documentUpdates = new SortedMap<DocumentKey, MaybeDocument>(\n        DocumentKey.comparator\n      );\n      documentUpdates = documentUpdates.insert(\n        limboKey,\n        new NoDocument(limboKey, SnapshotVersion.min())\n      );\n      const resolvedLimboDocuments = documentKeySet().add(limboKey);\n      const event = new RemoteEvent(\n        SnapshotVersion.min(),\n        /* targetChanges= */ new Map<TargetId, TargetChange>(),\n        /* targetMismatches= */ new SortedSet<TargetId>(primitiveComparator),\n        documentUpdates,\n        resolvedLimboDocuments\n      );\n\n      await this.applyRemoteEvent(event);\n\n      // Since this query failed, we won't want to manually unlisten to it.\n      // We only remove it from bookkeeping after we successfully applied the\n      // RemoteEvent. If `applyRemoteEvent()` throws, we want to re-listen to\n      // this query when the RemoteStore restarts the Watch stream, which should\n      // re-trigger the target failure.\n      this.activeLimboTargetsByKey = this.activeLimboTargetsByKey.remove(\n        limboKey\n      );\n      this.activeLimboResolutionsByTarget.delete(targetId);\n      this.pumpEnqueuedLimboResolutions();\n    } else {\n      await this.localStore\n        .releaseTarget(targetId, /* keepPersistedTargetData */ false)\n        .then(() => this.removeAndCleanupTarget(targetId, err))\n        .catch(ignoreIfPrimaryLeaseLoss);\n    }\n  }\n\n  async applySuccessfulWrite(\n    mutationBatchResult: MutationBatchResult\n  ): Promise<void> {\n    this.assertSubscribed('applySuccessfulWrite()');\n\n    const batchId = mutationBatchResult.batch.batchId;\n\n    try {\n      const changes = await this.localStore.acknowledgeBatch(\n        mutationBatchResult\n      );\n\n      // The local store may or may not be able to apply the write result and\n      // raise events immediately (depending on whether the watcher is caught\n      // up), so we raise user callbacks first so that they consistently happen\n      // before listen events.\n      this.processUserCallback(batchId, /*error=*/ null);\n      this.triggerPendingWritesCallbacks(batchId);\n\n      this.sharedClientState.updateMutationState(batchId, 'acknowledged');\n      await this.emitNewSnapsAndNotifyLocalStore(changes);\n    } catch (error) {\n      await ignoreIfPrimaryLeaseLoss(error);\n    }\n  }\n\n  async rejectFailedWrite(\n    batchId: BatchId,\n    error: FirestoreError\n  ): Promise<void> {\n    this.assertSubscribed('rejectFailedWrite()');\n\n    try {\n      const changes = await this.localStore.rejectBatch(batchId);\n\n      // The local store may or may not be able to apply the write result and\n      // raise events immediately (depending on whether the watcher is caught up),\n      // so we raise user callbacks first so that they consistently happen before\n      // listen events.\n      this.processUserCallback(batchId, error);\n      this.triggerPendingWritesCallbacks(batchId);\n\n      this.sharedClientState.updateMutationState(batchId, 'rejected', error);\n      await this.emitNewSnapsAndNotifyLocalStore(changes);\n    } catch (error) {\n      await ignoreIfPrimaryLeaseLoss(error);\n    }\n  }\n\n  /**\n   * Registers a user callback that resolves when all pending mutations at the moment of calling\n   * are acknowledged .\n   */\n  async registerPendingWritesCallback(callback: Deferred<void>): Promise<void> {\n    if (!this.remoteStore.canUseNetwork()) {\n      logDebug(\n        LOG_TAG,\n        'The network is disabled. The task returned by ' +\n          \"'awaitPendingWrites()' will not complete until the network is enabled.\"\n      );\n    }\n\n    try {\n      const highestBatchId = await this.localStore.getHighestUnacknowledgedBatchId();\n      if (highestBatchId === BATCHID_UNKNOWN) {\n        // Trigger the callback right away if there is no pending writes at the moment.\n        callback.resolve();\n        return;\n      }\n\n      const callbacks = this.pendingWritesCallbacks.get(highestBatchId) || [];\n      callbacks.push(callback);\n      this.pendingWritesCallbacks.set(highestBatchId, callbacks);\n    } catch (e) {\n      const firestoreError = wrapInUserErrorIfRecoverable(\n        e,\n        'Initialization of waitForPendingWrites() operation failed'\n      );\n      callback.reject(firestoreError);\n    }\n  }\n\n  /**\n   * Triggers the callbacks that are waiting for this batch id to get acknowledged by server,\n   * if there are any.\n   */\n  private triggerPendingWritesCallbacks(batchId: BatchId): void {\n    (this.pendingWritesCallbacks.get(batchId) || []).forEach(callback => {\n      callback.resolve();\n    });\n\n    this.pendingWritesCallbacks.delete(batchId);\n  }\n\n  /** Reject all outstanding callbacks waiting for pending writes to complete. */\n  private rejectOutstandingPendingWritesCallbacks(errorMessage: string): void {\n    this.pendingWritesCallbacks.forEach(callbacks => {\n      callbacks.forEach(callback => {\n        callback.reject(new FirestoreError(Code.CANCELLED, errorMessage));\n      });\n    });\n\n    this.pendingWritesCallbacks.clear();\n  }\n\n  private addMutationCallback(\n    batchId: BatchId,\n    callback: Deferred<void>\n  ): void {\n    let newCallbacks = this.mutationUserCallbacks[this.currentUser.toKey()];\n    if (!newCallbacks) {\n      newCallbacks = new SortedMap<BatchId, Deferred<void>>(\n        primitiveComparator\n      );\n    }\n    newCallbacks = newCallbacks.insert(batchId, callback);\n    this.mutationUserCallbacks[this.currentUser.toKey()] = newCallbacks;\n  }\n\n  /**\n   * Resolves or rejects the user callback for the given batch and then discards\n   * it.\n   */\n  protected processUserCallback(batchId: BatchId, error: Error | null): void {\n    let newCallbacks = this.mutationUserCallbacks[this.currentUser.toKey()];\n\n    // NOTE: Mutations restored from persistence won't have callbacks, so it's\n    // okay for there to be no callback for this ID.\n    if (newCallbacks) {\n      const callback = newCallbacks.get(batchId);\n      if (callback) {\n        debugAssert(\n          batchId === newCallbacks.minKey(),\n          'Mutation callbacks processed out-of-order?'\n        );\n        if (error) {\n          callback.reject(error);\n        } else {\n          callback.resolve();\n        }\n        newCallbacks = newCallbacks.remove(batchId);\n      }\n      this.mutationUserCallbacks[this.currentUser.toKey()] = newCallbacks;\n    }\n  }\n\n  protected removeAndCleanupTarget(\n    targetId: number,\n    error: Error | null = null\n  ): void {\n    this.sharedClientState.removeLocalQueryTarget(targetId);\n\n    debugAssert(\n      this.queriesByTarget.has(targetId) &&\n        this.queriesByTarget.get(targetId)!.length !== 0,\n      `There are no queries mapped to target id ${targetId}`\n    );\n\n    for (const query of this.queriesByTarget.get(targetId)!) {\n      this.queryViewsByQuery.delete(query);\n      if (error) {\n        this.syncEngineListener!.onWatchError(query, error);\n      }\n    }\n\n    this.queriesByTarget.delete(targetId);\n\n    if (this.isPrimaryClient) {\n      const limboKeys = this.limboDocumentRefs.removeReferencesForId(targetId);\n      limboKeys.forEach(limboKey => {\n        const isReferenced = this.limboDocumentRefs.containsKey(limboKey);\n        if (!isReferenced) {\n          // We removed the last reference for this key\n          this.removeLimboTarget(limboKey);\n        }\n      });\n    }\n  }\n\n  private removeLimboTarget(key: DocumentKey): void {\n    // It's possible that the target already got removed because the query failed. In that case,\n    // the key won't exist in `limboTargetsByKey`. Only do the cleanup if we still have the target.\n    const limboTargetId = this.activeLimboTargetsByKey.get(key);\n    if (limboTargetId === null) {\n      // This target already got removed, because the query failed.\n      return;\n    }\n\n    this.remoteStore.unlisten(limboTargetId);\n    this.activeLimboTargetsByKey = this.activeLimboTargetsByKey.remove(key);\n    this.activeLimboResolutionsByTarget.delete(limboTargetId);\n    this.pumpEnqueuedLimboResolutions();\n  }\n\n  protected updateTrackedLimbos(\n    targetId: TargetId,\n    limboChanges: LimboDocumentChange[]\n  ): void {\n    for (const limboChange of limboChanges) {\n      if (limboChange instanceof AddedLimboDocument) {\n        this.limboDocumentRefs.addReference(limboChange.key, targetId);\n        this.trackLimboChange(limboChange);\n      } else if (limboChange instanceof RemovedLimboDocument) {\n        logDebug(LOG_TAG, 'Document no longer in limbo: ' + limboChange.key);\n        this.limboDocumentRefs.removeReference(limboChange.key, targetId);\n        const isReferenced = this.limboDocumentRefs.containsKey(\n          limboChange.key\n        );\n        if (!isReferenced) {\n          // We removed the last reference for this key\n          this.removeLimboTarget(limboChange.key);\n        }\n      } else {\n        fail('Unknown limbo change: ' + JSON.stringify(limboChange));\n      }\n    }\n  }\n\n  private trackLimboChange(limboChange: AddedLimboDocument): void {\n    const key = limboChange.key;\n    if (!this.activeLimboTargetsByKey.get(key)) {\n      logDebug(LOG_TAG, 'New document in limbo: ' + key);\n      this.enqueuedLimboResolutions.push(key);\n      this.pumpEnqueuedLimboResolutions();\n    }\n  }\n\n  /**\n   * Starts listens for documents in limbo that are enqueued for resolution,\n   * subject to a maximum number of concurrent resolutions.\n   *\n   * Without bounding the number of concurrent resolutions, the server can fail\n   * with \"resource exhausted\" errors which can lead to pathological client\n   * behavior as seen in https://github.com/firebase/firebase-js-sdk/issues/2683.\n   */\n  private pumpEnqueuedLimboResolutions(): void {\n    while (\n      this.enqueuedLimboResolutions.length > 0 &&\n      this.activeLimboTargetsByKey.size < this.maxConcurrentLimboResolutions\n    ) {\n      const key = this.enqueuedLimboResolutions.shift()!;\n      const limboTargetId = this.limboTargetIdGenerator.next();\n      this.activeLimboResolutionsByTarget.set(\n        limboTargetId,\n        new LimboResolution(key)\n      );\n      this.activeLimboTargetsByKey = this.activeLimboTargetsByKey.insert(\n        key,\n        limboTargetId\n      );\n      this.remoteStore.listen(\n        new TargetData(\n          Query.atPath(key.path).toTarget(),\n          limboTargetId,\n          TargetPurpose.LimboResolution,\n          ListenSequence.INVALID\n        )\n      );\n    }\n  }\n\n  // Visible for testing\n  activeLimboDocumentResolutions(): SortedMap<DocumentKey, TargetId> {\n    return this.activeLimboTargetsByKey;\n  }\n\n  // Visible for testing\n  enqueuedLimboDocumentResolutions(): DocumentKey[] {\n    return this.enqueuedLimboResolutions;\n  }\n\n  protected async emitNewSnapsAndNotifyLocalStore(\n    changes: MaybeDocumentMap,\n    remoteEvent?: RemoteEvent\n  ): Promise<void> {\n    const newSnaps: ViewSnapshot[] = [];\n    const docChangesInAllViews: LocalViewChanges[] = [];\n    const queriesProcessed: Array<Promise<void>> = [];\n\n    this.queryViewsByQuery.forEach((_, queryView) => {\n      queriesProcessed.push(\n        Promise.resolve()\n          .then(() => {\n            const viewDocChanges = queryView.view.computeDocChanges(changes);\n            if (!viewDocChanges.needsRefill) {\n              return viewDocChanges;\n            }\n            // The query has a limit and some docs were removed, so we need\n            // to re-run the query against the local store to make sure we\n            // didn't lose any good docs that had been past the limit.\n            return this.localStore\n              .executeQuery(queryView.query, /* usePreviousResults= */ false)\n              .then(({ documents }) => {\n                return queryView.view.computeDocChanges(\n                  documents,\n                  viewDocChanges\n                );\n              });\n          })\n          .then((viewDocChanges: ViewDocumentChanges) => {\n            const targetChange =\n              remoteEvent && remoteEvent.targetChanges.get(queryView.targetId);\n            const viewChange = queryView.view.applyChanges(\n              viewDocChanges,\n              /* updateLimboDocuments= */ this.isPrimaryClient,\n              targetChange\n            );\n            this.updateTrackedLimbos(\n              queryView.targetId,\n              viewChange.limboChanges\n            );\n            if (viewChange.snapshot) {\n              if (this.isPrimaryClient) {\n                this.sharedClientState.updateQueryState(\n                  queryView.targetId,\n                  viewChange.snapshot.fromCache ? 'not-current' : 'current'\n                );\n              }\n\n              newSnaps.push(viewChange.snapshot);\n              const docChanges = LocalViewChanges.fromSnapshot(\n                queryView.targetId,\n                viewChange.snapshot\n              );\n              docChangesInAllViews.push(docChanges);\n            }\n          })\n      );\n    });\n\n    await Promise.all(queriesProcessed);\n    this.syncEngineListener!.onWatchChange(newSnaps);\n    await this.localStore.notifyLocalViewChanges(docChangesInAllViews);\n  }\n\n  protected assertSubscribed(fnName: string): void {\n    debugAssert(\n      this.syncEngineListener !== null,\n      'Trying to call ' + fnName + ' before calling subscribe().'\n    );\n  }\n\n  async handleCredentialChange(user: User): Promise<void> {\n    const userChanged = !this.currentUser.isEqual(user);\n\n    if (userChanged) {\n      const result = await this.localStore.handleUserChange(user);\n      this.currentUser = user;\n\n      // Fails tasks waiting for pending writes requested by previous user.\n      this.rejectOutstandingPendingWritesCallbacks(\n        \"'waitForPendingWrites' promise is rejected due to a user change.\"\n      );\n      // TODO(b/114226417): Consider calling this only in the primary tab.\n      this.sharedClientState.handleUserChange(\n        user,\n        result.removedBatchIds,\n        result.addedBatchIds\n      );\n      await this.emitNewSnapsAndNotifyLocalStore(result.affectedDocuments);\n    }\n\n    await this.remoteStore.handleCredentialChange();\n  }\n\n  enableNetwork(): Promise<void> {\n    return this.remoteStore.enableNetwork();\n  }\n\n  disableNetwork(): Promise<void> {\n    return this.remoteStore.disableNetwork();\n  }\n\n  getRemoteKeysForTarget(targetId: TargetId): DocumentKeySet {\n    const limboResolution = this.activeLimboResolutionsByTarget.get(targetId);\n    if (limboResolution && limboResolution.receivedDocument) {\n      return documentKeySet().add(limboResolution.key);\n    } else {\n      let keySet = documentKeySet();\n      const queries = this.queriesByTarget.get(targetId);\n      if (!queries) {\n        return keySet;\n      }\n      for (const query of queries) {\n        const queryView = this.queryViewsByQuery.get(query);\n        debugAssert(!!queryView, `No query view found for ${query}`);\n        keySet = keySet.unionWith(queryView.view.syncedDocuments);\n      }\n      return keySet;\n    }\n  }\n}\n\n/**\n * An impplementation of SyncEngine that implement SharedClientStateSyncer for\n * Multi-Tab synchronization.\n */\n// PORTING NOTE: Web only\nexport class MultiTabSyncEngine extends SyncEngine\n  implements SharedClientStateSyncer {\n  // The primary state is set to `true` or `false` immediately after Firestore\n  // startup. In the interim, a client should only be considered primary if\n  // `isPrimary` is true.\n  private _isPrimaryClient: undefined | boolean = undefined;\n\n  constructor(\n    protected localStore: MultiTabLocalStore,\n    remoteStore: RemoteStore,\n    datastore: Datastore,\n    sharedClientState: SharedClientState,\n    currentUser: User,\n    maxConcurrentLimboResolutions: number\n  ) {\n    super(\n      localStore,\n      remoteStore,\n      datastore,\n      sharedClientState,\n      currentUser,\n      maxConcurrentLimboResolutions\n    );\n  }\n\n  get isPrimaryClient(): boolean {\n    return this._isPrimaryClient === true;\n  }\n\n  enableNetwork(): Promise<void> {\n    this.localStore.setNetworkEnabled(true);\n    return super.enableNetwork();\n  }\n\n  disableNetwork(): Promise<void> {\n    this.localStore.setNetworkEnabled(false);\n    return super.disableNetwork();\n  }\n\n  /**\n   * Reconcile the list of synced documents in an existing view with those\n   * from persistence.\n   */\n  private async synchronizeViewAndComputeSnapshot(\n    queryView: QueryView\n  ): Promise<ViewChange> {\n    const queryResult = await this.localStore.executeQuery(\n      queryView.query,\n      /* usePreviousResults= */ true\n    );\n    const viewSnapshot = queryView.view.synchronizeWithPersistedState(\n      queryResult\n    );\n    if (this._isPrimaryClient) {\n      this.updateTrackedLimbos(queryView.targetId, viewSnapshot.limboChanges);\n    }\n    return viewSnapshot;\n  }\n\n  applyOnlineStateChange(\n    onlineState: OnlineState,\n    source: OnlineStateSource\n  ): void {\n    // If we are the primary client, the online state of all clients only\n    // depends on the online state of the local RemoteStore.\n    if (this.isPrimaryClient && source === OnlineStateSource.RemoteStore) {\n      super.applyOnlineStateChange(onlineState, source);\n      this.sharedClientState.setOnlineState(onlineState);\n    }\n\n    // If we are the secondary client, we explicitly ignore the remote store's\n    // online state (the local client may go offline, even though the primary\n    // tab remains online) and only apply the primary tab's online state from\n    // SharedClientState.\n    if (\n      !this.isPrimaryClient &&\n      source === OnlineStateSource.SharedClientState\n    ) {\n      super.applyOnlineStateChange(onlineState, source);\n    }\n  }\n\n  async applyBatchState(\n    batchId: BatchId,\n    batchState: MutationBatchState,\n    error?: FirestoreError\n  ): Promise<void> {\n    this.assertSubscribed('applyBatchState()');\n    const documents = await this.localStore.lookupMutationDocuments(batchId);\n\n    if (documents === null) {\n      // A throttled tab may not have seen the mutation before it was completed\n      // and removed from the mutation queue, in which case we won't have cached\n      // the affected documents. In this case we can safely ignore the update\n      // since that means we didn't apply the mutation locally at all (if we\n      // had, we would have cached the affected documents), and so we will just\n      // see any resulting document changes via normal remote document updates\n      // as applicable.\n      logDebug(LOG_TAG, 'Cannot apply mutation batch with id: ' + batchId);\n      return;\n    }\n\n    if (batchState === 'pending') {\n      // If we are the primary client, we need to send this write to the\n      // backend. Secondary clients will ignore these writes since their remote\n      // connection is disabled.\n      await this.remoteStore.fillWritePipeline();\n    } else if (batchState === 'acknowledged' || batchState === 'rejected') {\n      // NOTE: Both these methods are no-ops for batches that originated from\n      // other clients.\n      this.processUserCallback(batchId, error ? error : null);\n      this.localStore.removeCachedMutationBatchMetadata(batchId);\n    } else {\n      fail(`Unknown batchState: ${batchState}`);\n    }\n\n    await this.emitNewSnapsAndNotifyLocalStore(documents);\n  }\n\n  async applyPrimaryState(isPrimary: boolean): Promise<void> {\n    if (isPrimary === true && this._isPrimaryClient !== true) {\n      // Secondary tabs only maintain Views for their local listeners and the\n      // Views internal state may not be 100% populated (in particular\n      // secondary tabs don't track syncedDocuments, the set of documents the\n      // server considers to be in the target). So when a secondary becomes\n      // primary, we need to need to make sure that all views for all targets\n      // match the state on disk.\n      const activeTargets = this.sharedClientState.getAllActiveQueryTargets();\n      const activeQueries = await this.synchronizeQueryViewsAndRaiseSnapshots(\n        activeTargets.toArray(),\n        /*transitionToPrimary=*/ true\n      );\n      this._isPrimaryClient = true;\n      await this.remoteStore.applyPrimaryState(true);\n      for (const targetData of activeQueries) {\n        this.remoteStore.listen(targetData);\n      }\n    } else if (isPrimary === false && this._isPrimaryClient !== false) {\n      const activeTargets: TargetId[] = [];\n\n      let p = Promise.resolve();\n      this.queriesByTarget.forEach((_, targetId) => {\n        if (this.sharedClientState.isLocalQueryTarget(targetId)) {\n          activeTargets.push(targetId);\n        } else {\n          p = p.then(() => {\n            this.removeAndCleanupTarget(targetId);\n            return this.localStore.releaseTarget(\n              targetId,\n              /*keepPersistedTargetData=*/ true\n            );\n          });\n        }\n        this.remoteStore.unlisten(targetId);\n      });\n      await p;\n\n      await this.synchronizeQueryViewsAndRaiseSnapshots(\n        activeTargets,\n        /*transitionToPrimary=*/ false\n      );\n      this.resetLimboDocuments();\n      this._isPrimaryClient = false;\n      await this.remoteStore.applyPrimaryState(false);\n    }\n  }\n\n  private resetLimboDocuments(): void {\n    this.activeLimboResolutionsByTarget.forEach((_, targetId) => {\n      this.remoteStore.unlisten(targetId);\n    });\n    this.limboDocumentRefs.removeAllReferences();\n    this.activeLimboResolutionsByTarget = new Map<TargetId, LimboResolution>();\n    this.activeLimboTargetsByKey = new SortedMap<DocumentKey, TargetId>(\n      DocumentKey.comparator\n    );\n  }\n\n  /**\n   * Reconcile the query views of the provided query targets with the state from\n   * persistence. Raises snapshots for any changes that affect the local\n   * client and returns the updated state of all target's query data.\n   *\n   * @param targets the list of targets with views that need to be recomputed\n   * @param transitionToPrimary `true` iff the tab transitions from a secondary\n   * tab to a primary tab\n   */\n  private async synchronizeQueryViewsAndRaiseSnapshots(\n    targets: TargetId[],\n    transitionToPrimary: boolean\n  ): Promise<TargetData[]> {\n    const activeQueries: TargetData[] = [];\n    const newViewSnapshots: ViewSnapshot[] = [];\n    for (const targetId of targets) {\n      let targetData: TargetData;\n      const queries = this.queriesByTarget.get(targetId);\n\n      if (queries && queries.length !== 0) {\n        // For queries that have a local View, we fetch their current state\n        // from LocalStore (as the resume token and the snapshot version\n        // might have changed) and reconcile their views with the persisted\n        // state (the list of syncedDocuments may have gotten out of sync).\n        targetData = await this.localStore.allocateTarget(\n          queries[0].toTarget()\n        );\n\n        for (const query of queries) {\n          const queryView = this.queryViewsByQuery.get(query);\n          debugAssert(!!queryView, `No query view found for ${query}`);\n\n          const viewChange = await this.synchronizeViewAndComputeSnapshot(\n            queryView\n          );\n          if (viewChange.snapshot) {\n            newViewSnapshots.push(viewChange.snapshot);\n          }\n        }\n      } else {\n        debugAssert(\n          transitionToPrimary,\n          'A secondary tab should never have an active view without an active target.'\n        );\n        // For queries that never executed on this client, we need to\n        // allocate the target in LocalStore and initialize a new View.\n        const target = await this.localStore.getTarget(targetId);\n        debugAssert(!!target, `Target for id ${targetId} not found`);\n        targetData = await this.localStore.allocateTarget(target);\n        await this.initializeViewAndComputeSnapshot(\n          this.synthesizeTargetToQuery(target!),\n          targetId,\n          /*current=*/ false\n        );\n      }\n\n      activeQueries.push(targetData!);\n    }\n\n    this.syncEngineListener!.onWatchChange(newViewSnapshots);\n    return activeQueries;\n  }\n\n  /**\n   * Creates a `Query` object from the specified `Target`. There is no way to\n   * obtain the original `Query`, so we synthesize a `Query` from the `Target`\n   * object.\n   *\n   * The synthesized result might be different from the original `Query`, but\n   * since the synthesized `Query` should return the same results as the\n   * original one (only the presentation of results might differ), the potential\n   * difference will not cause issues.\n   */\n  private synthesizeTargetToQuery(target: Target): Query {\n    return new Query(\n      target.path,\n      target.collectionGroup,\n      target.orderBy,\n      target.filters,\n      target.limit,\n      LimitType.First,\n      target.startAt,\n      target.endAt\n    );\n  }\n\n  getActiveClients(): Promise<ClientId[]> {\n    return this.localStore.getActiveClients();\n  }\n\n  async applyTargetState(\n    targetId: TargetId,\n    state: QueryTargetState,\n    error?: FirestoreError\n  ): Promise<void> {\n    if (this._isPrimaryClient) {\n      // If we receive a target state notification via WebStorage, we are\n      // either already secondary or another tab has taken the primary lease.\n      logDebug(LOG_TAG, 'Ignoring unexpected query state notification.');\n      return;\n    }\n\n    if (this.queriesByTarget.has(targetId)) {\n      switch (state) {\n        case 'current':\n        case 'not-current': {\n          const changes = await this.localStore.getNewDocumentChanges();\n          const synthesizedRemoteEvent = RemoteEvent.createSynthesizedRemoteEventForCurrentChange(\n            targetId,\n            state === 'current'\n          );\n          await this.emitNewSnapsAndNotifyLocalStore(\n            changes,\n            synthesizedRemoteEvent\n          );\n          break;\n        }\n        case 'rejected': {\n          await this.localStore.releaseTarget(\n            targetId,\n            /* keepPersistedTargetData */ true\n          );\n          this.removeAndCleanupTarget(targetId, error);\n          break;\n        }\n        default:\n          fail('Unexpected target state: ' + state);\n      }\n    }\n  }\n\n  async applyActiveTargetsChange(\n    added: TargetId[],\n    removed: TargetId[]\n  ): Promise<void> {\n    if (!this._isPrimaryClient) {\n      return;\n    }\n\n    for (const targetId of added) {\n      if (this.queriesByTarget.has(targetId)) {\n        // A target might have been added in a previous attempt\n        logDebug(LOG_TAG, 'Adding an already active target ' + targetId);\n        continue;\n      }\n\n      const target = await this.localStore.getTarget(targetId);\n      debugAssert(\n        !!target,\n        `Query data for active target ${targetId} not found`\n      );\n      const targetData = await this.localStore.allocateTarget(target);\n      await this.initializeViewAndComputeSnapshot(\n        this.synthesizeTargetToQuery(target),\n        targetData.targetId,\n        /*current=*/ false\n      );\n      this.remoteStore.listen(targetData);\n    }\n\n    for (const targetId of removed) {\n      // Check that the target is still active since the target might have been\n      // removed if it has been rejected by the backend.\n      if (!this.queriesByTarget.has(targetId)) {\n        continue;\n      }\n\n      // Release queries that are still active.\n      await this.localStore\n        .releaseTarget(targetId, /* keepPersistedTargetData */ false)\n        .then(() => {\n          this.remoteStore.unlisten(targetId);\n          this.removeAndCleanupTarget(targetId);\n        })\n        .catch(ignoreIfPrimaryLeaseLoss);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { debugAssert } from '../util/assert';\nimport { EventHandler } from '../util/misc';\nimport { ObjectMap } from '../util/obj_map';\nimport { Query } from './query';\nimport { SyncEngine, SyncEngineListener } from './sync_engine';\nimport { OnlineState } from './types';\nimport { ChangeType, DocumentViewChange, ViewSnapshot } from './view_snapshot';\nimport { wrapInUserErrorIfRecoverable } from '../util/async_queue';\n\n/**\n * Holds the listeners and the last received ViewSnapshot for a query being\n * tracked by EventManager.\n */\nclass QueryListenersInfo {\n  viewSnap: ViewSnapshot | undefined = undefined;\n  listeners: QueryListener[] = [];\n}\n\n/**\n * Interface for handling events from the EventManager.\n */\nexport interface Observer<T> {\n  next: EventHandler<T>;\n  error: EventHandler<Error>;\n}\n\n/**\n * EventManager is responsible for mapping queries to query event emitters.\n * It handles \"fan-out\". -- Identical queries will re-use the same watch on the\n * backend.\n */\nexport class EventManager implements SyncEngineListener {\n  private queries = new ObjectMap<Query, QueryListenersInfo>(q =>\n    q.canonicalId()\n  );\n\n  private onlineState = OnlineState.Unknown;\n\n  private snapshotsInSyncListeners: Set<Observer<void>> = new Set();\n\n  constructor(private syncEngine: SyncEngine) {\n    this.syncEngine.subscribe(this);\n  }\n\n  async listen(listener: QueryListener): Promise<void> {\n    const query = listener.query;\n    let firstListen = false;\n\n    let queryInfo = this.queries.get(query);\n    if (!queryInfo) {\n      firstListen = true;\n      queryInfo = new QueryListenersInfo();\n    }\n\n    if (firstListen) {\n      try {\n        queryInfo.viewSnap = await this.syncEngine.listen(query);\n      } catch (e) {\n        const firestoreError = wrapInUserErrorIfRecoverable(\n          e,\n          `Initialization of query '${listener.query}' failed`\n        );\n        listener.onError(firestoreError);\n        return;\n      }\n    }\n\n    this.queries.set(query, queryInfo);\n    queryInfo.listeners.push(listener);\n\n    // Run global snapshot listeners if a consistent snapshot has been emitted.\n    const raisedEvent = listener.applyOnlineStateChange(this.onlineState);\n    debugAssert(\n      !raisedEvent,\n      \"applyOnlineStateChange() shouldn't raise an event for brand-new listeners.\"\n    );\n\n    if (queryInfo.viewSnap) {\n      const raisedEvent = listener.onViewSnapshot(queryInfo.viewSnap);\n      if (raisedEvent) {\n        this.raiseSnapshotsInSyncEvent();\n      }\n    }\n  }\n\n  async unlisten(listener: QueryListener): Promise<void> {\n    const query = listener.query;\n    let lastListen = false;\n\n    const queryInfo = this.queries.get(query);\n    if (queryInfo) {\n      const i = queryInfo.listeners.indexOf(listener);\n      if (i >= 0) {\n        queryInfo.listeners.splice(i, 1);\n        lastListen = queryInfo.listeners.length === 0;\n      }\n    }\n\n    if (lastListen) {\n      this.queries.delete(query);\n      return this.syncEngine.unlisten(query);\n    }\n  }\n\n  onWatchChange(viewSnaps: ViewSnapshot[]): void {\n    let raisedEvent = false;\n    for (const viewSnap of viewSnaps) {\n      const query = viewSnap.query;\n      const queryInfo = this.queries.get(query);\n      if (queryInfo) {\n        for (const listener of queryInfo.listeners) {\n          if (listener.onViewSnapshot(viewSnap)) {\n            raisedEvent = true;\n          }\n        }\n        queryInfo.viewSnap = viewSnap;\n      }\n    }\n    if (raisedEvent) {\n      this.raiseSnapshotsInSyncEvent();\n    }\n  }\n\n  onWatchError(query: Query, error: Error): void {\n    const queryInfo = this.queries.get(query);\n    if (queryInfo) {\n      for (const listener of queryInfo.listeners) {\n        listener.onError(error);\n      }\n    }\n\n    // Remove all listeners. NOTE: We don't need to call syncEngine.unlisten()\n    // after an error.\n    this.queries.delete(query);\n  }\n\n  onOnlineStateChange(onlineState: OnlineState): void {\n    this.onlineState = onlineState;\n    let raisedEvent = false;\n    this.queries.forEach((_, queryInfo) => {\n      for (const listener of queryInfo.listeners) {\n        // Run global snapshot listeners if a consistent snapshot has been emitted.\n        if (listener.applyOnlineStateChange(onlineState)) {\n          raisedEvent = true;\n        }\n      }\n    });\n    if (raisedEvent) {\n      this.raiseSnapshotsInSyncEvent();\n    }\n  }\n\n  addSnapshotsInSyncListener(observer: Observer<void>): void {\n    this.snapshotsInSyncListeners.add(observer);\n    // Immediately fire an initial event, indicating all existing listeners\n    // are in-sync.\n    observer.next();\n  }\n\n  removeSnapshotsInSyncListener(observer: Observer<void>): void {\n    this.snapshotsInSyncListeners.delete(observer);\n  }\n\n  // Call all global snapshot listeners that have been set.\n  private raiseSnapshotsInSyncEvent(): void {\n    this.snapshotsInSyncListeners.forEach(observer => {\n      observer.next();\n    });\n  }\n}\n\nexport interface ListenOptions {\n  /** Raise events even when only the metadata changes */\n  readonly includeMetadataChanges?: boolean;\n\n  /**\n   * Wait for a sync with the server when online, but still raise events while\n   * offline.\n   */\n  readonly waitForSyncWhenOnline?: boolean;\n}\n\n/**\n * QueryListener takes a series of internal view snapshots and determines\n * when to raise the event.\n *\n * It uses an Observer to dispatch events.\n */\nexport class QueryListener {\n  /**\n   * Initial snapshots (e.g. from cache) may not be propagated to the wrapped\n   * observer. This flag is set to true once we've actually raised an event.\n   */\n  private raisedInitialEvent = false;\n\n  private options: ListenOptions;\n\n  private snap: ViewSnapshot | null = null;\n\n  private onlineState = OnlineState.Unknown;\n\n  constructor(\n    readonly query: Query,\n    private queryObserver: Observer<ViewSnapshot>,\n    options?: ListenOptions\n  ) {\n    this.options = options || {};\n  }\n\n  /**\n   * Applies the new ViewSnapshot to this listener, raising a user-facing event\n   * if applicable (depending on what changed, whether the user has opted into\n   * metadata-only changes, etc.). Returns true if a user-facing event was\n   * indeed raised.\n   */\n  onViewSnapshot(snap: ViewSnapshot): boolean {\n    debugAssert(\n      snap.docChanges.length > 0 || snap.syncStateChanged,\n      'We got a new snapshot with no changes?'\n    );\n\n    if (!this.options.includeMetadataChanges) {\n      // Remove the metadata only changes.\n      const docChanges: DocumentViewChange[] = [];\n      for (const docChange of snap.docChanges) {\n        if (docChange.type !== ChangeType.Metadata) {\n          docChanges.push(docChange);\n        }\n      }\n      snap = new ViewSnapshot(\n        snap.query,\n        snap.docs,\n        snap.oldDocs,\n        docChanges,\n        snap.mutatedKeys,\n        snap.fromCache,\n        snap.syncStateChanged,\n        /* excludesMetadataChanges= */ true\n      );\n    }\n    let raisedEvent = false;\n    if (!this.raisedInitialEvent) {\n      if (this.shouldRaiseInitialEvent(snap, this.onlineState)) {\n        this.raiseInitialEvent(snap);\n        raisedEvent = true;\n      }\n    } else if (this.shouldRaiseEvent(snap)) {\n      this.queryObserver.next(snap);\n      raisedEvent = true;\n    }\n\n    this.snap = snap;\n    return raisedEvent;\n  }\n\n  onError(error: Error): void {\n    this.queryObserver.error(error);\n  }\n\n  /** Returns whether a snapshot was raised. */\n  applyOnlineStateChange(onlineState: OnlineState): boolean {\n    this.onlineState = onlineState;\n    let raisedEvent = false;\n    if (\n      this.snap &&\n      !this.raisedInitialEvent &&\n      this.shouldRaiseInitialEvent(this.snap, onlineState)\n    ) {\n      this.raiseInitialEvent(this.snap);\n      raisedEvent = true;\n    }\n    return raisedEvent;\n  }\n\n  private shouldRaiseInitialEvent(\n    snap: ViewSnapshot,\n    onlineState: OnlineState\n  ): boolean {\n    debugAssert(\n      !this.raisedInitialEvent,\n      'Determining whether to raise first event but already had first event'\n    );\n\n    // Always raise the first event when we're synced\n    if (!snap.fromCache) {\n      return true;\n    }\n\n    // NOTE: We consider OnlineState.Unknown as online (it should become Offline\n    // or Online if we wait long enough).\n    const maybeOnline = onlineState !== OnlineState.Offline;\n    // Don't raise the event if we're online, aren't synced yet (checked\n    // above) and are waiting for a sync.\n    if (this.options.waitForSyncWhenOnline && maybeOnline) {\n      debugAssert(\n        snap.fromCache,\n        'Waiting for sync, but snapshot is not from cache'\n      );\n      return false;\n    }\n\n    // Raise data from cache if we have any documents or we are offline\n    return !snap.docs.isEmpty() || onlineState === OnlineState.Offline;\n  }\n\n  private shouldRaiseEvent(snap: ViewSnapshot): boolean {\n    // We don't need to handle includeDocumentMetadataChanges here because\n    // the Metadata only changes have already been stripped out if needed.\n    // At this point the only changes we will see are the ones we should\n    // propagate.\n    if (snap.docChanges.length > 0) {\n      return true;\n    }\n\n    const hasPendingWritesChanged =\n      this.snap && this.snap.hasPendingWrites !== snap.hasPendingWrites;\n    if (snap.syncStateChanged || hasPendingWritesChanged) {\n      return this.options.includeMetadataChanges === true;\n    }\n\n    // Generally we should have hit one of the cases above, but it's possible\n    // to get here if there were only metadata docChanges and they got\n    // stripped out.\n    return false;\n  }\n\n  private raiseInitialEvent(snap: ViewSnapshot): void {\n    debugAssert(\n      !this.raisedInitialEvent,\n      'Trying to raise initial events for second time'\n    );\n    snap = ViewSnapshot.fromInitialDocuments(\n      snap.query,\n      snap.docs,\n      snap.mutatedKeys,\n      snap.fromCache\n    );\n    this.raisedInitialEvent = true;\n    this.queryObserver.next(snap);\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { QueryEngine } from './query_engine';\nimport { LocalDocumentsView } from './local_documents_view';\nimport { PersistenceTransaction } from './persistence';\nimport { PersistencePromise } from './persistence_promise';\nimport { LimitType, Query } from '../core/query';\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport {\n  DocumentKeySet,\n  DocumentMap,\n  MaybeDocumentMap\n} from '../model/collections';\nimport { Document } from '../model/document';\nimport { debugAssert } from '../util/assert';\nimport { getLogLevel, LogLevel, logDebug } from '../util/log';\nimport { SortedSet } from '../util/sorted_set';\n\n// TOOD(b/140938512): Drop SimpleQueryEngine and rename IndexFreeQueryEngine.\n\n/**\n * A query engine that takes advantage of the target document mapping in the\n * QueryCache. The IndexFreeQueryEngine optimizes query execution by only\n * reading the documents that previously matched a query plus any documents that were\n * edited after the query was last listened to.\n *\n * There are some cases where Index-Free queries are not guaranteed to produce\n * the same results as full collection scans. In these cases, the\n * IndexFreeQueryEngine falls back to full query processing. These cases are:\n *\n * - Limit queries where a document that matched the query previously no longer\n *   matches the query.\n *\n * - Limit queries where a document edit may cause the document to sort below\n *   another document that is in the local cache.\n *\n * - Queries that have never been CURRENT or free of Limbo documents.\n */\nexport class IndexFreeQueryEngine implements QueryEngine {\n  private localDocumentsView: LocalDocumentsView | undefined;\n\n  setLocalDocumentsView(localDocuments: LocalDocumentsView): void {\n    this.localDocumentsView = localDocuments;\n  }\n\n  getDocumentsMatchingQuery(\n    transaction: PersistenceTransaction,\n    query: Query,\n    lastLimboFreeSnapshotVersion: SnapshotVersion,\n    remoteKeys: DocumentKeySet\n  ): PersistencePromise<DocumentMap> {\n    debugAssert(\n      this.localDocumentsView !== undefined,\n      'setLocalDocumentsView() not called'\n    );\n\n    // Queries that match all documents don't benefit from using\n    // IndexFreeQueries. It is more efficient to scan all documents in a\n    // collection, rather than to perform individual lookups.\n    if (query.matchesAllDocuments()) {\n      return this.executeFullCollectionScan(transaction, query);\n    }\n\n    // Queries that have never seen a snapshot without limbo free documents\n    // should also be run as a full collection scan.\n    if (lastLimboFreeSnapshotVersion.isEqual(SnapshotVersion.min())) {\n      return this.executeFullCollectionScan(transaction, query);\n    }\n\n    return this.localDocumentsView!.getDocuments(transaction, remoteKeys).next(\n      documents => {\n        const previousResults = this.applyQuery(query, documents);\n\n        if (\n          (query.hasLimitToFirst() || query.hasLimitToLast()) &&\n          this.needsRefill(\n            query.limitType,\n            previousResults,\n            remoteKeys,\n            lastLimboFreeSnapshotVersion\n          )\n        ) {\n          return this.executeFullCollectionScan(transaction, query);\n        }\n\n        if (getLogLevel() <= LogLevel.DEBUG) {\n          logDebug(\n            'IndexFreeQueryEngine',\n            'Re-using previous result from %s to execute query: %s',\n            lastLimboFreeSnapshotVersion.toString(),\n            query.toString()\n          );\n        }\n\n        // Retrieve all results for documents that were updated since the last\n        // limbo-document free remote snapshot.\n        return this.localDocumentsView!.getDocumentsMatchingQuery(\n          transaction,\n          query,\n          lastLimboFreeSnapshotVersion\n        ).next(updatedResults => {\n          // We merge `previousResults` into `updateResults`, since\n          // `updateResults` is already a DocumentMap. If a document is\n          // contained in both lists, then its contents are the same.\n          previousResults.forEach(doc => {\n            updatedResults = updatedResults.insert(doc.key, doc);\n          });\n          return updatedResults;\n        });\n      }\n    );\n  }\n\n  /** Applies the query filter and sorting to the provided documents.  */\n  private applyQuery(\n    query: Query,\n    documents: MaybeDocumentMap\n  ): SortedSet<Document> {\n    // Sort the documents and re-apply the query filter since previously\n    // matching documents do not necessarily still match the query.\n    let queryResults = new SortedSet<Document>((d1, d2) =>\n      query.docComparator(d1, d2)\n    );\n    documents.forEach((_, maybeDoc) => {\n      if (maybeDoc instanceof Document && query.matches(maybeDoc)) {\n        queryResults = queryResults.add(maybeDoc);\n      }\n    });\n    return queryResults;\n  }\n\n  /**\n   * Determines if a limit query needs to be refilled from cache, making it\n   * ineligible for index-free execution.\n   *\n   * @param sortedPreviousResults The documents that matched the query when it\n   * was last synchronized, sorted by the query's comparator.\n   * @param remoteKeys The document keys that matched the query at the last\n   * snapshot.\n   * @param limboFreeSnapshotVersion The version of the snapshot when the query\n   * was last synchronized.\n   */\n  private needsRefill(\n    limitType: LimitType,\n    sortedPreviousResults: SortedSet<Document>,\n    remoteKeys: DocumentKeySet,\n    limboFreeSnapshotVersion: SnapshotVersion\n  ): boolean {\n    // The query needs to be refilled if a previously matching document no\n    // longer matches.\n    if (remoteKeys.size !== sortedPreviousResults.size) {\n      return true;\n    }\n\n    // Limit queries are not eligible for index-free query execution if there is\n    // a potential that an older document from cache now sorts before a document\n    // that was previously part of the limit. This, however, can only happen if\n    // the document at the edge of the limit goes out of limit.\n    // If a document that is not the limit boundary sorts differently,\n    // the boundary of the limit itself did not change and documents from cache\n    // will continue to be \"rejected\" by this boundary. Therefore, we can ignore\n    // any modifications that don't affect the last document.\n    const docAtLimitEdge =\n      limitType === LimitType.First\n        ? sortedPreviousResults.last()\n        : sortedPreviousResults.first();\n    if (!docAtLimitEdge) {\n      // We don't need to refill the query if there were already no documents.\n      return false;\n    }\n    return (\n      docAtLimitEdge.hasPendingWrites ||\n      docAtLimitEdge.version.compareTo(limboFreeSnapshotVersion) > 0\n    );\n  }\n\n  private executeFullCollectionScan(\n    transaction: PersistenceTransaction,\n    query: Query\n  ): PersistencePromise<DocumentMap> {\n    if (getLogLevel() <= LogLevel.DEBUG) {\n      logDebug(\n        'IndexFreeQueryEngine',\n        'Using full collection scan to execute query:',\n        query.toString()\n      );\n    }\n\n    return this.localDocumentsView!.getDocumentsMatchingQuery(\n      transaction,\n      query,\n      SnapshotVersion.min()\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Timestamp } from '../api/timestamp';\nimport { Query } from '../core/query';\nimport { BatchId } from '../core/types';\nimport { DocumentKey } from '../model/document_key';\nimport { Mutation } from '../model/mutation';\nimport { MutationBatch, BATCHID_UNKNOWN } from '../model/mutation_batch';\nimport { debugAssert, hardAssert } from '../util/assert';\nimport { primitiveComparator } from '../util/misc';\nimport { SortedMap } from '../util/sorted_map';\nimport { SortedSet } from '../util/sorted_set';\n\nimport { IndexManager } from './index_manager';\nimport { MutationQueue } from './mutation_queue';\nimport { PersistenceTransaction, ReferenceDelegate } from './persistence';\nimport { PersistencePromise } from './persistence_promise';\nimport { DocReference } from './reference_set';\n\nexport class MemoryMutationQueue implements MutationQueue {\n  /**\n   * The set of all mutations that have been sent but not yet been applied to\n   * the backend.\n   */\n  private mutationQueue: MutationBatch[] = [];\n\n  /** Next value to use when assigning sequential IDs to each mutation batch. */\n  private nextBatchId: BatchId = 1;\n\n  /** An ordered mapping between documents and the mutations batch IDs. */\n  private batchesByDocumentKey = new SortedSet(DocReference.compareByKey);\n\n  constructor(\n    private readonly indexManager: IndexManager,\n    private readonly referenceDelegate: ReferenceDelegate\n  ) {}\n\n  checkEmpty(transaction: PersistenceTransaction): PersistencePromise<boolean> {\n    return PersistencePromise.resolve(this.mutationQueue.length === 0);\n  }\n\n  addMutationBatch(\n    transaction: PersistenceTransaction,\n    localWriteTime: Timestamp,\n    baseMutations: Mutation[],\n    mutations: Mutation[]\n  ): PersistencePromise<MutationBatch> {\n    debugAssert(mutations.length !== 0, 'Mutation batches should not be empty');\n\n    const batchId = this.nextBatchId;\n    this.nextBatchId++;\n\n    if (this.mutationQueue.length > 0) {\n      const prior = this.mutationQueue[this.mutationQueue.length - 1];\n      debugAssert(\n        prior.batchId < batchId,\n        'Mutation batchIDs must be monotonically increasing order'\n      );\n    }\n\n    const batch = new MutationBatch(\n      batchId,\n      localWriteTime,\n      baseMutations,\n      mutations\n    );\n    this.mutationQueue.push(batch);\n\n    // Track references by document key and index collection parents.\n    for (const mutation of mutations) {\n      this.batchesByDocumentKey = this.batchesByDocumentKey.add(\n        new DocReference(mutation.key, batchId)\n      );\n\n      this.indexManager.addToCollectionParentIndex(\n        transaction,\n        mutation.key.path.popLast()\n      );\n    }\n\n    return PersistencePromise.resolve(batch);\n  }\n\n  lookupMutationBatch(\n    transaction: PersistenceTransaction,\n    batchId: BatchId\n  ): PersistencePromise<MutationBatch | null> {\n    return PersistencePromise.resolve(this.findMutationBatch(batchId));\n  }\n\n  getNextMutationBatchAfterBatchId(\n    transaction: PersistenceTransaction,\n    batchId: BatchId\n  ): PersistencePromise<MutationBatch | null> {\n    const nextBatchId = batchId + 1;\n\n    // The requested batchId may still be out of range so normalize it to the\n    // start of the queue.\n    const rawIndex = this.indexOfBatchId(nextBatchId);\n    const index = rawIndex < 0 ? 0 : rawIndex;\n    return PersistencePromise.resolve(\n      this.mutationQueue.length > index ? this.mutationQueue[index] : null\n    );\n  }\n\n  getHighestUnacknowledgedBatchId(): PersistencePromise<BatchId> {\n    return PersistencePromise.resolve(\n      this.mutationQueue.length === 0 ? BATCHID_UNKNOWN : this.nextBatchId - 1\n    );\n  }\n\n  getAllMutationBatches(\n    transaction: PersistenceTransaction\n  ): PersistencePromise<MutationBatch[]> {\n    return PersistencePromise.resolve(this.mutationQueue.slice());\n  }\n\n  getAllMutationBatchesAffectingDocumentKey(\n    transaction: PersistenceTransaction,\n    documentKey: DocumentKey\n  ): PersistencePromise<MutationBatch[]> {\n    const start = new DocReference(documentKey, 0);\n    const end = new DocReference(documentKey, Number.POSITIVE_INFINITY);\n    const result: MutationBatch[] = [];\n    this.batchesByDocumentKey.forEachInRange([start, end], ref => {\n      debugAssert(\n        documentKey.isEqual(ref.key),\n        \"Should only iterate over a single key's batches\"\n      );\n      const batch = this.findMutationBatch(ref.targetOrBatchId);\n      debugAssert(\n        batch !== null,\n        'Batches in the index must exist in the main table'\n      );\n      result.push(batch!);\n    });\n\n    return PersistencePromise.resolve(result);\n  }\n\n  getAllMutationBatchesAffectingDocumentKeys(\n    transaction: PersistenceTransaction,\n    documentKeys: SortedMap<DocumentKey, unknown>\n  ): PersistencePromise<MutationBatch[]> {\n    let uniqueBatchIDs = new SortedSet<number>(primitiveComparator);\n\n    documentKeys.forEach(documentKey => {\n      const start = new DocReference(documentKey, 0);\n      const end = new DocReference(documentKey, Number.POSITIVE_INFINITY);\n      this.batchesByDocumentKey.forEachInRange([start, end], ref => {\n        debugAssert(\n          documentKey.isEqual(ref.key),\n          \"For each key, should only iterate over a single key's batches\"\n        );\n\n        uniqueBatchIDs = uniqueBatchIDs.add(ref.targetOrBatchId);\n      });\n    });\n\n    return PersistencePromise.resolve(this.findMutationBatches(uniqueBatchIDs));\n  }\n\n  getAllMutationBatchesAffectingQuery(\n    transaction: PersistenceTransaction,\n    query: Query\n  ): PersistencePromise<MutationBatch[]> {\n    debugAssert(\n      !query.isCollectionGroupQuery(),\n      'CollectionGroup queries should be handled in LocalDocumentsView'\n    );\n    // Use the query path as a prefix for testing if a document matches the\n    // query.\n    const prefix = query.path;\n    const immediateChildrenPathLength = prefix.length + 1;\n\n    // Construct a document reference for actually scanning the index. Unlike\n    // the prefix the document key in this reference must have an even number of\n    // segments. The empty segment can be used a suffix of the query path\n    // because it precedes all other segments in an ordered traversal.\n    let startPath = prefix;\n    if (!DocumentKey.isDocumentKey(startPath)) {\n      startPath = startPath.child('');\n    }\n\n    const start = new DocReference(new DocumentKey(startPath), 0);\n\n    // Find unique batchIDs referenced by all documents potentially matching the\n    // query.\n    let uniqueBatchIDs = new SortedSet<number>(primitiveComparator);\n\n    this.batchesByDocumentKey.forEachWhile(ref => {\n      const rowKeyPath = ref.key.path;\n      if (!prefix.isPrefixOf(rowKeyPath)) {\n        return false;\n      } else {\n        // Rows with document keys more than one segment longer than the query\n        // path can't be matches. For example, a query on 'rooms' can't match\n        // the document /rooms/abc/messages/xyx.\n        // TODO(mcg): we'll need a different scanner when we implement\n        // ancestor queries.\n        if (rowKeyPath.length === immediateChildrenPathLength) {\n          uniqueBatchIDs = uniqueBatchIDs.add(ref.targetOrBatchId);\n        }\n        return true;\n      }\n    }, start);\n\n    return PersistencePromise.resolve(this.findMutationBatches(uniqueBatchIDs));\n  }\n\n  private findMutationBatches(batchIDs: SortedSet<number>): MutationBatch[] {\n    // Construct an array of matching batches, sorted by batchID to ensure that\n    // multiple mutations affecting the same document key are applied in order.\n    const result: MutationBatch[] = [];\n    batchIDs.forEach(batchId => {\n      const batch = this.findMutationBatch(batchId);\n      if (batch !== null) {\n        result.push(batch);\n      }\n    });\n    return result;\n  }\n\n  removeMutationBatch(\n    transaction: PersistenceTransaction,\n    batch: MutationBatch\n  ): PersistencePromise<void> {\n    // Find the position of the first batch for removal.\n    const batchIndex = this.indexOfExistingBatchId(batch.batchId, 'removed');\n    hardAssert(\n      batchIndex === 0,\n      'Can only remove the first entry of the mutation queue'\n    );\n    this.mutationQueue.shift();\n\n    let references = this.batchesByDocumentKey;\n    return PersistencePromise.forEach(batch.mutations, (mutation: Mutation) => {\n      const ref = new DocReference(mutation.key, batch.batchId);\n      references = references.delete(ref);\n      return this.referenceDelegate.markPotentiallyOrphaned(\n        transaction,\n        mutation.key\n      );\n    }).next(() => {\n      this.batchesByDocumentKey = references;\n    });\n  }\n\n  removeCachedMutationKeys(batchId: BatchId): void {\n    // No-op since the memory mutation queue does not maintain a separate cache.\n  }\n\n  containsKey(\n    txn: PersistenceTransaction,\n    key: DocumentKey\n  ): PersistencePromise<boolean> {\n    const ref = new DocReference(key, 0);\n    const firstRef = this.batchesByDocumentKey.firstAfterOrEqual(ref);\n    return PersistencePromise.resolve(key.isEqual(firstRef && firstRef.key));\n  }\n\n  performConsistencyCheck(\n    txn: PersistenceTransaction\n  ): PersistencePromise<void> {\n    if (this.mutationQueue.length === 0) {\n      debugAssert(\n        this.batchesByDocumentKey.isEmpty(),\n        'Document leak -- detected dangling mutation references when queue is empty.'\n      );\n    }\n    return PersistencePromise.resolve();\n  }\n\n  /**\n   * Finds the index of the given batchId in the mutation queue and asserts that\n   * the resulting index is within the bounds of the queue.\n   *\n   * @param batchId The batchId to search for\n   * @param action A description of what the caller is doing, phrased in passive\n   * form (e.g. \"acknowledged\" in a routine that acknowledges batches).\n   */\n  private indexOfExistingBatchId(batchId: BatchId, action: string): number {\n    const index = this.indexOfBatchId(batchId);\n    debugAssert(\n      index >= 0 && index < this.mutationQueue.length,\n      'Batches must exist to be ' + action\n    );\n    return index;\n  }\n\n  /**\n   * Finds the index of the given batchId in the mutation queue. This operation\n   * is O(1).\n   *\n   * @return The computed index of the batch with the given batchId, based on\n   * the state of the queue. Note this index can be negative if the requested\n   * batchId has already been remvoed from the queue or past the end of the\n   * queue if the batchId is larger than the last added batch.\n   */\n  private indexOfBatchId(batchId: BatchId): number {\n    if (this.mutationQueue.length === 0) {\n      // As an index this is past the end of the queue\n      return 0;\n    }\n\n    // Examine the front of the queue to figure out the difference between the\n    // batchId and indexes in the array. Note that since the queue is ordered\n    // by batchId, if the first batch has a larger batchId then the requested\n    // batchId doesn't exist in the queue.\n    const firstBatchId = this.mutationQueue[0].batchId;\n    return batchId - firstBatchId;\n  }\n\n  /**\n   * A version of lookupMutationBatch that doesn't return a promise, this makes\n   * other functions that uses this code easier to read and more efficent.\n   */\n  private findMutationBatch(batchId: BatchId): MutationBatch | null {\n    const index = this.indexOfBatchId(batchId);\n    if (index < 0 || index >= this.mutationQueue.length) {\n      return null;\n    }\n\n    const batch = this.mutationQueue[index];\n    debugAssert(batch.batchId === batchId, 'If found batch must match');\n    return batch;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Query } from '../core/query';\nimport {\n  DocumentKeySet,\n  DocumentMap,\n  documentMap,\n  DocumentSizeEntry,\n  NullableMaybeDocumentMap,\n  nullableMaybeDocumentMap\n} from '../model/collections';\nimport { Document, MaybeDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\n\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { debugAssert } from '../util/assert';\nimport { SortedMap } from '../util/sorted_map';\nimport { IndexManager } from './index_manager';\nimport { PersistenceTransaction } from './persistence';\nimport { PersistencePromise } from './persistence_promise';\nimport { RemoteDocumentCache } from './remote_document_cache';\nimport { RemoteDocumentChangeBuffer } from './remote_document_change_buffer';\n\nexport type DocumentSizer = (doc: MaybeDocument) => number;\n\n/** Miscellaneous collection types / constants. */\ninterface MemoryRemoteDocumentCacheEntry extends DocumentSizeEntry {\n  readTime: SnapshotVersion;\n}\n\ntype DocumentEntryMap = SortedMap<DocumentKey, MemoryRemoteDocumentCacheEntry>;\nfunction documentEntryMap(): DocumentEntryMap {\n  return new SortedMap<DocumentKey, MemoryRemoteDocumentCacheEntry>(\n    DocumentKey.comparator\n  );\n}\n\nexport class MemoryRemoteDocumentCache implements RemoteDocumentCache {\n  /** Underlying cache of documents and their read times. */\n  private docs = documentEntryMap();\n\n  /** Size of all cached documents. */\n  private size = 0;\n\n  /**\n   * @param sizer Used to assess the size of a document. For eager GC, this is expected to just\n   * return 0 to avoid unnecessarily doing the work of calculating the size.\n   */\n  constructor(\n    private readonly indexManager: IndexManager,\n    private readonly sizer: DocumentSizer\n  ) {}\n\n  /**\n   * Adds the supplied entry to the cache and updates the cache size as appropriate.\n   *\n   * All calls of `addEntry`  are required to go through the RemoteDocumentChangeBuffer\n   * returned by `newChangeBuffer()`.\n   */\n  private addEntry(\n    transaction: PersistenceTransaction,\n    doc: MaybeDocument,\n    readTime: SnapshotVersion\n  ): PersistencePromise<void> {\n    debugAssert(\n      !readTime.isEqual(SnapshotVersion.min()),\n      'Cannot add a document with a read time of zero'\n    );\n\n    const key = doc.key;\n    const entry = this.docs.get(key);\n    const previousSize = entry ? entry.size : 0;\n    const currentSize = this.sizer(doc);\n\n    this.docs = this.docs.insert(key, {\n      maybeDocument: doc,\n      size: currentSize,\n      readTime\n    });\n\n    this.size += currentSize - previousSize;\n\n    return this.indexManager.addToCollectionParentIndex(\n      transaction,\n      key.path.popLast()\n    );\n  }\n\n  /**\n   * Removes the specified entry from the cache and updates the cache size as appropriate.\n   *\n   * All calls of `removeEntry` are required to go through the RemoteDocumentChangeBuffer\n   * returned by `newChangeBuffer()`.\n   */\n  private removeEntry(documentKey: DocumentKey): void {\n    const entry = this.docs.get(documentKey);\n    if (entry) {\n      this.docs = this.docs.remove(documentKey);\n      this.size -= entry.size;\n    }\n  }\n\n  getEntry(\n    transaction: PersistenceTransaction,\n    documentKey: DocumentKey\n  ): PersistencePromise<MaybeDocument | null> {\n    const entry = this.docs.get(documentKey);\n    return PersistencePromise.resolve(entry ? entry.maybeDocument : null);\n  }\n\n  getEntries(\n    transaction: PersistenceTransaction,\n    documentKeys: DocumentKeySet\n  ): PersistencePromise<NullableMaybeDocumentMap> {\n    let results = nullableMaybeDocumentMap();\n    documentKeys.forEach(documentKey => {\n      const entry = this.docs.get(documentKey);\n      results = results.insert(documentKey, entry ? entry.maybeDocument : null);\n    });\n    return PersistencePromise.resolve(results);\n  }\n\n  getDocumentsMatchingQuery(\n    transaction: PersistenceTransaction,\n    query: Query,\n    sinceReadTime: SnapshotVersion\n  ): PersistencePromise<DocumentMap> {\n    debugAssert(\n      !query.isCollectionGroupQuery(),\n      'CollectionGroup queries should be handled in LocalDocumentsView'\n    );\n    let results = documentMap();\n\n    // Documents are ordered by key, so we can use a prefix scan to narrow down\n    // the documents we need to match the query against.\n    const prefix = new DocumentKey(query.path.child(''));\n    const iterator = this.docs.getIteratorFrom(prefix);\n    while (iterator.hasNext()) {\n      const {\n        key,\n        value: { maybeDocument, readTime }\n      } = iterator.getNext();\n      if (!query.path.isPrefixOf(key.path)) {\n        break;\n      }\n      if (readTime.compareTo(sinceReadTime) <= 0) {\n        continue;\n      }\n      if (maybeDocument instanceof Document && query.matches(maybeDocument)) {\n        results = results.insert(maybeDocument.key, maybeDocument);\n      }\n    }\n    return PersistencePromise.resolve(results);\n  }\n\n  forEachDocumentKey(\n    transaction: PersistenceTransaction,\n    f: (key: DocumentKey) => PersistencePromise<void>\n  ): PersistencePromise<void> {\n    return PersistencePromise.forEach(this.docs, (key: DocumentKey) => f(key));\n  }\n\n  newChangeBuffer(options?: {\n    trackRemovals: boolean;\n  }): RemoteDocumentChangeBuffer {\n    // `trackRemovals` is ignores since the MemoryRemoteDocumentCache keeps\n    // a separate changelog and does not need special handling for removals.\n    return new MemoryRemoteDocumentCache.RemoteDocumentChangeBuffer(this);\n  }\n\n  getSize(txn: PersistenceTransaction): PersistencePromise<number> {\n    return PersistencePromise.resolve(this.size);\n  }\n\n  /**\n   * Handles the details of adding and updating documents in the MemoryRemoteDocumentCache.\n   */\n  private static RemoteDocumentChangeBuffer = class extends RemoteDocumentChangeBuffer {\n    constructor(private readonly documentCache: MemoryRemoteDocumentCache) {\n      super();\n    }\n\n    protected applyChanges(\n      transaction: PersistenceTransaction\n    ): PersistencePromise<void> {\n      const promises: Array<PersistencePromise<void>> = [];\n      this.changes.forEach((key, doc) => {\n        if (doc) {\n          promises.push(\n            this.documentCache.addEntry(transaction, doc, this.readTime)\n          );\n        } else {\n          this.documentCache.removeEntry(key);\n        }\n      });\n      return PersistencePromise.waitFor(promises);\n    }\n\n    protected getFromCache(\n      transaction: PersistenceTransaction,\n      documentKey: DocumentKey\n    ): PersistencePromise<MaybeDocument | null> {\n      return this.documentCache.getEntry(transaction, documentKey);\n    }\n\n    protected getAllFromCache(\n      transaction: PersistenceTransaction,\n      documentKeys: DocumentKeySet\n    ): PersistencePromise<NullableMaybeDocumentMap> {\n      return this.documentCache.getEntries(transaction, documentKeys);\n    }\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { TargetIdGenerator } from '../core/target_id_generator';\nimport { ListenSequenceNumber, TargetId } from '../core/types';\nimport { DocumentKeySet } from '../model/collections';\nimport { DocumentKey } from '../model/document_key';\nimport { debugAssert } from '../util/assert';\nimport { ObjectMap } from '../util/obj_map';\n\nimport { ActiveTargets } from './lru_garbage_collector';\nimport { MemoryPersistence } from './memory_persistence';\nimport { PersistenceTransaction } from './persistence';\nimport { PersistencePromise } from './persistence_promise';\nimport { ReferenceSet } from './reference_set';\nimport { TargetCache } from './target_cache';\nimport { TargetData } from './target_data';\nimport { Target } from '../core/target';\n\nexport class MemoryTargetCache implements TargetCache {\n  /**\n   * Maps a target to the data about that target\n   */\n  private targets = new ObjectMap<Target, TargetData>(t => t.canonicalId());\n\n  /** The last received snapshot version. */\n  private lastRemoteSnapshotVersion = SnapshotVersion.min();\n  /** The highest numbered target ID encountered. */\n  private highestTargetId: TargetId = 0;\n  /** The highest sequence number encountered. */\n  private highestSequenceNumber: ListenSequenceNumber = 0;\n  /**\n   * A ordered bidirectional mapping between documents and the remote target\n   * IDs.\n   */\n  private references = new ReferenceSet();\n\n  private targetCount = 0;\n\n  private targetIdGenerator = TargetIdGenerator.forTargetCache();\n\n  constructor(private readonly persistence: MemoryPersistence) {}\n\n  forEachTarget(\n    txn: PersistenceTransaction,\n    f: (q: TargetData) => void\n  ): PersistencePromise<void> {\n    this.targets.forEach((_, targetData) => f(targetData));\n    return PersistencePromise.resolve();\n  }\n\n  getLastRemoteSnapshotVersion(\n    transaction: PersistenceTransaction\n  ): PersistencePromise<SnapshotVersion> {\n    return PersistencePromise.resolve(this.lastRemoteSnapshotVersion);\n  }\n\n  getHighestSequenceNumber(\n    transaction: PersistenceTransaction\n  ): PersistencePromise<ListenSequenceNumber> {\n    return PersistencePromise.resolve(this.highestSequenceNumber);\n  }\n\n  allocateTargetId(\n    transaction: PersistenceTransaction\n  ): PersistencePromise<TargetId> {\n    this.highestTargetId = this.targetIdGenerator.next();\n    return PersistencePromise.resolve(this.highestTargetId);\n  }\n\n  setTargetsMetadata(\n    transaction: PersistenceTransaction,\n    highestListenSequenceNumber: number,\n    lastRemoteSnapshotVersion?: SnapshotVersion\n  ): PersistencePromise<void> {\n    if (lastRemoteSnapshotVersion) {\n      this.lastRemoteSnapshotVersion = lastRemoteSnapshotVersion;\n    }\n    if (highestListenSequenceNumber > this.highestSequenceNumber) {\n      this.highestSequenceNumber = highestListenSequenceNumber;\n    }\n    return PersistencePromise.resolve();\n  }\n\n  private saveTargetData(targetData: TargetData): void {\n    this.targets.set(targetData.target, targetData);\n    const targetId = targetData.targetId;\n    if (targetId > this.highestTargetId) {\n      this.targetIdGenerator = new TargetIdGenerator(targetId);\n      this.highestTargetId = targetId;\n    }\n    if (targetData.sequenceNumber > this.highestSequenceNumber) {\n      this.highestSequenceNumber = targetData.sequenceNumber;\n    }\n  }\n\n  addTargetData(\n    transaction: PersistenceTransaction,\n    targetData: TargetData\n  ): PersistencePromise<void> {\n    debugAssert(\n      !this.targets.has(targetData.target),\n      'Adding a target that already exists'\n    );\n    this.saveTargetData(targetData);\n    this.targetCount += 1;\n    return PersistencePromise.resolve();\n  }\n\n  updateTargetData(\n    transaction: PersistenceTransaction,\n    targetData: TargetData\n  ): PersistencePromise<void> {\n    debugAssert(\n      this.targets.has(targetData.target),\n      'Updating a non-existent target'\n    );\n    this.saveTargetData(targetData);\n    return PersistencePromise.resolve();\n  }\n\n  removeTargetData(\n    transaction: PersistenceTransaction,\n    targetData: TargetData\n  ): PersistencePromise<void> {\n    debugAssert(this.targetCount > 0, 'Removing a target from an empty cache');\n    debugAssert(\n      this.targets.has(targetData.target),\n      'Removing a non-existent target from the cache'\n    );\n    this.targets.delete(targetData.target);\n    this.references.removeReferencesForId(targetData.targetId);\n    this.targetCount -= 1;\n    return PersistencePromise.resolve();\n  }\n\n  removeTargets(\n    transaction: PersistenceTransaction,\n    upperBound: ListenSequenceNumber,\n    activeTargetIds: ActiveTargets\n  ): PersistencePromise<number> {\n    let count = 0;\n    const removals: Array<PersistencePromise<void>> = [];\n    this.targets.forEach((key, targetData) => {\n      if (\n        targetData.sequenceNumber <= upperBound &&\n        activeTargetIds.get(targetData.targetId) === null\n      ) {\n        this.targets.delete(key);\n        removals.push(\n          this.removeMatchingKeysForTargetId(transaction, targetData.targetId)\n        );\n        count++;\n      }\n    });\n    return PersistencePromise.waitFor(removals).next(() => count);\n  }\n\n  getTargetCount(\n    transaction: PersistenceTransaction\n  ): PersistencePromise<number> {\n    return PersistencePromise.resolve(this.targetCount);\n  }\n\n  getTargetData(\n    transaction: PersistenceTransaction,\n    target: Target\n  ): PersistencePromise<TargetData | null> {\n    const targetData = this.targets.get(target) || null;\n    return PersistencePromise.resolve(targetData);\n  }\n\n  addMatchingKeys(\n    txn: PersistenceTransaction,\n    keys: DocumentKeySet,\n    targetId: TargetId\n  ): PersistencePromise<void> {\n    this.references.addReferences(keys, targetId);\n    return PersistencePromise.resolve();\n  }\n\n  removeMatchingKeys(\n    txn: PersistenceTransaction,\n    keys: DocumentKeySet,\n    targetId: TargetId\n  ): PersistencePromise<void> {\n    this.references.removeReferences(keys, targetId);\n    const referenceDelegate = this.persistence.referenceDelegate;\n    const promises: Array<PersistencePromise<void>> = [];\n    if (referenceDelegate) {\n      keys.forEach(key => {\n        promises.push(referenceDelegate.markPotentiallyOrphaned(txn, key));\n      });\n    }\n    return PersistencePromise.waitFor(promises);\n  }\n\n  removeMatchingKeysForTargetId(\n    txn: PersistenceTransaction,\n    targetId: TargetId\n  ): PersistencePromise<void> {\n    this.references.removeReferencesForId(targetId);\n    return PersistencePromise.resolve();\n  }\n\n  getMatchingKeysForTargetId(\n    txn: PersistenceTransaction,\n    targetId: TargetId\n  ): PersistencePromise<DocumentKeySet> {\n    const matchingKeys = this.references.referencesForId(targetId);\n    return PersistencePromise.resolve(matchingKeys);\n  }\n\n  containsKey(\n    txn: PersistenceTransaction,\n    key: DocumentKey\n  ): PersistencePromise<boolean> {\n    return PersistencePromise.resolve(this.references.containsKey(key));\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { User } from '../auth/user';\nimport { Document, MaybeDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { fail } from '../util/assert';\nimport { logDebug } from '../util/log';\nimport { ObjectMap } from '../util/obj_map';\nimport { encodeResourcePath } from './encoded_resource_path';\nimport {\n  ActiveTargets,\n  LruDelegate,\n  LruGarbageCollector,\n  LruParams\n} from './lru_garbage_collector';\nimport { ListenSequence } from '../core/listen_sequence';\nimport { ListenSequenceNumber, TargetId } from '../core/types';\nimport { estimateByteSize } from '../model/values';\nimport { MemoryIndexManager } from './memory_index_manager';\nimport { MemoryMutationQueue } from './memory_mutation_queue';\nimport { MemoryRemoteDocumentCache } from './memory_remote_document_cache';\nimport { MemoryTargetCache } from './memory_target_cache';\nimport { MutationQueue } from './mutation_queue';\nimport {\n  Persistence,\n  PersistenceTransaction,\n  PersistenceTransactionMode,\n  ReferenceDelegate\n} from './persistence';\nimport { PersistencePromise } from './persistence_promise';\nimport { ReferenceSet } from './reference_set';\nimport { TargetData } from './target_data';\n\nconst LOG_TAG = 'MemoryPersistence';\n/**\n * A memory-backed instance of Persistence. Data is stored only in RAM and\n * not persisted across sessions.\n */\nexport class MemoryPersistence implements Persistence {\n  /**\n   * Note that these are retained here to make it easier to write tests\n   * affecting both the in-memory and IndexedDB-backed persistence layers. Tests\n   * can create a new LocalStore wrapping this Persistence instance and this\n   * will make the in-memory persistence layer behave as if it were actually\n   * persisting values.\n   */\n  private readonly indexManager: MemoryIndexManager;\n  private mutationQueues: { [user: string]: MemoryMutationQueue } = {};\n  private readonly remoteDocumentCache: MemoryRemoteDocumentCache;\n  private readonly targetCache: MemoryTargetCache;\n  private readonly listenSequence = new ListenSequence(0);\n\n  private _started = false;\n\n  readonly referenceDelegate: MemoryReferenceDelegate;\n\n  /**\n   * The constructor accepts a factory for creating a reference delegate. This\n   * allows both the delegate and this instance to have strong references to\n   * each other without having nullable fields that would then need to be\n   * checked or asserted on every access.\n   */\n  constructor(\n    referenceDelegateFactory: (p: MemoryPersistence) => MemoryReferenceDelegate\n  ) {\n    this._started = true;\n    this.referenceDelegate = referenceDelegateFactory(this);\n    this.targetCache = new MemoryTargetCache(this);\n    const sizer = (doc: MaybeDocument): number =>\n      this.referenceDelegate.documentSize(doc);\n    this.indexManager = new MemoryIndexManager();\n    this.remoteDocumentCache = new MemoryRemoteDocumentCache(\n      this.indexManager,\n      sizer\n    );\n  }\n\n  start(): Promise<void> {\n    return Promise.resolve();\n  }\n\n  shutdown(): Promise<void> {\n    // No durable state to ensure is closed on shutdown.\n    this._started = false;\n    return Promise.resolve();\n  }\n\n  get started(): boolean {\n    return this._started;\n  }\n\n  setDatabaseDeletedListener(): void {\n    // No op.\n  }\n\n  getIndexManager(): MemoryIndexManager {\n    return this.indexManager;\n  }\n\n  getMutationQueue(user: User): MutationQueue {\n    let queue = this.mutationQueues[user.toKey()];\n    if (!queue) {\n      queue = new MemoryMutationQueue(\n        this.indexManager,\n        this.referenceDelegate\n      );\n      this.mutationQueues[user.toKey()] = queue;\n    }\n    return queue;\n  }\n\n  getTargetCache(): MemoryTargetCache {\n    return this.targetCache;\n  }\n\n  getRemoteDocumentCache(): MemoryRemoteDocumentCache {\n    return this.remoteDocumentCache;\n  }\n\n  runTransaction<T>(\n    action: string,\n    mode: PersistenceTransactionMode,\n    transactionOperation: (\n      transaction: PersistenceTransaction\n    ) => PersistencePromise<T>\n  ): Promise<T> {\n    logDebug(LOG_TAG, 'Starting transaction:', action);\n    const txn = new MemoryTransaction(this.listenSequence.next());\n    this.referenceDelegate.onTransactionStarted();\n    return transactionOperation(txn)\n      .next(result => {\n        return this.referenceDelegate\n          .onTransactionCommitted(txn)\n          .next(() => result);\n      })\n      .toPromise()\n      .then(result => {\n        txn.raiseOnCommittedEvent();\n        return result;\n      });\n  }\n\n  mutationQueuesContainKey(\n    transaction: PersistenceTransaction,\n    key: DocumentKey\n  ): PersistencePromise<boolean> {\n    return PersistencePromise.or(\n      Object.values(this.mutationQueues).map(queue => () =>\n        queue.containsKey(transaction, key)\n      )\n    );\n  }\n}\n\n/**\n * Memory persistence is not actually transactional, but future implementations\n * may have transaction-scoped state.\n */\nexport class MemoryTransaction extends PersistenceTransaction {\n  constructor(readonly currentSequenceNumber: ListenSequenceNumber) {\n    super();\n  }\n}\n\nexport interface MemoryReferenceDelegate extends ReferenceDelegate {\n  documentSize(doc: MaybeDocument): number;\n  onTransactionStarted(): void;\n  onTransactionCommitted(txn: PersistenceTransaction): PersistencePromise<void>;\n}\n\nexport class MemoryEagerDelegate implements MemoryReferenceDelegate {\n  /** Tracks all documents that are active in Query views. */\n  private localViewReferences: ReferenceSet = new ReferenceSet();\n  /** The list of documents that are potentially GCed after each transaction. */\n  private _orphanedDocuments: Set<DocumentKey> | null = null;\n\n  private constructor(private readonly persistence: MemoryPersistence) {}\n\n  static factory(persistence: MemoryPersistence): MemoryEagerDelegate {\n    return new MemoryEagerDelegate(persistence);\n  }\n\n  private get orphanedDocuments(): Set<DocumentKey> {\n    if (!this._orphanedDocuments) {\n      throw fail('orphanedDocuments is only valid during a transaction.');\n    } else {\n      return this._orphanedDocuments;\n    }\n  }\n\n  addReference(\n    txn: PersistenceTransaction,\n    targetId: TargetId,\n    key: DocumentKey\n  ): PersistencePromise<void> {\n    this.localViewReferences.addReference(key, targetId);\n    this.orphanedDocuments.delete(key);\n    return PersistencePromise.resolve();\n  }\n\n  removeReference(\n    txn: PersistenceTransaction,\n    targetId: TargetId,\n    key: DocumentKey\n  ): PersistencePromise<void> {\n    this.localViewReferences.removeReference(key, targetId);\n    this.orphanedDocuments.add(key);\n    return PersistencePromise.resolve();\n  }\n\n  markPotentiallyOrphaned(\n    txn: PersistenceTransaction,\n    key: DocumentKey\n  ): PersistencePromise<void> {\n    this.orphanedDocuments.add(key);\n    return PersistencePromise.resolve();\n  }\n\n  removeTarget(\n    txn: PersistenceTransaction,\n    targetData: TargetData\n  ): PersistencePromise<void> {\n    const orphaned = this.localViewReferences.removeReferencesForId(\n      targetData.targetId\n    );\n    orphaned.forEach(key => this.orphanedDocuments.add(key));\n    const cache = this.persistence.getTargetCache();\n    return cache\n      .getMatchingKeysForTargetId(txn, targetData.targetId)\n      .next(keys => {\n        keys.forEach(key => this.orphanedDocuments.add(key));\n      })\n      .next(() => cache.removeTargetData(txn, targetData));\n  }\n\n  onTransactionStarted(): void {\n    this._orphanedDocuments = new Set<DocumentKey>();\n  }\n\n  onTransactionCommitted(\n    txn: PersistenceTransaction\n  ): PersistencePromise<void> {\n    // Remove newly orphaned documents.\n    const cache = this.persistence.getRemoteDocumentCache();\n    const changeBuffer = cache.newChangeBuffer();\n    return PersistencePromise.forEach(\n      this.orphanedDocuments,\n      (key: DocumentKey) => {\n        return this.isReferenced(txn, key).next(isReferenced => {\n          if (!isReferenced) {\n            changeBuffer.removeEntry(key);\n          }\n        });\n      }\n    ).next(() => {\n      this._orphanedDocuments = null;\n      return changeBuffer.apply(txn);\n    });\n  }\n\n  updateLimboDocument(\n    txn: PersistenceTransaction,\n    key: DocumentKey\n  ): PersistencePromise<void> {\n    return this.isReferenced(txn, key).next(isReferenced => {\n      if (isReferenced) {\n        this.orphanedDocuments.delete(key);\n      } else {\n        this.orphanedDocuments.add(key);\n      }\n    });\n  }\n\n  documentSize(doc: MaybeDocument): number {\n    // For eager GC, we don't care about the document size, there are no size thresholds.\n    return 0;\n  }\n\n  private isReferenced(\n    txn: PersistenceTransaction,\n    key: DocumentKey\n  ): PersistencePromise<boolean> {\n    return PersistencePromise.or([\n      () =>\n        PersistencePromise.resolve(this.localViewReferences.containsKey(key)),\n      () => this.persistence.getTargetCache().containsKey(txn, key),\n      () => this.persistence.mutationQueuesContainKey(txn, key)\n    ]);\n  }\n}\n\nexport class MemoryLruDelegate implements ReferenceDelegate, LruDelegate {\n  private orphanedSequenceNumbers: ObjectMap<\n    DocumentKey,\n    ListenSequenceNumber\n  > = new ObjectMap(k => encodeResourcePath(k.path));\n\n  readonly garbageCollector: LruGarbageCollector;\n\n  constructor(\n    private readonly persistence: MemoryPersistence,\n    lruParams: LruParams\n  ) {\n    this.garbageCollector = new LruGarbageCollector(this, lruParams);\n  }\n\n  // No-ops, present so memory persistence doesn't have to care which delegate\n  // it has.\n  onTransactionStarted(): void {}\n\n  onTransactionCommitted(\n    txn: PersistenceTransaction\n  ): PersistencePromise<void> {\n    return PersistencePromise.resolve();\n  }\n\n  forEachTarget(\n    txn: PersistenceTransaction,\n    f: (q: TargetData) => void\n  ): PersistencePromise<void> {\n    return this.persistence.getTargetCache().forEachTarget(txn, f);\n  }\n\n  getSequenceNumberCount(\n    txn: PersistenceTransaction\n  ): PersistencePromise<number> {\n    const docCountPromise = this.orphanedDocumentCount(txn);\n    const targetCountPromise = this.persistence\n      .getTargetCache()\n      .getTargetCount(txn);\n    return targetCountPromise.next(targetCount =>\n      docCountPromise.next(docCount => targetCount + docCount)\n    );\n  }\n\n  private orphanedDocumentCount(\n    txn: PersistenceTransaction\n  ): PersistencePromise<number> {\n    let orphanedCount = 0;\n    return this.forEachOrphanedDocumentSequenceNumber(txn, _ => {\n      orphanedCount++;\n    }).next(() => orphanedCount);\n  }\n\n  forEachOrphanedDocumentSequenceNumber(\n    txn: PersistenceTransaction,\n    f: (sequenceNumber: ListenSequenceNumber) => void\n  ): PersistencePromise<void> {\n    return PersistencePromise.forEach(\n      this.orphanedSequenceNumbers,\n      (key, sequenceNumber) => {\n        // Pass in the exact sequence number as the upper bound so we know it won't be pinned by\n        // being too recent.\n        return this.isPinned(txn, key, sequenceNumber).next(isPinned => {\n          if (!isPinned) {\n            return f(sequenceNumber);\n          } else {\n            return PersistencePromise.resolve();\n          }\n        });\n      }\n    );\n  }\n\n  removeTargets(\n    txn: PersistenceTransaction,\n    upperBound: ListenSequenceNumber,\n    activeTargetIds: ActiveTargets\n  ): PersistencePromise<number> {\n    return this.persistence\n      .getTargetCache()\n      .removeTargets(txn, upperBound, activeTargetIds);\n  }\n\n  removeOrphanedDocuments(\n    txn: PersistenceTransaction,\n    upperBound: ListenSequenceNumber\n  ): PersistencePromise<number> {\n    let count = 0;\n    const cache = this.persistence.getRemoteDocumentCache();\n    const changeBuffer = cache.newChangeBuffer();\n    const p = cache.forEachDocumentKey(txn, key => {\n      return this.isPinned(txn, key, upperBound).next(isPinned => {\n        if (!isPinned) {\n          count++;\n          changeBuffer.removeEntry(key);\n        }\n      });\n    });\n    return p.next(() => changeBuffer.apply(txn)).next(() => count);\n  }\n\n  markPotentiallyOrphaned(\n    txn: PersistenceTransaction,\n    key: DocumentKey\n  ): PersistencePromise<void> {\n    this.orphanedSequenceNumbers.set(key, txn.currentSequenceNumber);\n    return PersistencePromise.resolve();\n  }\n\n  removeTarget(\n    txn: PersistenceTransaction,\n    targetData: TargetData\n  ): PersistencePromise<void> {\n    const updated = targetData.withSequenceNumber(txn.currentSequenceNumber);\n    return this.persistence.getTargetCache().updateTargetData(txn, updated);\n  }\n\n  addReference(\n    txn: PersistenceTransaction,\n    targetId: TargetId,\n    key: DocumentKey\n  ): PersistencePromise<void> {\n    this.orphanedSequenceNumbers.set(key, txn.currentSequenceNumber);\n    return PersistencePromise.resolve();\n  }\n\n  removeReference(\n    txn: PersistenceTransaction,\n    targetId: TargetId,\n    key: DocumentKey\n  ): PersistencePromise<void> {\n    this.orphanedSequenceNumbers.set(key, txn.currentSequenceNumber);\n    return PersistencePromise.resolve();\n  }\n\n  updateLimboDocument(\n    txn: PersistenceTransaction,\n    key: DocumentKey\n  ): PersistencePromise<void> {\n    this.orphanedSequenceNumbers.set(key, txn.currentSequenceNumber);\n    return PersistencePromise.resolve();\n  }\n\n  documentSize(maybeDoc: MaybeDocument): number {\n    let documentSize = maybeDoc.key.toString().length;\n    if (maybeDoc instanceof Document) {\n      documentSize += estimateByteSize(maybeDoc.toProto());\n    }\n    return documentSize;\n  }\n\n  private isPinned(\n    txn: PersistenceTransaction,\n    key: DocumentKey,\n    upperBound: ListenSequenceNumber\n  ): PersistencePromise<boolean> {\n    return PersistencePromise.or([\n      () => this.persistence.mutationQueuesContainKey(txn, key),\n      () => this.persistence.getTargetCache().containsKey(txn, key),\n      () => {\n        const orphanedAt = this.orphanedSequenceNumbers.get(key);\n        return PersistencePromise.resolve(\n          orphanedAt !== undefined && orphanedAt > upperBound\n        );\n      }\n    ]);\n  }\n\n  getCacheSize(txn: PersistenceTransaction): PersistencePromise<number> {\n    return this.persistence.getRemoteDocumentCache().getSize(txn);\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ClientId,\n  MemorySharedClientState,\n  SharedClientState,\n  WebStorageSharedClientState\n} from '../local/shared_client_state';\nimport { LocalStore, MultiTabLocalStore } from '../local/local_store';\nimport { MultiTabSyncEngine, SyncEngine } from './sync_engine';\nimport { RemoteStore } from '../remote/remote_store';\nimport { EventManager } from './event_manager';\nimport { AsyncQueue } from '../util/async_queue';\nimport { DatabaseInfo } from './database_info';\nimport { Platform } from '../platform/platform';\nimport { Datastore } from '../remote/datastore';\nimport { User } from '../auth/user';\nimport { PersistenceSettings } from './firestore_client';\nimport { debugAssert } from '../util/assert';\nimport { GarbageCollectionScheduler, Persistence } from '../local/persistence';\nimport { Code, FirestoreError } from '../util/error';\nimport { OnlineStateSource } from './types';\nimport { LruParams, LruScheduler } from '../local/lru_garbage_collector';\nimport { IndexFreeQueryEngine } from '../local/index_free_query_engine';\nimport { IndexedDbPersistence } from '../local/indexeddb_persistence';\nimport {\n  MemoryEagerDelegate,\n  MemoryPersistence\n} from '../local/memory_persistence';\n\nconst MEMORY_ONLY_PERSISTENCE_ERROR_MESSAGE =\n  'You are using the memory-only build of Firestore. Persistence support is ' +\n  'only available via the @firebase/firestore bundle or the ' +\n  'firebase-firestore.js build.';\n\nexport interface ComponentConfiguration {\n  asyncQueue: AsyncQueue;\n  databaseInfo: DatabaseInfo;\n  platform: Platform;\n  datastore: Datastore;\n  clientId: ClientId;\n  initialUser: User;\n  maxConcurrentLimboResolutions: number;\n  persistenceSettings: PersistenceSettings;\n}\n\n/**\n * Initializes and wires up all core components for Firestore. Implementations\n * override `initialize()` to provide all components.\n */\nexport interface ComponentProvider {\n  persistence: Persistence;\n  sharedClientState: SharedClientState;\n  localStore: LocalStore;\n  syncEngine: SyncEngine;\n  gcScheduler: GarbageCollectionScheduler | null;\n  remoteStore: RemoteStore;\n  eventManager: EventManager;\n\n  initialize(cfg: ComponentConfiguration): Promise<void>;\n\n  clearPersistence(databaseId: DatabaseInfo): Promise<void>;\n}\n\n/**\n * Provides all components needed for Firestore with in-memory persistence.\n * Uses EagerGC garbage collection.\n */\nexport class MemoryComponentProvider implements ComponentProvider {\n  persistence!: Persistence;\n  sharedClientState!: SharedClientState;\n  localStore!: LocalStore;\n  syncEngine!: SyncEngine;\n  gcScheduler!: GarbageCollectionScheduler | null;\n  remoteStore!: RemoteStore;\n  eventManager!: EventManager;\n\n  async initialize(cfg: ComponentConfiguration): Promise<void> {\n    this.sharedClientState = this.createSharedClientState(cfg);\n    this.persistence = this.createPersistence(cfg);\n    await this.persistence.start();\n    this.gcScheduler = this.createGarbageCollectionScheduler(cfg);\n    this.localStore = this.createLocalStore(cfg);\n    this.remoteStore = this.createRemoteStore(cfg);\n    this.syncEngine = this.createSyncEngine(cfg);\n    this.eventManager = this.createEventManager(cfg);\n\n    this.sharedClientState.onlineStateHandler = onlineState =>\n      this.syncEngine.applyOnlineStateChange(\n        onlineState,\n        OnlineStateSource.SharedClientState\n      );\n    this.remoteStore.syncEngine = this.syncEngine;\n\n    await this.localStore.start();\n    await this.sharedClientState.start();\n    await this.remoteStore.start();\n\n    await this.remoteStore.applyPrimaryState(this.syncEngine.isPrimaryClient);\n  }\n\n  createEventManager(cfg: ComponentConfiguration): EventManager {\n    return new EventManager(this.syncEngine);\n  }\n\n  createGarbageCollectionScheduler(\n    cfg: ComponentConfiguration\n  ): GarbageCollectionScheduler | null {\n    return null;\n  }\n\n  createLocalStore(cfg: ComponentConfiguration): LocalStore {\n    return new LocalStore(\n      this.persistence,\n      new IndexFreeQueryEngine(),\n      cfg.initialUser\n    );\n  }\n\n  createPersistence(cfg: ComponentConfiguration): Persistence {\n    if (cfg.persistenceSettings.durable) {\n      throw new FirestoreError(\n        Code.FAILED_PRECONDITION,\n        MEMORY_ONLY_PERSISTENCE_ERROR_MESSAGE\n      );\n    }\n    return new MemoryPersistence(MemoryEagerDelegate.factory);\n  }\n\n  createRemoteStore(cfg: ComponentConfiguration): RemoteStore {\n    return new RemoteStore(\n      this.localStore,\n      cfg.datastore,\n      cfg.asyncQueue,\n      onlineState =>\n        this.syncEngine.applyOnlineStateChange(\n          onlineState,\n          OnlineStateSource.RemoteStore\n        ),\n      cfg.platform.newConnectivityMonitor()\n    );\n  }\n\n  createSharedClientState(cfg: ComponentConfiguration): SharedClientState {\n    return new MemorySharedClientState();\n  }\n\n  createSyncEngine(cfg: ComponentConfiguration): SyncEngine {\n    return new SyncEngine(\n      this.localStore,\n      this.remoteStore,\n      cfg.datastore,\n      this.sharedClientState,\n      cfg.initialUser,\n      cfg.maxConcurrentLimboResolutions\n    );\n  }\n\n  clearPersistence(databaseInfo: DatabaseInfo): Promise<void> {\n    throw new FirestoreError(\n      Code.FAILED_PRECONDITION,\n      MEMORY_ONLY_PERSISTENCE_ERROR_MESSAGE\n    );\n  }\n}\n\n/**\n * Provides all components needed for Firestore with IndexedDB persistence.\n */\nexport class IndexedDbComponentProvider extends MemoryComponentProvider {\n  persistence!: IndexedDbPersistence;\n\n  // TODO(tree-shaking): Create an IndexedDbComponentProvider and a\n  // MultiTabComponentProvider. The IndexedDbComponentProvider should depend\n  // on LocalStore and SyncEngine.\n  localStore!: MultiTabLocalStore;\n  syncEngine!: MultiTabSyncEngine;\n\n  async initialize(cfg: ComponentConfiguration): Promise<void> {\n    await super.initialize(cfg);\n\n    // NOTE: This will immediately call the listener, so we make sure to\n    // set it after localStore / remoteStore are started.\n    await this.persistence.setPrimaryStateListener(async isPrimary => {\n      await (this.syncEngine as MultiTabSyncEngine).applyPrimaryState(\n        isPrimary\n      );\n      if (this.gcScheduler) {\n        if (isPrimary && !this.gcScheduler.started) {\n          this.gcScheduler.start(this.localStore);\n        } else if (!isPrimary) {\n          this.gcScheduler.stop();\n        }\n      }\n    });\n  }\n\n  createLocalStore(cfg: ComponentConfiguration): LocalStore {\n    return new MultiTabLocalStore(\n      this.persistence,\n      new IndexFreeQueryEngine(),\n      cfg.initialUser\n    );\n  }\n\n  createSyncEngine(cfg: ComponentConfiguration): SyncEngine {\n    const syncEngine = new MultiTabSyncEngine(\n      this.localStore,\n      this.remoteStore,\n      cfg.datastore,\n      this.sharedClientState,\n      cfg.initialUser,\n      cfg.maxConcurrentLimboResolutions\n    );\n    if (this.sharedClientState instanceof WebStorageSharedClientState) {\n      this.sharedClientState.syncEngine = syncEngine;\n    }\n    return syncEngine;\n  }\n\n  createGarbageCollectionScheduler(\n    cfg: ComponentConfiguration\n  ): GarbageCollectionScheduler | null {\n    const garbageCollector = this.persistence.referenceDelegate\n      .garbageCollector;\n    return new LruScheduler(garbageCollector, cfg.asyncQueue);\n  }\n\n  createPersistence(cfg: ComponentConfiguration): Persistence {\n    debugAssert(\n      cfg.persistenceSettings.durable,\n      'Can only start durable persistence'\n    );\n\n    const persistenceKey = IndexedDbPersistence.buildStoragePrefix(\n      cfg.databaseInfo\n    );\n    const serializer = cfg.platform.newSerializer(cfg.databaseInfo.databaseId);\n    return new IndexedDbPersistence(\n      cfg.persistenceSettings.synchronizeTabs,\n      persistenceKey,\n      cfg.clientId,\n      cfg.platform,\n      LruParams.withCacheSize(cfg.persistenceSettings.cacheSizeBytes),\n      cfg.asyncQueue,\n      serializer,\n      this.sharedClientState,\n      cfg.persistenceSettings.forceOwningTab\n    );\n  }\n\n  createSharedClientState(cfg: ComponentConfiguration): SharedClientState {\n    if (\n      cfg.persistenceSettings.durable &&\n      cfg.persistenceSettings.synchronizeTabs\n    ) {\n      if (!WebStorageSharedClientState.isAvailable(cfg.platform)) {\n        throw new FirestoreError(\n          Code.UNIMPLEMENTED,\n          'IndexedDB persistence is only available on platforms that support LocalStorage.'\n        );\n      }\n      const persistenceKey = IndexedDbPersistence.buildStoragePrefix(\n        cfg.databaseInfo\n      );\n      return new WebStorageSharedClientState(\n        cfg.asyncQueue,\n        cfg.platform,\n        persistenceKey,\n        cfg.clientId,\n        cfg.initialUser\n      );\n    }\n    return new MemorySharedClientState();\n  }\n\n  clearPersistence(databaseInfo: DatabaseInfo): Promise<void> {\n    const persistenceKey = IndexedDbPersistence.buildStoragePrefix(\n      databaseInfo\n    );\n    return IndexedDbPersistence.clearPersistence(persistenceKey);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CredentialsProvider } from '../api/credentials';\nimport { User } from '../auth/user';\nimport { LocalStore } from '../local/local_store';\nimport { GarbageCollectionScheduler, Persistence } from '../local/persistence';\nimport { Document, NoDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { Mutation } from '../model/mutation';\nimport { Platform } from '../platform/platform';\nimport { newDatastore } from '../remote/datastore';\nimport { RemoteStore } from '../remote/remote_store';\nimport { AsyncQueue, wrapInUserErrorIfRecoverable } from '../util/async_queue';\nimport { Code, FirestoreError } from '../util/error';\nimport { logDebug } from '../util/log';\nimport { Deferred } from '../util/promise';\nimport {\n  EventManager,\n  ListenOptions,\n  Observer,\n  QueryListener\n} from './event_manager';\nimport { SyncEngine } from './sync_engine';\nimport { View } from './view';\n\nimport { SharedClientState } from '../local/shared_client_state';\nimport { AutoId } from '../util/misc';\nimport { DatabaseId, DatabaseInfo } from './database_info';\nimport { Query } from './query';\nimport { Transaction } from './transaction';\nimport { ViewSnapshot } from './view_snapshot';\nimport {\n  ComponentProvider,\n  MemoryComponentProvider\n} from './component_provider';\n\nconst LOG_TAG = 'FirestoreClient';\nconst MAX_CONCURRENT_LIMBO_RESOLUTIONS = 100;\n\n/** DOMException error code constants. */\nconst DOM_EXCEPTION_INVALID_STATE = 11;\nconst DOM_EXCEPTION_ABORTED = 20;\nconst DOM_EXCEPTION_QUOTA_EXCEEDED = 22;\n\nexport type PersistenceSettings =\n  | {\n      readonly durable: false;\n    }\n  | {\n      readonly durable: true;\n      readonly cacheSizeBytes: number;\n      readonly synchronizeTabs: boolean;\n      readonly forceOwningTab: boolean;\n    };\n\n/**\n * FirestoreClient is a top-level class that constructs and owns all of the\n * pieces of the client SDK architecture. It is responsible for creating the\n * async queue that is shared by all of the other components in the system.\n */\nexport class FirestoreClient {\n  // NOTE: These should technically have '|undefined' in the types, since\n  // they're initialized asynchronously rather than in the constructor, but\n  // given that all work is done on the async queue and we assert that\n  // initialization completes before any other work is queued, we're cheating\n  // with the types rather than littering the code with '!' or unnecessary\n  // undefined checks.\n  private eventMgr!: EventManager;\n  private persistence!: Persistence;\n  private localStore!: LocalStore;\n  private remoteStore!: RemoteStore;\n  private syncEngine!: SyncEngine;\n  private gcScheduler!: GarbageCollectionScheduler | null;\n\n  // PORTING NOTE: SharedClientState is only used for multi-tab web.\n  private sharedClientState!: SharedClientState;\n\n  private readonly clientId = AutoId.newId();\n\n  constructor(\n    private platform: Platform,\n    private databaseInfo: DatabaseInfo,\n    private credentials: CredentialsProvider,\n    /**\n     * Asynchronous queue responsible for all of our internal processing. When\n     * we get incoming work from the user (via public API) or the network\n     * (incoming GRPC messages), we should always schedule onto this queue.\n     * This ensures all of our work is properly serialized (e.g. we don't\n     * start processing a new operation while the previous one is waiting for\n     * an async I/O to complete).\n     */\n    private asyncQueue: AsyncQueue\n  ) {}\n\n  /**\n   * Starts up the FirestoreClient, returning only whether or not enabling\n   * persistence succeeded.\n   *\n   * The intent here is to \"do the right thing\" as far as users are concerned.\n   * Namely, in cases where offline persistence is requested and possible,\n   * enable it, but otherwise fall back to persistence disabled. For the most\n   * part we expect this to succeed one way or the other so we don't expect our\n   * users to actually wait on the firestore.enablePersistence Promise since\n   * they generally won't care.\n   *\n   * Of course some users actually do care about whether or not persistence\n   * was successfully enabled, so the Promise returned from this method\n   * indicates this outcome.\n   *\n   * This presents a problem though: even before enablePersistence resolves or\n   * rejects, users may have made calls to e.g. firestore.collection() which\n   * means that the FirestoreClient in there will be available and will be\n   * enqueuing actions on the async queue.\n   *\n   * Meanwhile any failure of an operation on the async queue causes it to\n   * panic and reject any further work, on the premise that unhandled errors\n   * are fatal.\n   *\n   * Consequently the fallback is handled internally here in start, and if the\n   * fallback succeeds we signal success to the async queue even though the\n   * start() itself signals failure.\n   *\n   * @param componentProvider Provider that returns all core components.\n   * @param persistenceSettings Settings object to configure offline\n   *     persistence.\n   * @returns A deferred result indicating the user-visible result of enabling\n   *     offline persistence. This method will reject this if IndexedDB fails to\n   *     start for any reason. If usePersistence is false this is\n   *     unconditionally resolved.\n   */\n  start(\n    componentProvider: ComponentProvider,\n    persistenceSettings: PersistenceSettings\n  ): Promise<void> {\n    this.verifyNotTerminated();\n    // We defer our initialization until we get the current user from\n    // setChangeListener(). We block the async queue until we got the initial\n    // user and the initialization is completed. This will prevent any scheduled\n    // work from happening before initialization is completed.\n    //\n    // If initializationDone resolved then the FirestoreClient is in a usable\n    // state.\n    const initializationDone = new Deferred<void>();\n\n    // If usePersistence is true, certain classes of errors while starting are\n    // recoverable but only by falling back to persistence disabled.\n    //\n    // If there's an error in the first case but not in recovery we cannot\n    // reject the promise blocking the async queue because this will cause the\n    // async queue to panic.\n    const persistenceResult = new Deferred<void>();\n\n    let initialized = false;\n    this.credentials.setChangeListener(user => {\n      if (!initialized) {\n        initialized = true;\n\n        logDebug(LOG_TAG, 'Initializing. user=', user.uid);\n\n        return this.initializeComponents(\n          componentProvider,\n          persistenceSettings,\n          user,\n          persistenceResult\n        ).then(initializationDone.resolve, initializationDone.reject);\n      } else {\n        this.asyncQueue.enqueueRetryable(() => {\n          return this.handleCredentialChange(user);\n        });\n      }\n    });\n\n    // Block the async queue until initialization is done\n    this.asyncQueue.enqueueAndForget(() => {\n      return initializationDone.promise;\n    });\n\n    // Return only the result of enabling persistence. Note that this does not\n    // need to await the completion of initializationDone because the result of\n    // this method should not reflect any other kind of failure to start.\n    return persistenceResult.promise;\n  }\n\n  /** Enables the network connection and requeues all pending operations. */\n  enableNetwork(): Promise<void> {\n    this.verifyNotTerminated();\n    return this.asyncQueue.enqueue(() => {\n      return this.syncEngine.enableNetwork();\n    });\n  }\n\n  /**\n   * Initializes persistent storage, attempting to use IndexedDB if\n   * usePersistence is true or memory-only if false.\n   *\n   * If IndexedDB fails because it's already open in another tab or because the\n   * platform can't possibly support our implementation then this method rejects\n   * the persistenceResult and falls back on memory-only persistence.\n   *\n   * @param componentProvider The provider that provides all core componennts\n   *     for IndexedDB or memory-backed persistence\n   * @param persistenceSettings Settings object to configure offline persistence\n   * @param user The initial user\n   * @param persistenceResult A deferred result indicating the user-visible\n   *     result of enabling offline persistence. This method will reject this if\n   *     IndexedDB fails to start for any reason. If usePersistence is false\n   *     this is unconditionally resolved.\n   * @returns a Promise indicating whether or not initialization should\n   *     continue, i.e. that one of the persistence implementations actually\n   *     succeeded.\n   */\n  private async initializeComponents(\n    componentProvider: ComponentProvider,\n    persistenceSettings: PersistenceSettings,\n    user: User,\n    persistenceResult: Deferred<void>\n  ): Promise<void> {\n    try {\n      // TODO(mrschmidt): Ideally, ComponentProvider would also initialize\n      // Datastore (without duplicating the initializing logic once per\n      // provider).\n\n      const connection = await this.platform.loadConnection(this.databaseInfo);\n      const serializer = this.platform.newSerializer(\n        this.databaseInfo.databaseId\n      );\n      const datastore = newDatastore(connection, this.credentials, serializer);\n\n      await componentProvider.initialize({\n        asyncQueue: this.asyncQueue,\n        databaseInfo: this.databaseInfo,\n        platform: this.platform,\n        datastore,\n        clientId: this.clientId,\n        initialUser: user,\n        maxConcurrentLimboResolutions: MAX_CONCURRENT_LIMBO_RESOLUTIONS,\n        persistenceSettings\n      });\n\n      this.persistence = componentProvider.persistence;\n      this.sharedClientState = componentProvider.sharedClientState;\n      this.localStore = componentProvider.localStore;\n      this.remoteStore = componentProvider.remoteStore;\n      this.syncEngine = componentProvider.syncEngine;\n      this.gcScheduler = componentProvider.gcScheduler;\n      this.eventMgr = componentProvider.eventManager;\n\n      // When a user calls clearPersistence() in one client, all other clients\n      // need to be terminated to allow the delete to succeed.\n      this.persistence.setDatabaseDeletedListener(async () => {\n        await this.terminate();\n      });\n\n      persistenceResult.resolve();\n    } catch (error) {\n      // Regardless of whether or not the retry succeeds, from an user\n      // perspective, offline persistence has failed.\n      persistenceResult.reject(error);\n\n      // An unknown failure on the first stage shuts everything down.\n      if (!this.canFallback(error)) {\n        throw error;\n      }\n      console.warn(\n        'Error enabling offline persistence. Falling back to' +\n          ' persistence disabled: ' +\n          error\n      );\n      return this.initializeComponents(\n        new MemoryComponentProvider(),\n        { durable: false },\n        user,\n        persistenceResult\n      );\n    }\n  }\n\n  /**\n   * Decides whether the provided error allows us to gracefully disable\n   * persistence (as opposed to crashing the client).\n   */\n  private canFallback(error: FirestoreError | DOMException): boolean {\n    if (error.name === 'FirebaseError') {\n      return (\n        error.code === Code.FAILED_PRECONDITION ||\n        error.code === Code.UNIMPLEMENTED\n      );\n    } else if (\n      typeof DOMException !== 'undefined' &&\n      error instanceof DOMException\n    ) {\n      // There are a few known circumstances where we can open IndexedDb but\n      // trying to read/write will fail (e.g. quota exceeded). For\n      // well-understood cases, we attempt to detect these and then gracefully\n      // fall back to memory persistence.\n      // NOTE: Rather than continue to add to this list, we could decide to\n      // always fall back, with the risk that we might accidentally hide errors\n      // representing actual SDK bugs.\n      return (\n        // When the browser is out of quota we could get either quota exceeded\n        // or an aborted error depending on whether the error happened during\n        // schema migration.\n        error.code === DOM_EXCEPTION_QUOTA_EXCEEDED ||\n        error.code === DOM_EXCEPTION_ABORTED ||\n        // Firefox Private Browsing mode disables IndexedDb and returns\n        // INVALID_STATE for any usage.\n        error.code === DOM_EXCEPTION_INVALID_STATE\n      );\n    }\n\n    return true;\n  }\n\n  /**\n   * Checks that the client has not been terminated. Ensures that other methods on\n   * this class cannot be called after the client is terminated.\n   */\n  private verifyNotTerminated(): void {\n    if (this.asyncQueue.isShuttingDown) {\n      throw new FirestoreError(\n        Code.FAILED_PRECONDITION,\n        'The client has already been terminated.'\n      );\n    }\n  }\n\n  private handleCredentialChange(user: User): Promise<void> {\n    this.asyncQueue.verifyOperationInProgress();\n\n    logDebug(LOG_TAG, 'Credential Changed. Current user: ' + user.uid);\n    return this.syncEngine.handleCredentialChange(user);\n  }\n\n  /** Disables the network connection. Pending operations will not complete. */\n  disableNetwork(): Promise<void> {\n    this.verifyNotTerminated();\n    return this.asyncQueue.enqueue(() => {\n      return this.syncEngine.disableNetwork();\n    });\n  }\n\n  terminate(): Promise<void> {\n    return this.asyncQueue.enqueueAndInitiateShutdown(async () => {\n      // PORTING NOTE: LocalStore does not need an explicit shutdown on web.\n      if (this.gcScheduler) {\n        this.gcScheduler.stop();\n      }\n\n      await this.remoteStore.shutdown();\n      await this.sharedClientState.shutdown();\n      await this.persistence.shutdown();\n\n      // `removeChangeListener` must be called after shutting down the\n      // RemoteStore as it will prevent the RemoteStore from retrieving\n      // auth tokens.\n      this.credentials.removeChangeListener();\n    });\n  }\n\n  /**\n   * Returns a Promise that resolves when all writes that were pending at the time this\n   * method was called received server acknowledgement. An acknowledgement can be either acceptance\n   * or rejection.\n   */\n  waitForPendingWrites(): Promise<void> {\n    this.verifyNotTerminated();\n\n    const deferred = new Deferred<void>();\n    this.asyncQueue.enqueueAndForget(() => {\n      return this.syncEngine.registerPendingWritesCallback(deferred);\n    });\n    return deferred.promise;\n  }\n\n  listen(\n    query: Query,\n    observer: Observer<ViewSnapshot>,\n    options: ListenOptions\n  ): QueryListener {\n    this.verifyNotTerminated();\n    const listener = new QueryListener(query, observer, options);\n    this.asyncQueue.enqueueAndForget(() => this.eventMgr.listen(listener));\n    return listener;\n  }\n\n  unlisten(listener: QueryListener): void {\n    // Checks for termination but does not raise error, allowing unlisten after\n    // termination to be a no-op.\n    if (this.clientTerminated) {\n      return;\n    }\n    this.asyncQueue.enqueueAndForget(() => {\n      return this.eventMgr.unlisten(listener);\n    });\n  }\n\n  async getDocumentFromLocalCache(\n    docKey: DocumentKey\n  ): Promise<Document | null> {\n    this.verifyNotTerminated();\n    const deferred = new Deferred<Document | null>();\n    await this.asyncQueue.enqueue(async () => {\n      try {\n        const maybeDoc = await this.localStore.readDocument(docKey);\n        if (maybeDoc instanceof Document) {\n          deferred.resolve(maybeDoc);\n        } else if (maybeDoc instanceof NoDocument) {\n          deferred.resolve(null);\n        } else {\n          deferred.reject(\n            new FirestoreError(\n              Code.UNAVAILABLE,\n              'Failed to get document from cache. (However, this document may ' +\n                \"exist on the server. Run again without setting 'source' in \" +\n                'the GetOptions to attempt to retrieve the document from the ' +\n                'server.)'\n            )\n          );\n        }\n      } catch (e) {\n        const firestoreError = wrapInUserErrorIfRecoverable(\n          e,\n          `Failed to get document '${docKey} from cache`\n        );\n        deferred.reject(firestoreError);\n      }\n    });\n\n    return deferred.promise;\n  }\n\n  async getDocumentsFromLocalCache(query: Query): Promise<ViewSnapshot> {\n    this.verifyNotTerminated();\n    const deferred = new Deferred<ViewSnapshot>();\n    await this.asyncQueue.enqueue(async () => {\n      try {\n        const queryResult = await this.localStore.executeQuery(\n          query,\n          /* usePreviousResults= */ true\n        );\n        const view = new View(query, queryResult.remoteKeys);\n        const viewDocChanges = view.computeDocChanges(queryResult.documents);\n        const viewChange = view.applyChanges(\n          viewDocChanges,\n          /* updateLimboDocuments= */ false\n        );\n        deferred.resolve(viewChange.snapshot!);\n      } catch (e) {\n        const firestoreError = wrapInUserErrorIfRecoverable(\n          e,\n          `Failed to execute query '${query} against cache`\n        );\n        deferred.reject(firestoreError);\n      }\n    });\n    return deferred.promise;\n  }\n\n  write(mutations: Mutation[]): Promise<void> {\n    this.verifyNotTerminated();\n    const deferred = new Deferred<void>();\n    this.asyncQueue.enqueueAndForget(() =>\n      this.syncEngine.write(mutations, deferred)\n    );\n    return deferred.promise;\n  }\n\n  databaseId(): DatabaseId {\n    return this.databaseInfo.databaseId;\n  }\n\n  addSnapshotsInSyncListener(observer: Observer<void>): void {\n    this.verifyNotTerminated();\n    this.asyncQueue.enqueueAndForget(() => {\n      this.eventMgr.addSnapshotsInSyncListener(observer);\n      return Promise.resolve();\n    });\n  }\n\n  removeSnapshotsInSyncListener(observer: Observer<void>): void {\n    // Checks for shutdown but does not raise error, allowing remove after\n    // shutdown to be a no-op.\n    if (this.clientTerminated) {\n      return;\n    }\n    this.asyncQueue.enqueueAndForget(() => {\n      this.eventMgr.removeSnapshotsInSyncListener(observer);\n      return Promise.resolve();\n    });\n  }\n\n  get clientTerminated(): boolean {\n    // Technically, the asyncQueue is still running, but only accepting operations\n    // related to termination or supposed to be run after termination. It is effectively\n    // terminated to the eyes of users.\n    return this.asyncQueue.isShuttingDown;\n  }\n\n  transaction<T>(\n    updateFunction: (transaction: Transaction) => Promise<T>\n  ): Promise<T> {\n    this.verifyNotTerminated();\n    const deferred = new Deferred<T>();\n    this.asyncQueue.enqueueAndForget(() => {\n      this.syncEngine.runTransaction(this.asyncQueue, updateFunction, deferred);\n      return Promise.resolve();\n    });\n    return deferred.promise;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Observer } from '../core/event_manager';\nimport { EventHandler } from './misc';\n\n/*\n * A wrapper implementation of Observer<T> that will dispatch events\n * asynchronously. To allow immediate silencing, a mute call is added which\n * causes events scheduled to no longer be raised.\n */\nexport class AsyncObserver<T> implements Observer<T> {\n  /**\n   * When set to true, will not raise future events. Necessary to deal with\n   * async detachment of listener.\n   */\n  private muted = false;\n\n  constructor(private observer: Observer<T>) {}\n\n  next(value: T): void {\n    this.scheduleEvent(this.observer.next, value);\n  }\n\n  error(error: Error): void {\n    this.scheduleEvent(this.observer.error, error);\n  }\n\n  mute(): void {\n    this.muted = true;\n  }\n\n  private scheduleEvent<E>(eventHandler: EventHandler<E>, event: E): void {\n    if (!this.muted) {\n      setTimeout(() => {\n        if (!this.muted) {\n          eventHandler(event);\n        }\n      }, 0);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { JsonObject } from '../model/object_value';\n\n/**\n * Observer/Subscribe interfaces.\n */\nexport type NextFn<T> = (value: T) => void;\nexport type ErrorFn = (error: Error) => void;\nexport type CompleteFn = () => void;\n\n// Allow for any of the Observer methods to be undefined.\nexport interface PartialObserver<T> {\n  next?: NextFn<T>;\n  error?: ErrorFn;\n  complete?: CompleteFn;\n}\n\nexport interface Unsubscribe {\n  (): void;\n}\n\nexport function isPartialObserver(obj: unknown): boolean {\n  return implementsAnyMethods(obj, ['next', 'error', 'complete']);\n}\n\n/**\n * Returns true if obj is an object and contains at least one of the specified\n * methods.\n */\nfunction implementsAnyMethods(obj: unknown, methods: string[]): boolean {\n  if (typeof obj !== 'object' || obj === null) {\n    return false;\n  }\n\n  const object = obj as JsonObject<unknown>;\n  for (const method of methods) {\n    if (method in object && typeof object[method] === 'function') {\n      return true;\n    }\n  }\n  return false;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as firestore from '@firebase/firestore-types';\n\nimport * as api from '../protos/firestore_proto_api';\n\nimport { DocumentKeyReference } from './user_data_reader';\nimport { Blob } from './blob';\nimport { GeoPoint } from './geo_point';\nimport { Timestamp } from './timestamp';\nimport { DatabaseId } from '../core/database_info';\nimport { DocumentKey } from '../model/document_key';\nimport {\n  normalizeByteString,\n  normalizeNumber,\n  normalizeTimestamp,\n  typeOrder\n} from '../model/values';\nimport {\n  getLocalWriteTime,\n  getPreviousValue\n} from '../model/server_timestamps';\nimport { fail, hardAssert } from '../util/assert';\nimport { forEach } from '../util/obj';\nimport { TypeOrder } from '../model/object_value';\nimport { ResourcePath } from '../model/path';\nimport { isValidResourceName } from '../remote/serializer';\nimport { logError } from '../util/log';\n\nexport type ServerTimestampBehavior = 'estimate' | 'previous' | 'none';\n\n/**\n * Converts Firestore's internal types to the JavaScript types that we expose\n * to the user.\n */\nexport class UserDataWriter {\n  constructor(\n    private readonly databaseId: DatabaseId,\n    private readonly timestampsInSnapshots: boolean,\n    private readonly serverTimestampBehavior: ServerTimestampBehavior,\n    private readonly referenceFactory: (\n      key: DocumentKey\n    ) => DocumentKeyReference<firestore.DocumentData>\n  ) {}\n\n  convertValue(value: api.Value): unknown {\n    switch (typeOrder(value)) {\n      case TypeOrder.NullValue:\n        return null;\n      case TypeOrder.BooleanValue:\n        return value.booleanValue!;\n      case TypeOrder.NumberValue:\n        return normalizeNumber(value.integerValue || value.doubleValue);\n      case TypeOrder.TimestampValue:\n        return this.convertTimestamp(value.timestampValue!);\n      case TypeOrder.ServerTimestampValue:\n        return this.convertServerTimestamp(value);\n      case TypeOrder.StringValue:\n        return value.stringValue!;\n      case TypeOrder.BlobValue:\n        return new Blob(normalizeByteString(value.bytesValue!));\n      case TypeOrder.RefValue:\n        return this.convertReference(value.referenceValue!);\n      case TypeOrder.GeoPointValue:\n        return this.convertGeoPoint(value.geoPointValue!);\n      case TypeOrder.ArrayValue:\n        return this.convertArray(value.arrayValue!);\n      case TypeOrder.ObjectValue:\n        return this.convertObject(value.mapValue!);\n      default:\n        throw fail('Invalid value type: ' + JSON.stringify(value));\n    }\n  }\n\n  private convertObject(mapValue: api.MapValue): firestore.DocumentData {\n    const result: firestore.DocumentData = {};\n    forEach(mapValue.fields || {}, (key, value) => {\n      result[key] = this.convertValue(value);\n    });\n    return result;\n  }\n\n  private convertGeoPoint(value: api.LatLng): GeoPoint {\n    return new GeoPoint(\n      normalizeNumber(value.latitude),\n      normalizeNumber(value.longitude)\n    );\n  }\n\n  private convertArray(arrayValue: api.ArrayValue): unknown[] {\n    return (arrayValue.values || []).map(value => this.convertValue(value));\n  }\n\n  private convertServerTimestamp(value: api.Value): unknown {\n    switch (this.serverTimestampBehavior) {\n      case 'previous':\n        const previousValue = getPreviousValue(value);\n        if (previousValue == null) {\n          return null;\n        }\n        return this.convertValue(previousValue);\n      case 'estimate':\n        return this.convertTimestamp(getLocalWriteTime(value));\n      default:\n        return null;\n    }\n  }\n\n  private convertTimestamp(value: api.Timestamp): Timestamp | Date {\n    const normalizedValue = normalizeTimestamp(value);\n    const timestamp = new Timestamp(\n      normalizedValue.seconds,\n      normalizedValue.nanos\n    );\n    if (this.timestampsInSnapshots) {\n      return timestamp;\n    } else {\n      return timestamp.toDate();\n    }\n  }\n\n  private convertReference(\n    name: string\n  ): DocumentKeyReference<firestore.DocumentData> {\n    const resourcePath = ResourcePath.fromString(name);\n    hardAssert(\n      isValidResourceName(resourcePath),\n      'ReferenceValue is not valid ' + name\n    );\n    const databaseId = new DatabaseId(resourcePath.get(1), resourcePath.get(3));\n    const key = new DocumentKey(resourcePath.popFirst(5));\n\n    if (!databaseId.isEqual(this.databaseId)) {\n      // TODO(b/64130202): Somehow support foreign references.\n      logError(\n        `Document ${key} contains a document ` +\n          `reference within a different database (` +\n          `${databaseId.projectId}/${databaseId.database}) which is not ` +\n          `supported. It will be treated as a reference in the current ` +\n          `database (${this.databaseId.projectId}/${this.databaseId.database}) ` +\n          `instead.`\n      );\n    }\n\n    return this.referenceFactory(key);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as firestore from '@firebase/firestore-types';\n\nimport * as api from '../protos/firestore_proto_api';\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport { _FirebaseApp, FirebaseService } from '@firebase/app-types/private';\nimport { DatabaseId, DatabaseInfo } from '../core/database_info';\nimport { ListenOptions } from '../core/event_manager';\nimport {\n  ComponentProvider,\n  MemoryComponentProvider\n} from '../core/component_provider';\nimport { FirestoreClient, PersistenceSettings } from '../core/firestore_client';\nimport {\n  Bound,\n  Direction,\n  FieldFilter,\n  Filter,\n  Operator,\n  OrderBy,\n  Query as InternalQuery\n} from '../core/query';\nimport { Transaction as InternalTransaction } from '../core/transaction';\nimport { ChangeType, ViewSnapshot } from '../core/view_snapshot';\nimport { LruParams } from '../local/lru_garbage_collector';\nimport { Document, MaybeDocument, NoDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { DeleteMutation, Mutation, Precondition } from '../model/mutation';\nimport { FieldPath, ResourcePath } from '../model/path';\nimport { isServerTimestamp } from '../model/server_timestamps';\nimport { refValue } from '../model/values';\nimport { PlatformSupport } from '../platform/platform';\nimport { debugAssert, fail } from '../util/assert';\nimport { AsyncObserver } from '../util/async_observer';\nimport { AsyncQueue } from '../util/async_queue';\nimport { Code, FirestoreError } from '../util/error';\nimport {\n  invalidClassError,\n  validateArgType,\n  validateAtLeastNumberOfArgs,\n  validateBetweenNumberOfArgs,\n  validateDefined,\n  validateExactNumberOfArgs,\n  validateNamedOptionalPropertyEquals,\n  validateNamedOptionalType,\n  validateNamedType,\n  validateOptionalArgType,\n  validateOptionalArrayElements,\n  validateOptionNames,\n  validatePositiveNumber,\n  validateStringEnum,\n  valueDescription\n} from '../util/input_validation';\nimport { getLogLevel, logError, LogLevel, setLogLevel } from '../util/log';\nimport { AutoId } from '../util/misc';\nimport { Deferred, Rejecter, Resolver } from '../util/promise';\nimport { FieldPath as ExternalFieldPath } from './field_path';\n\nimport {\n  CredentialsProvider,\n  CredentialsSettings,\n  EmptyCredentialsProvider,\n  FirebaseCredentialsProvider,\n  makeCredentialsProvider\n} from './credentials';\nimport {\n  CompleteFn,\n  ErrorFn,\n  isPartialObserver,\n  NextFn,\n  PartialObserver,\n  Unsubscribe\n} from './observer';\nimport {\n  DocumentKeyReference,\n  fieldPathFromArgument,\n  UntypedFirestoreDataConverter,\n  UserDataReader\n} from './user_data_reader';\nimport { UserDataWriter } from './user_data_writer';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport { Provider } from '@firebase/component';\n\n// settings() defaults:\nconst DEFAULT_HOST = 'firestore.googleapis.com';\nconst DEFAULT_SSL = true;\nconst DEFAULT_TIMESTAMPS_IN_SNAPSHOTS = true;\nconst DEFAULT_FORCE_LONG_POLLING = false;\nconst DEFAULT_IGNORE_UNDEFINED_PROPERTIES = false;\n\n/**\n * Constant used to indicate the LRU garbage collection should be disabled.\n * Set this value as the `cacheSizeBytes` on the settings passed to the\n * `Firestore` instance.\n */\nexport const CACHE_SIZE_UNLIMITED = LruParams.COLLECTION_DISABLED;\n\n// enablePersistence() defaults:\nconst DEFAULT_SYNCHRONIZE_TABS = false;\n\n/** Undocumented, private additional settings not exposed in our public API. */\ninterface PrivateSettings extends firestore.Settings {\n  // Can be a google-auth-library or gapi client.\n  credentials?: CredentialsSettings;\n}\n\n/**\n * Options that can be provided in the Firestore constructor when not using\n * Firebase (aka standalone mode).\n */\nexport interface FirestoreDatabase {\n  projectId: string;\n  database?: string;\n}\n\n/**\n * A concrete type describing all the values that can be applied via a\n * user-supplied firestore.Settings object. This is a separate type so that\n * defaults can be supplied and the value can be checked for equality.\n */\nclass FirestoreSettings {\n  /** The hostname to connect to. */\n  readonly host: string;\n\n  /** Whether to use SSL when connecting. */\n  readonly ssl: boolean;\n\n  readonly timestampsInSnapshots: boolean;\n\n  readonly cacheSizeBytes: number;\n\n  readonly forceLongPolling: boolean;\n\n  readonly ignoreUndefinedProperties: boolean;\n\n  // Can be a google-auth-library or gapi client.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  credentials?: any;\n\n  constructor(settings: PrivateSettings) {\n    if (settings.host === undefined) {\n      if (settings.ssl !== undefined) {\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          \"Can't provide ssl option if host option is not set\"\n        );\n      }\n      this.host = DEFAULT_HOST;\n      this.ssl = DEFAULT_SSL;\n    } else {\n      validateNamedType('settings', 'non-empty string', 'host', settings.host);\n      this.host = settings.host;\n\n      validateNamedOptionalType('settings', 'boolean', 'ssl', settings.ssl);\n      this.ssl = settings.ssl ?? DEFAULT_SSL;\n    }\n    validateOptionNames('settings', settings, [\n      'host',\n      'ssl',\n      'credentials',\n      'timestampsInSnapshots',\n      'cacheSizeBytes',\n      'experimentalForceLongPolling',\n      'ignoreUndefinedProperties'\n    ]);\n\n    validateNamedOptionalType(\n      'settings',\n      'object',\n      'credentials',\n      settings.credentials\n    );\n    this.credentials = settings.credentials;\n\n    validateNamedOptionalType(\n      'settings',\n      'boolean',\n      'timestampsInSnapshots',\n      settings.timestampsInSnapshots\n    );\n\n    validateNamedOptionalType(\n      'settings',\n      'boolean',\n      'ignoreUndefinedProperties',\n      settings.ignoreUndefinedProperties\n    );\n\n    // Nobody should set timestampsInSnapshots anymore, but the error depends on\n    // whether they set it to true or false...\n    if (settings.timestampsInSnapshots === true) {\n      logError(\n        \"The setting 'timestampsInSnapshots: true' is no longer required \" +\n          'and should be removed.'\n      );\n    } else if (settings.timestampsInSnapshots === false) {\n      logError(\n        \"Support for 'timestampsInSnapshots: false' will be removed soon. \" +\n          'You must update your code to handle Timestamp objects.'\n      );\n    }\n    this.timestampsInSnapshots =\n      settings.timestampsInSnapshots ?? DEFAULT_TIMESTAMPS_IN_SNAPSHOTS;\n    this.ignoreUndefinedProperties =\n      settings.ignoreUndefinedProperties ?? DEFAULT_IGNORE_UNDEFINED_PROPERTIES;\n\n    validateNamedOptionalType(\n      'settings',\n      'number',\n      'cacheSizeBytes',\n      settings.cacheSizeBytes\n    );\n    if (settings.cacheSizeBytes === undefined) {\n      this.cacheSizeBytes = LruParams.DEFAULT_CACHE_SIZE_BYTES;\n    } else {\n      if (\n        settings.cacheSizeBytes !== CACHE_SIZE_UNLIMITED &&\n        settings.cacheSizeBytes < LruParams.MINIMUM_CACHE_SIZE_BYTES\n      ) {\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          `cacheSizeBytes must be at least ${LruParams.MINIMUM_CACHE_SIZE_BYTES}`\n        );\n      } else {\n        this.cacheSizeBytes = settings.cacheSizeBytes;\n      }\n    }\n\n    validateNamedOptionalType(\n      'settings',\n      'boolean',\n      'experimentalForceLongPolling',\n      settings.experimentalForceLongPolling\n    );\n    this.forceLongPolling =\n      settings.experimentalForceLongPolling ?? DEFAULT_FORCE_LONG_POLLING;\n  }\n\n  isEqual(other: FirestoreSettings): boolean {\n    return (\n      this.host === other.host &&\n      this.ssl === other.ssl &&\n      this.timestampsInSnapshots === other.timestampsInSnapshots &&\n      this.credentials === other.credentials &&\n      this.cacheSizeBytes === other.cacheSizeBytes &&\n      this.forceLongPolling === other.forceLongPolling &&\n      this.ignoreUndefinedProperties === other.ignoreUndefinedProperties\n    );\n  }\n}\n\n/**\n * The root reference to the database.\n */\nexport class Firestore implements firestore.FirebaseFirestore, FirebaseService {\n  // The objects that are a part of this API are exposed to third-parties as\n  // compiled javascript so we want to flag our private members with a leading\n  // underscore to discourage their use.\n  readonly _databaseId: DatabaseId;\n  private readonly _persistenceKey: string;\n  private readonly _componentProvider: ComponentProvider;\n  private _credentials: CredentialsProvider;\n  private readonly _firebaseApp: FirebaseApp | null = null;\n  private _settings: FirestoreSettings;\n\n  // The firestore client instance. This will be available as soon as\n  // configureClient is called, but any calls against it will block until\n  // setup has completed.\n  //\n  // Operations on the _firestoreClient don't block on _firestoreReady. Those\n  // are already set to synchronize on the async queue.\n  private _firestoreClient: FirestoreClient | undefined;\n\n  // Public for use in tests.\n  // TODO(mikelehen): Use modularized initialization instead.\n  readonly _queue = new AsyncQueue();\n\n  _userDataReader: UserDataReader | undefined;\n\n  // Note: We are using `MemoryComponentProvider` as a default\n  // ComponentProvider to ensure backwards compatibility with the format\n  // expected by the console build.\n  constructor(\n    databaseIdOrApp: FirestoreDatabase | FirebaseApp,\n    authProvider: Provider<FirebaseAuthInternalName>,\n    componentProvider: ComponentProvider = new MemoryComponentProvider()\n  ) {\n    if (typeof (databaseIdOrApp as FirebaseApp).options === 'object') {\n      // This is very likely a Firebase app object\n      // TODO(b/34177605): Can we somehow use instanceof?\n      const app = databaseIdOrApp as FirebaseApp;\n      this._firebaseApp = app;\n      this._databaseId = Firestore.databaseIdFromApp(app);\n      this._persistenceKey = app.name;\n      this._credentials = new FirebaseCredentialsProvider(authProvider);\n    } else {\n      const external = databaseIdOrApp as FirestoreDatabase;\n      if (!external.projectId) {\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          'Must provide projectId'\n        );\n      }\n\n      this._databaseId = new DatabaseId(external.projectId, external.database);\n      // Use a default persistenceKey that lines up with FirebaseApp.\n      this._persistenceKey = '[DEFAULT]';\n      this._credentials = new EmptyCredentialsProvider();\n    }\n\n    this._componentProvider = componentProvider;\n    this._settings = new FirestoreSettings({});\n  }\n\n  get _dataReader(): UserDataReader {\n    debugAssert(\n      !!this._firestoreClient,\n      'Cannot obtain UserDataReader before instance is intitialized'\n    );\n    if (!this._userDataReader) {\n      // Lazy initialize UserDataReader once the settings are frozen\n      this._userDataReader = new UserDataReader(\n        this._databaseId,\n        this._settings.ignoreUndefinedProperties\n      );\n    }\n    return this._userDataReader;\n  }\n\n  settings(settingsLiteral: firestore.Settings): void {\n    validateExactNumberOfArgs('Firestore.settings', arguments, 1);\n    validateArgType('Firestore.settings', 'object', 1, settingsLiteral);\n\n    const newSettings = new FirestoreSettings(settingsLiteral);\n    if (this._firestoreClient && !this._settings.isEqual(newSettings)) {\n      throw new FirestoreError(\n        Code.FAILED_PRECONDITION,\n        'Firestore has already been started and its settings can no longer ' +\n          'be changed. You can only call settings() before calling any other ' +\n          'methods on a Firestore object.'\n      );\n    }\n\n    this._settings = newSettings;\n    if (newSettings.credentials !== undefined) {\n      this._credentials = makeCredentialsProvider(newSettings.credentials);\n    }\n  }\n\n  enableNetwork(): Promise<void> {\n    this.ensureClientConfigured();\n    return this._firestoreClient!.enableNetwork();\n  }\n\n  disableNetwork(): Promise<void> {\n    this.ensureClientConfigured();\n    return this._firestoreClient!.disableNetwork();\n  }\n\n  enablePersistence(settings?: firestore.PersistenceSettings): Promise<void> {\n    if (this._firestoreClient) {\n      throw new FirestoreError(\n        Code.FAILED_PRECONDITION,\n        'Firestore has already been started and persistence can no longer ' +\n          'be enabled. You can only call enablePersistence() before calling ' +\n          'any other methods on a Firestore object.'\n      );\n    }\n\n    let synchronizeTabs = false;\n    let experimentalForceOwningTab = false;\n\n    if (settings) {\n      if (settings.experimentalTabSynchronization !== undefined) {\n        logError(\n          \"The 'experimentalTabSynchronization' setting will be removed. Use 'synchronizeTabs' instead.\"\n        );\n      }\n      synchronizeTabs =\n        settings.synchronizeTabs ??\n        settings.experimentalTabSynchronization ??\n        DEFAULT_SYNCHRONIZE_TABS;\n\n      experimentalForceOwningTab = settings.experimentalForceOwningTab\n        ? settings.experimentalForceOwningTab\n        : false;\n\n      if (synchronizeTabs && experimentalForceOwningTab) {\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          \"The 'experimentalForceOwningTab' setting cannot be used with 'synchronizeTabs'.\"\n        );\n      }\n    }\n\n    return this.configureClient(this._componentProvider, {\n      durable: true,\n      cacheSizeBytes: this._settings.cacheSizeBytes,\n      synchronizeTabs,\n      forceOwningTab: experimentalForceOwningTab\n    });\n  }\n\n  async clearPersistence(): Promise<void> {\n    if (\n      this._firestoreClient !== undefined &&\n      !this._firestoreClient.clientTerminated\n    ) {\n      throw new FirestoreError(\n        Code.FAILED_PRECONDITION,\n        'Persistence cannot be cleared after this Firestore instance is initialized.'\n      );\n    }\n\n    const deferred = new Deferred<void>();\n    this._queue.enqueueAndForgetEvenAfterShutdown(async () => {\n      try {\n        const databaseInfo = this.makeDatabaseInfo();\n        await this._componentProvider.clearPersistence(databaseInfo);\n        deferred.resolve();\n      } catch (e) {\n        deferred.reject(e);\n      }\n    });\n    return deferred.promise;\n  }\n\n  terminate(): Promise<void> {\n    (this.app as _FirebaseApp)._removeServiceInstance('firestore');\n    return this.INTERNAL.delete();\n  }\n\n  get _isTerminated(): boolean {\n    this.ensureClientConfigured();\n    return this._firestoreClient!.clientTerminated;\n  }\n\n  waitForPendingWrites(): Promise<void> {\n    this.ensureClientConfigured();\n    return this._firestoreClient!.waitForPendingWrites();\n  }\n\n  onSnapshotsInSync(observer: PartialObserver<void>): Unsubscribe;\n  onSnapshotsInSync(onSync: () => void): Unsubscribe;\n  onSnapshotsInSync(arg: unknown): Unsubscribe {\n    this.ensureClientConfigured();\n\n    if (isPartialObserver(arg)) {\n      return this.onSnapshotsInSyncInternal(arg as PartialObserver<void>);\n    } else {\n      validateArgType('Firestore.onSnapshotsInSync', 'function', 1, arg);\n      const observer: PartialObserver<void> = {\n        next: arg as () => void\n      };\n      return this.onSnapshotsInSyncInternal(observer);\n    }\n  }\n\n  private onSnapshotsInSyncInternal(\n    observer: PartialObserver<void>\n  ): Unsubscribe {\n    const errHandler = (err: Error): void => {\n      throw fail('Uncaught Error in onSnapshotsInSync');\n    };\n    const asyncObserver = new AsyncObserver<void>({\n      next: () => {\n        if (observer.next) {\n          observer.next();\n        }\n      },\n      error: errHandler\n    });\n    this._firestoreClient!.addSnapshotsInSyncListener(asyncObserver);\n    return () => {\n      asyncObserver.mute();\n      this._firestoreClient!.removeSnapshotsInSyncListener(asyncObserver);\n    };\n  }\n\n  ensureClientConfigured(): FirestoreClient {\n    if (!this._firestoreClient) {\n      // Kick off starting the client but don't actually wait for it.\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this.configureClient(new MemoryComponentProvider(), {\n        durable: false\n      });\n    }\n    return this._firestoreClient as FirestoreClient;\n  }\n\n  private makeDatabaseInfo(): DatabaseInfo {\n    return new DatabaseInfo(\n      this._databaseId,\n      this._persistenceKey,\n      this._settings.host,\n      this._settings.ssl,\n      this._settings.forceLongPolling\n    );\n  }\n\n  private configureClient(\n    componentProvider: ComponentProvider,\n    persistenceSettings: PersistenceSettings\n  ): Promise<void> {\n    debugAssert(!!this._settings.host, 'FirestoreSettings.host is not set');\n\n    debugAssert(\n      !this._firestoreClient,\n      'configureClient() called multiple times'\n    );\n\n    const databaseInfo = this.makeDatabaseInfo();\n\n    this._firestoreClient = new FirestoreClient(\n      PlatformSupport.getPlatform(),\n      databaseInfo,\n      this._credentials,\n      this._queue\n    );\n\n    return this._firestoreClient.start(componentProvider, persistenceSettings);\n  }\n\n  private static databaseIdFromApp(app: FirebaseApp): DatabaseId {\n    if (!contains(app.options, 'projectId')) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        '\"projectId\" not provided in firebase.initializeApp.'\n      );\n    }\n\n    const projectId = app.options.projectId;\n    if (!projectId || typeof projectId !== 'string') {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'projectId must be a string in FirebaseApp.options'\n      );\n    }\n    return new DatabaseId(projectId);\n  }\n\n  get app(): FirebaseApp {\n    if (!this._firebaseApp) {\n      throw new FirestoreError(\n        Code.FAILED_PRECONDITION,\n        \"Firestore was not initialized using the Firebase SDK. 'app' is \" +\n          'not available'\n      );\n    }\n    return this._firebaseApp;\n  }\n\n  INTERNAL = {\n    delete: async (): Promise<void> => {\n      // The client must be initalized to ensure that all subsequent API usage\n      // throws an exception.\n      this.ensureClientConfigured();\n      await this._firestoreClient!.terminate();\n    }\n  };\n\n  collection(pathString: string): firestore.CollectionReference {\n    validateExactNumberOfArgs('Firestore.collection', arguments, 1);\n    validateArgType('Firestore.collection', 'non-empty string', 1, pathString);\n    this.ensureClientConfigured();\n    return new CollectionReference(\n      ResourcePath.fromString(pathString),\n      this,\n      /* converter= */ null\n    );\n  }\n\n  doc(pathString: string): firestore.DocumentReference {\n    validateExactNumberOfArgs('Firestore.doc', arguments, 1);\n    validateArgType('Firestore.doc', 'non-empty string', 1, pathString);\n    this.ensureClientConfigured();\n    return DocumentReference.forPath(\n      ResourcePath.fromString(pathString),\n      this,\n      /* converter= */ null\n    );\n  }\n\n  collectionGroup(collectionId: string): firestore.Query {\n    validateExactNumberOfArgs('Firestore.collectionGroup', arguments, 1);\n    validateArgType(\n      'Firestore.collectionGroup',\n      'non-empty string',\n      1,\n      collectionId\n    );\n    if (collectionId.indexOf('/') >= 0) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        `Invalid collection ID '${collectionId}' passed to function ` +\n          `Firestore.collectionGroup(). Collection IDs must not contain '/'.`\n      );\n    }\n    this.ensureClientConfigured();\n    return new Query(\n      new InternalQuery(ResourcePath.EMPTY_PATH, collectionId),\n      this,\n      /* converter= */ null\n    );\n  }\n\n  runTransaction<T>(\n    updateFunction: (transaction: firestore.Transaction) => Promise<T>\n  ): Promise<T> {\n    validateExactNumberOfArgs('Firestore.runTransaction', arguments, 1);\n    validateArgType('Firestore.runTransaction', 'function', 1, updateFunction);\n    return this.ensureClientConfigured().transaction(\n      (transaction: InternalTransaction) => {\n        return updateFunction(new Transaction(this, transaction));\n      }\n    );\n  }\n\n  batch(): firestore.WriteBatch {\n    this.ensureClientConfigured();\n\n    return new WriteBatch(this);\n  }\n\n  static get logLevel(): firestore.LogLevel {\n    switch (getLogLevel()) {\n      case LogLevel.DEBUG:\n        return 'debug';\n      case LogLevel.ERROR:\n        return 'error';\n      case LogLevel.SILENT:\n        return 'silent';\n      case LogLevel.WARN:\n        return 'warn';\n      case LogLevel.INFO:\n        return 'info';\n      case LogLevel.VERBOSE:\n        return 'verbose';\n      default:\n        // The default log level is error\n        return 'error';\n    }\n  }\n\n  static setLogLevel(level: firestore.LogLevel): void {\n    validateExactNumberOfArgs('Firestore.setLogLevel', arguments, 1);\n    validateStringEnum(\n      'setLogLevel',\n      ['debug', 'error', 'silent', 'warn', 'info', 'verbose'],\n      1,\n      level\n    );\n    setLogLevel(level);\n  }\n\n  // Note: this is not a property because the minifier can't work correctly with\n  // the way TypeScript compiler outputs properties.\n  _areTimestampsInSnapshotsEnabled(): boolean {\n    return this._settings.timestampsInSnapshots;\n  }\n}\n\n/**\n * A reference to a transaction.\n */\nexport class Transaction implements firestore.Transaction {\n  constructor(\n    private _firestore: Firestore,\n    private _transaction: InternalTransaction\n  ) {}\n\n  get<T>(\n    documentRef: firestore.DocumentReference<T>\n  ): Promise<firestore.DocumentSnapshot<T>> {\n    validateExactNumberOfArgs('Transaction.get', arguments, 1);\n    const ref = validateReference(\n      'Transaction.get',\n      documentRef,\n      this._firestore\n    );\n    return this._transaction\n      .lookup([ref._key])\n      .then((docs: MaybeDocument[]) => {\n        if (!docs || docs.length !== 1) {\n          return fail('Mismatch in docs returned from document lookup.');\n        }\n        const doc = docs[0];\n        if (doc instanceof NoDocument) {\n          return new DocumentSnapshot<T>(\n            this._firestore,\n            ref._key,\n            null,\n            /* fromCache= */ false,\n            /* hasPendingWrites= */ false,\n            ref._converter\n          );\n        } else if (doc instanceof Document) {\n          return new DocumentSnapshot<T>(\n            this._firestore,\n            ref._key,\n            doc,\n            /* fromCache= */ false,\n            /* hasPendingWrites= */ false,\n            ref._converter\n          );\n        } else {\n          throw fail(\n            `BatchGetDocumentsRequest returned unexpected document type: ${doc.constructor.name}`\n          );\n        }\n      });\n  }\n\n  set<T>(\n    documentRef: firestore.DocumentReference<T>,\n    value: T,\n    options?: firestore.SetOptions\n  ): Transaction {\n    validateBetweenNumberOfArgs('Transaction.set', arguments, 2, 3);\n    const ref = validateReference(\n      'Transaction.set',\n      documentRef,\n      this._firestore\n    );\n    options = validateSetOptions('Transaction.set', options);\n    const [convertedValue, functionName] = applyFirestoreDataConverter(\n      ref._converter,\n      value,\n      'Transaction.set'\n    );\n    const parsed = this._firestore._dataReader.parseSetData(\n      functionName,\n      convertedValue,\n      options\n    );\n    this._transaction.set(ref._key, parsed);\n    return this;\n  }\n\n  update(\n    documentRef: firestore.DocumentReference<unknown>,\n    value: firestore.UpdateData\n  ): Transaction;\n  update(\n    documentRef: firestore.DocumentReference<unknown>,\n    field: string | ExternalFieldPath,\n    value: unknown,\n    ...moreFieldsAndValues: unknown[]\n  ): Transaction;\n  update(\n    documentRef: firestore.DocumentReference<unknown>,\n    fieldOrUpdateData: string | ExternalFieldPath | firestore.UpdateData,\n    value?: unknown,\n    ...moreFieldsAndValues: unknown[]\n  ): Transaction {\n    let ref;\n    let parsed;\n\n    if (\n      typeof fieldOrUpdateData === 'string' ||\n      fieldOrUpdateData instanceof ExternalFieldPath\n    ) {\n      validateAtLeastNumberOfArgs('Transaction.update', arguments, 3);\n      ref = validateReference(\n        'Transaction.update',\n        documentRef,\n        this._firestore\n      );\n      parsed = this._firestore._dataReader.parseUpdateVarargs(\n        'Transaction.update',\n        fieldOrUpdateData,\n        value,\n        moreFieldsAndValues\n      );\n    } else {\n      validateExactNumberOfArgs('Transaction.update', arguments, 2);\n      ref = validateReference(\n        'Transaction.update',\n        documentRef,\n        this._firestore\n      );\n      parsed = this._firestore._dataReader.parseUpdateData(\n        'Transaction.update',\n        fieldOrUpdateData\n      );\n    }\n\n    this._transaction.update(ref._key, parsed);\n    return this;\n  }\n\n  delete(documentRef: firestore.DocumentReference<unknown>): Transaction {\n    validateExactNumberOfArgs('Transaction.delete', arguments, 1);\n    const ref = validateReference(\n      'Transaction.delete',\n      documentRef,\n      this._firestore\n    );\n    this._transaction.delete(ref._key);\n    return this;\n  }\n}\n\nexport class WriteBatch implements firestore.WriteBatch {\n  private _mutations = [] as Mutation[];\n  private _committed = false;\n\n  constructor(private _firestore: Firestore) {}\n\n  set<T>(\n    documentRef: firestore.DocumentReference<T>,\n    value: T,\n    options?: firestore.SetOptions\n  ): WriteBatch {\n    validateBetweenNumberOfArgs('WriteBatch.set', arguments, 2, 3);\n    this.verifyNotCommitted();\n    const ref = validateReference(\n      'WriteBatch.set',\n      documentRef,\n      this._firestore\n    );\n    options = validateSetOptions('WriteBatch.set', options);\n    const [convertedValue, functionName] = applyFirestoreDataConverter(\n      ref._converter,\n      value,\n      'WriteBatch.set'\n    );\n    const parsed = this._firestore._dataReader.parseSetData(\n      functionName,\n      convertedValue,\n      options\n    );\n    this._mutations = this._mutations.concat(\n      parsed.toMutations(ref._key, Precondition.none())\n    );\n    return this;\n  }\n\n  update(\n    documentRef: firestore.DocumentReference<unknown>,\n    value: firestore.UpdateData\n  ): WriteBatch;\n  update(\n    documentRef: firestore.DocumentReference<unknown>,\n    field: string | ExternalFieldPath,\n    value: unknown,\n    ...moreFieldsAndValues: unknown[]\n  ): WriteBatch;\n  update(\n    documentRef: firestore.DocumentReference<unknown>,\n    fieldOrUpdateData: string | ExternalFieldPath | firestore.UpdateData,\n    value?: unknown,\n    ...moreFieldsAndValues: unknown[]\n  ): WriteBatch {\n    this.verifyNotCommitted();\n\n    let ref;\n    let parsed;\n\n    if (\n      typeof fieldOrUpdateData === 'string' ||\n      fieldOrUpdateData instanceof ExternalFieldPath\n    ) {\n      validateAtLeastNumberOfArgs('WriteBatch.update', arguments, 3);\n      ref = validateReference(\n        'WriteBatch.update',\n        documentRef,\n        this._firestore\n      );\n      parsed = this._firestore._dataReader.parseUpdateVarargs(\n        'WriteBatch.update',\n        fieldOrUpdateData,\n        value,\n        moreFieldsAndValues\n      );\n    } else {\n      validateExactNumberOfArgs('WriteBatch.update', arguments, 2);\n      ref = validateReference(\n        'WriteBatch.update',\n        documentRef,\n        this._firestore\n      );\n      parsed = this._firestore._dataReader.parseUpdateData(\n        'WriteBatch.update',\n        fieldOrUpdateData\n      );\n    }\n\n    this._mutations = this._mutations.concat(\n      parsed.toMutations(ref._key, Precondition.exists(true))\n    );\n    return this;\n  }\n\n  delete(documentRef: firestore.DocumentReference<unknown>): WriteBatch {\n    validateExactNumberOfArgs('WriteBatch.delete', arguments, 1);\n    this.verifyNotCommitted();\n    const ref = validateReference(\n      'WriteBatch.delete',\n      documentRef,\n      this._firestore\n    );\n    this._mutations = this._mutations.concat(\n      new DeleteMutation(ref._key, Precondition.none())\n    );\n    return this;\n  }\n\n  commit(): Promise<void> {\n    this.verifyNotCommitted();\n    this._committed = true;\n    if (this._mutations.length > 0) {\n      return this._firestore.ensureClientConfigured().write(this._mutations);\n    }\n\n    return Promise.resolve();\n  }\n\n  private verifyNotCommitted(): void {\n    if (this._committed) {\n      throw new FirestoreError(\n        Code.FAILED_PRECONDITION,\n        'A write batch can no longer be used after commit() ' +\n          'has been called.'\n      );\n    }\n  }\n}\n\n/**\n * A reference to a particular document in a collection in the database.\n */\nexport class DocumentReference<T = firestore.DocumentData>\n  extends DocumentKeyReference<T>\n  implements firestore.DocumentReference<T> {\n  private _firestoreClient: FirestoreClient;\n\n  constructor(\n    public _key: DocumentKey,\n    readonly firestore: Firestore,\n    readonly _converter: firestore.FirestoreDataConverter<T> | null\n  ) {\n    super(firestore._databaseId, _key, _converter);\n    this._firestoreClient = this.firestore.ensureClientConfigured();\n  }\n\n  static forPath<U>(\n    path: ResourcePath,\n    firestore: Firestore,\n    converter: firestore.FirestoreDataConverter<U> | null\n  ): DocumentReference<U> {\n    if (path.length % 2 !== 0) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Invalid document reference. Document ' +\n          'references must have an even number of segments, but ' +\n          `${path.canonicalString()} has ${path.length}`\n      );\n    }\n    return new DocumentReference(new DocumentKey(path), firestore, converter);\n  }\n\n  get id(): string {\n    return this._key.path.lastSegment();\n  }\n\n  get parent(): firestore.CollectionReference<T> {\n    return new CollectionReference(\n      this._key.path.popLast(),\n      this.firestore,\n      this._converter\n    );\n  }\n\n  get path(): string {\n    return this._key.path.canonicalString();\n  }\n\n  collection(\n    pathString: string\n  ): firestore.CollectionReference<firestore.DocumentData> {\n    validateExactNumberOfArgs('DocumentReference.collection', arguments, 1);\n    validateArgType(\n      'DocumentReference.collection',\n      'non-empty string',\n      1,\n      pathString\n    );\n    if (!pathString) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Must provide a non-empty collection name to collection()'\n      );\n    }\n    const path = ResourcePath.fromString(pathString);\n    return new CollectionReference(\n      this._key.path.child(path),\n      this.firestore,\n      /* converter= */ null\n    );\n  }\n\n  isEqual(other: firestore.DocumentReference<T>): boolean {\n    if (!(other instanceof DocumentReference)) {\n      throw invalidClassError('isEqual', 'DocumentReference', 1, other);\n    }\n    return (\n      this.firestore === other.firestore &&\n      this._key.isEqual(other._key) &&\n      this._converter === other._converter\n    );\n  }\n\n  set(\n    value: firestore.DocumentData,\n    options?: firestore.SetOptions\n  ): Promise<void>;\n  set(value: T, options?: firestore.SetOptions): Promise<void> {\n    validateBetweenNumberOfArgs('DocumentReference.set', arguments, 1, 2);\n    options = validateSetOptions('DocumentReference.set', options);\n    const [convertedValue, functionName] = applyFirestoreDataConverter(\n      this._converter,\n      value,\n      'DocumentReference.set'\n    );\n    const parsed = this.firestore._dataReader.parseSetData(\n      functionName,\n      convertedValue,\n      options\n    );\n    return this._firestoreClient.write(\n      parsed.toMutations(this._key, Precondition.none())\n    );\n  }\n\n  update(value: firestore.UpdateData): Promise<void>;\n  update(\n    field: string | ExternalFieldPath,\n    value: unknown,\n    ...moreFieldsAndValues: unknown[]\n  ): Promise<void>;\n  update(\n    fieldOrUpdateData: string | ExternalFieldPath | firestore.UpdateData,\n    value?: unknown,\n    ...moreFieldsAndValues: unknown[]\n  ): Promise<void> {\n    let parsed;\n\n    if (\n      typeof fieldOrUpdateData === 'string' ||\n      fieldOrUpdateData instanceof ExternalFieldPath\n    ) {\n      validateAtLeastNumberOfArgs('DocumentReference.update', arguments, 2);\n      parsed = this.firestore._dataReader.parseUpdateVarargs(\n        'DocumentReference.update',\n        fieldOrUpdateData,\n        value,\n        moreFieldsAndValues\n      );\n    } else {\n      validateExactNumberOfArgs('DocumentReference.update', arguments, 1);\n      parsed = this.firestore._dataReader.parseUpdateData(\n        'DocumentReference.update',\n        fieldOrUpdateData\n      );\n    }\n\n    return this._firestoreClient.write(\n      parsed.toMutations(this._key, Precondition.exists(true))\n    );\n  }\n\n  delete(): Promise<void> {\n    validateExactNumberOfArgs('DocumentReference.delete', arguments, 0);\n    return this._firestoreClient.write([\n      new DeleteMutation(this._key, Precondition.none())\n    ]);\n  }\n\n  onSnapshot(\n    observer: PartialObserver<firestore.DocumentSnapshot<T>>\n  ): Unsubscribe;\n  onSnapshot(\n    options: firestore.SnapshotListenOptions,\n    observer: PartialObserver<firestore.DocumentSnapshot<T>>\n  ): Unsubscribe;\n  onSnapshot(\n    onNext: NextFn<firestore.DocumentSnapshot<T>>,\n    onError?: ErrorFn,\n    onCompletion?: CompleteFn\n  ): Unsubscribe;\n  onSnapshot(\n    options: firestore.SnapshotListenOptions,\n    onNext: NextFn<firestore.DocumentSnapshot<T>>,\n    onError?: ErrorFn,\n    onCompletion?: CompleteFn\n  ): Unsubscribe;\n\n  onSnapshot(...args: unknown[]): Unsubscribe {\n    validateBetweenNumberOfArgs(\n      'DocumentReference.onSnapshot',\n      arguments,\n      1,\n      4\n    );\n    let options: firestore.SnapshotListenOptions = {\n      includeMetadataChanges: false\n    };\n    let observer: PartialObserver<firestore.DocumentSnapshot<T>>;\n    let currArg = 0;\n    if (\n      typeof args[currArg] === 'object' &&\n      !isPartialObserver(args[currArg])\n    ) {\n      options = args[currArg] as firestore.SnapshotListenOptions;\n      validateOptionNames('DocumentReference.onSnapshot', options, [\n        'includeMetadataChanges'\n      ]);\n      validateNamedOptionalType(\n        'DocumentReference.onSnapshot',\n        'boolean',\n        'includeMetadataChanges',\n        options.includeMetadataChanges\n      );\n      currArg++;\n    }\n\n    const internalOptions = {\n      includeMetadataChanges: options.includeMetadataChanges\n    };\n\n    if (isPartialObserver(args[currArg])) {\n      observer = args[currArg] as PartialObserver<\n        firestore.DocumentSnapshot<T>\n      >;\n    } else {\n      validateArgType(\n        'DocumentReference.onSnapshot',\n        'function',\n        currArg,\n        args[currArg]\n      );\n      validateOptionalArgType(\n        'DocumentReference.onSnapshot',\n        'function',\n        currArg + 1,\n        args[currArg + 1]\n      );\n      validateOptionalArgType(\n        'DocumentReference.onSnapshot',\n        'function',\n        currArg + 2,\n        args[currArg + 2]\n      );\n      observer = {\n        next: args[currArg] as NextFn<firestore.DocumentSnapshot<T>>,\n        error: args[currArg + 1] as ErrorFn,\n        complete: args[currArg + 2] as CompleteFn\n      };\n    }\n    return this.onSnapshotInternal(internalOptions, observer);\n  }\n\n  private onSnapshotInternal(\n    options: ListenOptions,\n    observer: PartialObserver<firestore.DocumentSnapshot<T>>\n  ): Unsubscribe {\n    let errHandler = (err: Error): void => {\n      console.error('Uncaught Error in onSnapshot:', err);\n    };\n    if (observer.error) {\n      errHandler = observer.error.bind(observer);\n    }\n\n    const asyncObserver = new AsyncObserver<ViewSnapshot>({\n      next: snapshot => {\n        if (observer.next) {\n          debugAssert(\n            snapshot.docs.size <= 1,\n            'Too many documents returned on a document query'\n          );\n          const doc = snapshot.docs.get(this._key);\n\n          observer.next(\n            new DocumentSnapshot(\n              this.firestore,\n              this._key,\n              doc,\n              snapshot.fromCache,\n              snapshot.hasPendingWrites,\n              this._converter\n            )\n          );\n        }\n      },\n      error: errHandler\n    });\n    const internalListener = this._firestoreClient.listen(\n      InternalQuery.atPath(this._key.path),\n      asyncObserver,\n      options\n    );\n\n    return () => {\n      asyncObserver.mute();\n      this._firestoreClient.unlisten(internalListener);\n    };\n  }\n\n  get(options?: firestore.GetOptions): Promise<firestore.DocumentSnapshot<T>> {\n    validateBetweenNumberOfArgs('DocumentReference.get', arguments, 0, 1);\n    validateGetOptions('DocumentReference.get', options);\n    return new Promise(\n      (resolve: Resolver<firestore.DocumentSnapshot<T>>, reject: Rejecter) => {\n        if (options && options.source === 'cache') {\n          this.firestore\n            .ensureClientConfigured()\n            .getDocumentFromLocalCache(this._key)\n            .then(doc => {\n              resolve(\n                new DocumentSnapshot(\n                  this.firestore,\n                  this._key,\n                  doc,\n                  /*fromCache=*/ true,\n                  doc instanceof Document ? doc.hasLocalMutations : false,\n                  this._converter\n                )\n              );\n            }, reject);\n        } else {\n          this.getViaSnapshotListener(resolve, reject, options);\n        }\n      }\n    );\n  }\n\n  private getViaSnapshotListener(\n    resolve: Resolver<firestore.DocumentSnapshot<T>>,\n    reject: Rejecter,\n    options?: firestore.GetOptions\n  ): void {\n    const unlisten = this.onSnapshotInternal(\n      {\n        includeMetadataChanges: true,\n        waitForSyncWhenOnline: true\n      },\n      {\n        next: (snap: firestore.DocumentSnapshot<T>) => {\n          // Remove query first before passing event to user to avoid\n          // user actions affecting the now stale query.\n          unlisten();\n\n          if (!snap.exists && snap.metadata.fromCache) {\n            // TODO(dimond): If we're online and the document doesn't\n            // exist then we resolve with a doc.exists set to false. If\n            // we're offline however, we reject the Promise in this\n            // case. Two options: 1) Cache the negative response from\n            // the server so we can deliver that even when you're\n            // offline 2) Actually reject the Promise in the online case\n            // if the document doesn't exist.\n            reject(\n              new FirestoreError(\n                Code.UNAVAILABLE,\n                'Failed to get document because the client is ' + 'offline.'\n              )\n            );\n          } else if (\n            snap.exists &&\n            snap.metadata.fromCache &&\n            options &&\n            options.source === 'server'\n          ) {\n            reject(\n              new FirestoreError(\n                Code.UNAVAILABLE,\n                'Failed to get document from server. (However, this ' +\n                  'document does exist in the local cache. Run again ' +\n                  'without setting source to \"server\" to ' +\n                  'retrieve the cached document.)'\n              )\n            );\n          } else {\n            resolve(snap);\n          }\n        },\n        error: reject\n      }\n    );\n  }\n\n  withConverter<U>(\n    converter: firestore.FirestoreDataConverter<U>\n  ): firestore.DocumentReference<U> {\n    return new DocumentReference<U>(this._key, this.firestore, converter);\n  }\n}\n\nclass SnapshotMetadata implements firestore.SnapshotMetadata {\n  constructor(\n    readonly hasPendingWrites: boolean,\n    readonly fromCache: boolean\n  ) {}\n\n  isEqual(other: firestore.SnapshotMetadata): boolean {\n    return (\n      this.hasPendingWrites === other.hasPendingWrites &&\n      this.fromCache === other.fromCache\n    );\n  }\n}\n\n/**\n * Options interface that can be provided to configure the deserialization of\n * DocumentSnapshots.\n */\nexport interface SnapshotOptions extends firestore.SnapshotOptions {}\n\nexport class DocumentSnapshot<T = firestore.DocumentData>\n  implements firestore.DocumentSnapshot<T> {\n  constructor(\n    private _firestore: Firestore,\n    private _key: DocumentKey,\n    public _document: Document | null,\n    private _fromCache: boolean,\n    private _hasPendingWrites: boolean,\n    private readonly _converter: firestore.FirestoreDataConverter<T> | null\n  ) {}\n\n  data(options?: firestore.SnapshotOptions): T | undefined {\n    validateBetweenNumberOfArgs('DocumentSnapshot.data', arguments, 0, 1);\n    options = validateSnapshotOptions('DocumentSnapshot.data', options);\n    if (!this._document) {\n      return undefined;\n    } else {\n      // We only want to use the converter and create a new DocumentSnapshot\n      // if a converter has been provided.\n      if (this._converter) {\n        const snapshot = new QueryDocumentSnapshot(\n          this._firestore,\n          this._key,\n          this._document,\n          this._fromCache,\n          this._hasPendingWrites,\n          /* converter= */ null\n        );\n        return this._converter.fromFirestore(snapshot, options);\n      } else {\n        const userDataWriter = new UserDataWriter(\n          this._firestore._databaseId,\n          this._firestore._areTimestampsInSnapshotsEnabled(),\n          options.serverTimestamps || 'none',\n          key =>\n            new DocumentReference(key, this._firestore, /* converter= */ null)\n        );\n        return userDataWriter.convertValue(this._document.toProto()) as T;\n      }\n    }\n  }\n\n  get(\n    fieldPath: string | ExternalFieldPath,\n    options?: firestore.SnapshotOptions\n  ): unknown {\n    validateBetweenNumberOfArgs('DocumentSnapshot.get', arguments, 1, 2);\n    options = validateSnapshotOptions('DocumentSnapshot.get', options);\n    if (this._document) {\n      const value = this._document\n        .data()\n        .field(fieldPathFromArgument('DocumentSnapshot.get', fieldPath));\n      if (value !== null) {\n        const userDataWriter = new UserDataWriter(\n          this._firestore._databaseId,\n          this._firestore._areTimestampsInSnapshotsEnabled(),\n          options.serverTimestamps || 'none',\n          key => new DocumentReference(key, this._firestore, this._converter)\n        );\n        return userDataWriter.convertValue(value);\n      }\n    }\n    return undefined;\n  }\n\n  get id(): string {\n    return this._key.path.lastSegment();\n  }\n\n  get ref(): firestore.DocumentReference<T> {\n    return new DocumentReference<T>(\n      this._key,\n      this._firestore,\n      this._converter\n    );\n  }\n\n  get exists(): boolean {\n    return this._document !== null;\n  }\n\n  get metadata(): firestore.SnapshotMetadata {\n    return new SnapshotMetadata(this._hasPendingWrites, this._fromCache);\n  }\n\n  isEqual(other: firestore.DocumentSnapshot<T>): boolean {\n    if (!(other instanceof DocumentSnapshot)) {\n      throw invalidClassError('isEqual', 'DocumentSnapshot', 1, other);\n    }\n    return (\n      this._firestore === other._firestore &&\n      this._fromCache === other._fromCache &&\n      this._key.isEqual(other._key) &&\n      (this._document === null\n        ? other._document === null\n        : this._document.isEqual(other._document)) &&\n      this._converter === other._converter\n    );\n  }\n}\n\nexport class QueryDocumentSnapshot<T = firestore.DocumentData>\n  extends DocumentSnapshot<T>\n  implements firestore.QueryDocumentSnapshot<T> {\n  data(options?: SnapshotOptions): T {\n    const data = super.data(options);\n    debugAssert(\n      data !== undefined,\n      'Document in a QueryDocumentSnapshot should exist'\n    );\n    return data;\n  }\n}\n\nexport class Query<T = firestore.DocumentData> implements firestore.Query<T> {\n  constructor(\n    public _query: InternalQuery,\n    readonly firestore: Firestore,\n    protected readonly _converter: firestore.FirestoreDataConverter<T> | null\n  ) {}\n\n  where(\n    field: string | ExternalFieldPath,\n    opStr: firestore.WhereFilterOp,\n    value: unknown\n  ): firestore.Query<T> {\n    validateExactNumberOfArgs('Query.where', arguments, 3);\n    validateDefined('Query.where', 3, value);\n\n    // Enumerated from the WhereFilterOp type in index.d.ts.\n    const whereFilterOpEnums = [\n      Operator.LESS_THAN,\n      Operator.LESS_THAN_OR_EQUAL,\n      Operator.EQUAL,\n      Operator.GREATER_THAN_OR_EQUAL,\n      Operator.GREATER_THAN,\n      Operator.ARRAY_CONTAINS,\n      Operator.IN,\n      Operator.ARRAY_CONTAINS_ANY\n    ];\n    const op = validateStringEnum('Query.where', whereFilterOpEnums, 2, opStr);\n\n    let fieldValue: api.Value;\n    const fieldPath = fieldPathFromArgument('Query.where', field);\n    if (fieldPath.isKeyField()) {\n      if (\n        op === Operator.ARRAY_CONTAINS ||\n        op === Operator.ARRAY_CONTAINS_ANY\n      ) {\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          `Invalid Query. You can't perform '${op}' ` +\n            'queries on FieldPath.documentId().'\n        );\n      } else if (op === Operator.IN) {\n        this.validateDisjunctiveFilterElements(value, op);\n        const referenceList: api.Value[] = [];\n        for (const arrayValue of value as api.Value[]) {\n          referenceList.push(this.parseDocumentIdValue(arrayValue));\n        }\n        fieldValue = { arrayValue: { values: referenceList } };\n      } else {\n        fieldValue = this.parseDocumentIdValue(value);\n      }\n    } else {\n      if (op === Operator.IN || op === Operator.ARRAY_CONTAINS_ANY) {\n        this.validateDisjunctiveFilterElements(value, op);\n      }\n      fieldValue = this.firestore._dataReader.parseQueryValue(\n        'Query.where',\n        value,\n        // We only allow nested arrays for IN queries.\n        /** allowArrays = */ op === Operator.IN\n      );\n    }\n    const filter = FieldFilter.create(fieldPath, op, fieldValue);\n    this.validateNewFilter(filter);\n    return new Query(\n      this._query.addFilter(filter),\n      this.firestore,\n      this._converter\n    );\n  }\n\n  orderBy(\n    field: string | ExternalFieldPath,\n    directionStr?: firestore.OrderByDirection\n  ): firestore.Query<T> {\n    validateBetweenNumberOfArgs('Query.orderBy', arguments, 1, 2);\n    validateOptionalArgType(\n      'Query.orderBy',\n      'non-empty string',\n      2,\n      directionStr\n    );\n    let direction: Direction;\n    if (directionStr === undefined || directionStr === 'asc') {\n      direction = Direction.ASCENDING;\n    } else if (directionStr === 'desc') {\n      direction = Direction.DESCENDING;\n    } else {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        `Function Query.orderBy() has unknown direction '${directionStr}', ` +\n          `expected 'asc' or 'desc'.`\n      );\n    }\n    if (this._query.startAt !== null) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Invalid query. You must not call Query.startAt() or ' +\n          'Query.startAfter() before calling Query.orderBy().'\n      );\n    }\n    if (this._query.endAt !== null) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Invalid query. You must not call Query.endAt() or ' +\n          'Query.endBefore() before calling Query.orderBy().'\n      );\n    }\n    const fieldPath = fieldPathFromArgument('Query.orderBy', field);\n    const orderBy = new OrderBy(fieldPath, direction);\n    this.validateNewOrderBy(orderBy);\n    return new Query(\n      this._query.addOrderBy(orderBy),\n      this.firestore,\n      this._converter\n    );\n  }\n\n  limit(n: number): firestore.Query<T> {\n    validateExactNumberOfArgs('Query.limit', arguments, 1);\n    validateArgType('Query.limit', 'number', 1, n);\n    validatePositiveNumber('Query.limit', 1, n);\n    return new Query(\n      this._query.withLimitToFirst(n),\n      this.firestore,\n      this._converter\n    );\n  }\n\n  limitToLast(n: number): firestore.Query<T> {\n    validateExactNumberOfArgs('Query.limitToLast', arguments, 1);\n    validateArgType('Query.limitToLast', 'number', 1, n);\n    validatePositiveNumber('Query.limitToLast', 1, n);\n    return new Query(\n      this._query.withLimitToLast(n),\n      this.firestore,\n      this._converter\n    );\n  }\n\n  startAt(\n    docOrField: unknown | firestore.DocumentSnapshot<unknown>,\n    ...fields: unknown[]\n  ): firestore.Query<T> {\n    validateAtLeastNumberOfArgs('Query.startAt', arguments, 1);\n    const bound = this.boundFromDocOrFields(\n      'Query.startAt',\n      docOrField,\n      fields,\n      /*before=*/ true\n    );\n    return new Query(\n      this._query.withStartAt(bound),\n      this.firestore,\n      this._converter\n    );\n  }\n\n  startAfter(\n    docOrField: unknown | firestore.DocumentSnapshot<unknown>,\n    ...fields: unknown[]\n  ): firestore.Query<T> {\n    validateAtLeastNumberOfArgs('Query.startAfter', arguments, 1);\n    const bound = this.boundFromDocOrFields(\n      'Query.startAfter',\n      docOrField,\n      fields,\n      /*before=*/ false\n    );\n    return new Query(\n      this._query.withStartAt(bound),\n      this.firestore,\n      this._converter\n    );\n  }\n\n  endBefore(\n    docOrField: unknown | firestore.DocumentSnapshot<unknown>,\n    ...fields: unknown[]\n  ): firestore.Query<T> {\n    validateAtLeastNumberOfArgs('Query.endBefore', arguments, 1);\n    const bound = this.boundFromDocOrFields(\n      'Query.endBefore',\n      docOrField,\n      fields,\n      /*before=*/ true\n    );\n    return new Query(\n      this._query.withEndAt(bound),\n      this.firestore,\n      this._converter\n    );\n  }\n\n  endAt(\n    docOrField: unknown | firestore.DocumentSnapshot<unknown>,\n    ...fields: unknown[]\n  ): firestore.Query<T> {\n    validateAtLeastNumberOfArgs('Query.endAt', arguments, 1);\n    const bound = this.boundFromDocOrFields(\n      'Query.endAt',\n      docOrField,\n      fields,\n      /*before=*/ false\n    );\n    return new Query(\n      this._query.withEndAt(bound),\n      this.firestore,\n      this._converter\n    );\n  }\n\n  isEqual(other: firestore.Query<T>): boolean {\n    if (!(other instanceof Query)) {\n      throw invalidClassError('isEqual', 'Query', 1, other);\n    }\n    return (\n      this.firestore === other.firestore &&\n      this._query.isEqual(other._query) &&\n      this._converter === other._converter\n    );\n  }\n\n  withConverter<U>(\n    converter: firestore.FirestoreDataConverter<U>\n  ): firestore.Query<U> {\n    return new Query<U>(this._query, this.firestore, converter);\n  }\n\n  /** Helper function to create a bound from a document or fields */\n  private boundFromDocOrFields(\n    methodName: string,\n    docOrField: unknown | firestore.DocumentSnapshot<T>,\n    fields: unknown[],\n    before: boolean\n  ): Bound {\n    validateDefined(methodName, 1, docOrField);\n    if (docOrField instanceof DocumentSnapshot) {\n      if (fields.length > 0) {\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          `Too many arguments provided to ${methodName}().`\n        );\n      }\n      const snap = docOrField;\n      if (!snap.exists) {\n        throw new FirestoreError(\n          Code.NOT_FOUND,\n          `Can't use a DocumentSnapshot that doesn't exist for ` +\n            `${methodName}().`\n        );\n      }\n      return this.boundFromDocument(snap._document!, before);\n    } else {\n      const allFields = [docOrField].concat(fields);\n      return this.boundFromFields(methodName, allFields, before);\n    }\n  }\n\n  /**\n   * Create a Bound from a query and a document.\n   *\n   * Note that the Bound will always include the key of the document\n   * and so only the provided document will compare equal to the returned\n   * position.\n   *\n   * Will throw if the document does not contain all fields of the order by\n   * of the query or if any of the fields in the order by are an uncommitted\n   * server timestamp.\n   */\n  private boundFromDocument(doc: Document, before: boolean): Bound {\n    const components: api.Value[] = [];\n\n    // Because people expect to continue/end a query at the exact document\n    // provided, we need to use the implicit sort order rather than the explicit\n    // sort order, because it's guaranteed to contain the document key. That way\n    // the position becomes unambiguous and the query continues/ends exactly at\n    // the provided document. Without the key (by using the explicit sort\n    // orders), multiple documents could match the position, yielding duplicate\n    // results.\n    for (const orderBy of this._query.orderBy) {\n      if (orderBy.field.isKeyField()) {\n        components.push(refValue(this.firestore._databaseId, doc.key));\n      } else {\n        const value = doc.field(orderBy.field);\n        if (isServerTimestamp(value)) {\n          throw new FirestoreError(\n            Code.INVALID_ARGUMENT,\n            'Invalid query. You are trying to start or end a query using a ' +\n              'document for which the field \"' +\n              orderBy.field +\n              '\" is an uncommitted server timestamp. (Since the value of ' +\n              'this field is unknown, you cannot start/end a query with it.)'\n          );\n        } else if (value !== null) {\n          components.push(value);\n        } else {\n          const field = orderBy.field.canonicalString();\n          throw new FirestoreError(\n            Code.INVALID_ARGUMENT,\n            `Invalid query. You are trying to start or end a query using a ` +\n              `document for which the field '${field}' (used as the ` +\n              `orderBy) does not exist.`\n          );\n        }\n      }\n    }\n    return new Bound(components, before);\n  }\n\n  /**\n   * Converts a list of field values to a Bound for the given query.\n   */\n  private boundFromFields(\n    methodName: string,\n    values: unknown[],\n    before: boolean\n  ): Bound {\n    // Use explicit order by's because it has to match the query the user made\n    const orderBy = this._query.explicitOrderBy;\n    if (values.length > orderBy.length) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        `Too many arguments provided to ${methodName}(). ` +\n          `The number of arguments must be less than or equal to the ` +\n          `number of Query.orderBy() clauses`\n      );\n    }\n\n    const components: api.Value[] = [];\n    for (let i = 0; i < values.length; i++) {\n      const rawValue = values[i];\n      const orderByComponent = orderBy[i];\n      if (orderByComponent.field.isKeyField()) {\n        if (typeof rawValue !== 'string') {\n          throw new FirestoreError(\n            Code.INVALID_ARGUMENT,\n            `Invalid query. Expected a string for document ID in ` +\n              `${methodName}(), but got a ${typeof rawValue}`\n          );\n        }\n        if (\n          !this._query.isCollectionGroupQuery() &&\n          rawValue.indexOf('/') !== -1\n        ) {\n          throw new FirestoreError(\n            Code.INVALID_ARGUMENT,\n            `Invalid query. When querying a collection and ordering by FieldPath.documentId(), ` +\n              `the value passed to ${methodName}() must be a plain document ID, but ` +\n              `'${rawValue}' contains a slash.`\n          );\n        }\n        const path = this._query.path.child(ResourcePath.fromString(rawValue));\n        if (!DocumentKey.isDocumentKey(path)) {\n          throw new FirestoreError(\n            Code.INVALID_ARGUMENT,\n            `Invalid query. When querying a collection group and ordering by ` +\n              `FieldPath.documentId(), the value passed to ${methodName}() must result in a ` +\n              `valid document path, but '${path}' is not because it contains an odd number ` +\n              `of segments.`\n          );\n        }\n        const key = new DocumentKey(path);\n        components.push(refValue(this.firestore._databaseId, key));\n      } else {\n        const wrapped = this.firestore._dataReader.parseQueryValue(\n          methodName,\n          rawValue\n        );\n        components.push(wrapped);\n      }\n    }\n\n    return new Bound(components, before);\n  }\n\n  onSnapshot(\n    observer: PartialObserver<firestore.QuerySnapshot<T>>\n  ): Unsubscribe;\n  onSnapshot(\n    options: firestore.SnapshotListenOptions,\n    observer: PartialObserver<firestore.QuerySnapshot<T>>\n  ): Unsubscribe;\n  onSnapshot(\n    onNext: NextFn<firestore.QuerySnapshot<T>>,\n    onError?: ErrorFn,\n    onCompletion?: CompleteFn\n  ): Unsubscribe;\n  onSnapshot(\n    options: firestore.SnapshotListenOptions,\n    onNext: NextFn<firestore.QuerySnapshot<T>>,\n    onError?: ErrorFn,\n    onCompletion?: CompleteFn\n  ): Unsubscribe;\n\n  onSnapshot(...args: unknown[]): Unsubscribe {\n    validateBetweenNumberOfArgs('Query.onSnapshot', arguments, 1, 4);\n    let options: firestore.SnapshotListenOptions = {};\n    let observer: PartialObserver<firestore.QuerySnapshot<T>>;\n    let currArg = 0;\n    if (\n      typeof args[currArg] === 'object' &&\n      !isPartialObserver(args[currArg])\n    ) {\n      options = args[currArg] as firestore.SnapshotListenOptions;\n      validateOptionNames('Query.onSnapshot', options, [\n        'includeMetadataChanges'\n      ]);\n      validateNamedOptionalType(\n        'Query.onSnapshot',\n        'boolean',\n        'includeMetadataChanges',\n        options.includeMetadataChanges\n      );\n      currArg++;\n    }\n\n    if (isPartialObserver(args[currArg])) {\n      observer = args[currArg] as PartialObserver<firestore.QuerySnapshot<T>>;\n    } else {\n      validateArgType('Query.onSnapshot', 'function', currArg, args[currArg]);\n      validateOptionalArgType(\n        'Query.onSnapshot',\n        'function',\n        currArg + 1,\n        args[currArg + 1]\n      );\n      validateOptionalArgType(\n        'Query.onSnapshot',\n        'function',\n        currArg + 2,\n        args[currArg + 2]\n      );\n      observer = {\n        next: args[currArg] as NextFn<firestore.QuerySnapshot<T>>,\n        error: args[currArg + 1] as ErrorFn,\n        complete: args[currArg + 2] as CompleteFn\n      };\n    }\n    this.validateHasExplicitOrderByForLimitToLast(this._query);\n    return this.onSnapshotInternal(options, observer);\n  }\n\n  private onSnapshotInternal(\n    options: ListenOptions,\n    observer: PartialObserver<firestore.QuerySnapshot<T>>\n  ): Unsubscribe {\n    let errHandler = (err: Error): void => {\n      console.error('Uncaught Error in onSnapshot:', err);\n    };\n    if (observer.error) {\n      errHandler = observer.error.bind(observer);\n    }\n\n    const asyncObserver = new AsyncObserver<ViewSnapshot>({\n      next: (result: ViewSnapshot): void => {\n        if (observer.next) {\n          observer.next(\n            new QuerySnapshot(\n              this.firestore,\n              this._query,\n              result,\n              this._converter\n            )\n          );\n        }\n      },\n      error: errHandler\n    });\n\n    const firestoreClient = this.firestore.ensureClientConfigured();\n    const internalListener = firestoreClient.listen(\n      this._query,\n      asyncObserver,\n      options\n    );\n    return (): void => {\n      asyncObserver.mute();\n      firestoreClient.unlisten(internalListener);\n    };\n  }\n\n  private validateHasExplicitOrderByForLimitToLast(query: InternalQuery): void {\n    if (query.hasLimitToLast() && query.explicitOrderBy.length === 0) {\n      throw new FirestoreError(\n        Code.UNIMPLEMENTED,\n        'limitToLast() queries require specifying at least one orderBy() clause'\n      );\n    }\n  }\n\n  get(options?: firestore.GetOptions): Promise<firestore.QuerySnapshot<T>> {\n    validateBetweenNumberOfArgs('Query.get', arguments, 0, 1);\n    validateGetOptions('Query.get', options);\n    this.validateHasExplicitOrderByForLimitToLast(this._query);\n    return new Promise(\n      (resolve: Resolver<firestore.QuerySnapshot<T>>, reject: Rejecter) => {\n        if (options && options.source === 'cache') {\n          this.firestore\n            .ensureClientConfigured()\n            .getDocumentsFromLocalCache(this._query)\n            .then((viewSnap: ViewSnapshot) => {\n              resolve(\n                new QuerySnapshot(\n                  this.firestore,\n                  this._query,\n                  viewSnap,\n                  this._converter\n                )\n              );\n            }, reject);\n        } else {\n          this.getViaSnapshotListener(resolve, reject, options);\n        }\n      }\n    );\n  }\n\n  private getViaSnapshotListener(\n    resolve: Resolver<firestore.QuerySnapshot<T>>,\n    reject: Rejecter,\n    options?: firestore.GetOptions\n  ): void {\n    const unlisten = this.onSnapshotInternal(\n      {\n        includeMetadataChanges: true,\n        waitForSyncWhenOnline: true\n      },\n      {\n        next: (result: firestore.QuerySnapshot<T>) => {\n          // Remove query first before passing event to user to avoid\n          // user actions affecting the now stale query.\n          unlisten();\n\n          if (\n            result.metadata.fromCache &&\n            options &&\n            options.source === 'server'\n          ) {\n            reject(\n              new FirestoreError(\n                Code.UNAVAILABLE,\n                'Failed to get documents from server. (However, these ' +\n                  'documents may exist in the local cache. Run again ' +\n                  'without setting source to \"server\" to ' +\n                  'retrieve the cached documents.)'\n              )\n            );\n          } else {\n            resolve(result);\n          }\n        },\n        error: reject\n      }\n    );\n  }\n\n  /**\n   * Parses the given documentIdValue into a ReferenceValue, throwing\n   * appropriate errors if the value is anything other than a DocumentReference\n   * or String, or if the string is malformed.\n   */\n  private parseDocumentIdValue(documentIdValue: unknown): api.Value {\n    if (typeof documentIdValue === 'string') {\n      if (documentIdValue === '') {\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          'Invalid query. When querying with FieldPath.documentId(), you ' +\n            'must provide a valid document ID, but it was an empty string.'\n        );\n      }\n      if (\n        !this._query.isCollectionGroupQuery() &&\n        documentIdValue.indexOf('/') !== -1\n      ) {\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          `Invalid query. When querying a collection by ` +\n            `FieldPath.documentId(), you must provide a plain document ID, but ` +\n            `'${documentIdValue}' contains a '/' character.`\n        );\n      }\n      const path = this._query.path.child(\n        ResourcePath.fromString(documentIdValue)\n      );\n      if (!DocumentKey.isDocumentKey(path)) {\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          `Invalid query. When querying a collection group by ` +\n            `FieldPath.documentId(), the value provided must result in a valid document path, ` +\n            `but '${path}' is not because it has an odd number of segments (${path.length}).`\n        );\n      }\n      return refValue(this.firestore._databaseId, new DocumentKey(path));\n    } else if (documentIdValue instanceof DocumentReference) {\n      const ref = documentIdValue as DocumentReference<T>;\n      return refValue(this.firestore._databaseId, ref._key);\n    } else {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        `Invalid query. When querying with FieldPath.documentId(), you must provide a valid ` +\n          `string or a DocumentReference, but it was: ` +\n          `${valueDescription(documentIdValue)}.`\n      );\n    }\n  }\n\n  /**\n   * Validates that the value passed into a disjunctrive filter satisfies all\n   * array requirements.\n   */\n  private validateDisjunctiveFilterElements(\n    value: unknown,\n    operator: Operator\n  ): void {\n    if (!Array.isArray(value) || value.length === 0) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Invalid Query. A non-empty array is required for ' +\n          `'${operator.toString()}' filters.`\n      );\n    }\n    if (value.length > 10) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        `Invalid Query. '${operator.toString()}' filters support a ` +\n          'maximum of 10 elements in the value array.'\n      );\n    }\n    if (value.indexOf(null) >= 0) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        `Invalid Query. '${operator.toString()}' filters cannot contain 'null' ` +\n          'in the value array.'\n      );\n    }\n    if (value.filter(element => Number.isNaN(element)).length > 0) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        `Invalid Query. '${operator.toString()}' filters cannot contain 'NaN' ` +\n          'in the value array.'\n      );\n    }\n  }\n\n  private validateNewFilter(filter: Filter): void {\n    if (filter instanceof FieldFilter) {\n      const arrayOps = [Operator.ARRAY_CONTAINS, Operator.ARRAY_CONTAINS_ANY];\n      const disjunctiveOps = [Operator.IN, Operator.ARRAY_CONTAINS_ANY];\n      const isArrayOp = arrayOps.indexOf(filter.op) >= 0;\n      const isDisjunctiveOp = disjunctiveOps.indexOf(filter.op) >= 0;\n\n      if (filter.isInequality()) {\n        const existingField = this._query.getInequalityFilterField();\n        if (existingField !== null && !existingField.isEqual(filter.field)) {\n          throw new FirestoreError(\n            Code.INVALID_ARGUMENT,\n            'Invalid query. All where filters with an inequality' +\n              ' (<, <=, >, or >=) must be on the same field. But you have' +\n              ` inequality filters on '${existingField.toString()}'` +\n              ` and '${filter.field.toString()}'`\n          );\n        }\n\n        const firstOrderByField = this._query.getFirstOrderByField();\n        if (firstOrderByField !== null) {\n          this.validateOrderByAndInequalityMatch(\n            filter.field,\n            firstOrderByField\n          );\n        }\n      } else if (isDisjunctiveOp || isArrayOp) {\n        // You can have at most 1 disjunctive filter and 1 array filter. Check if\n        // the new filter conflicts with an existing one.\n        let conflictingOp: Operator | null = null;\n        if (isDisjunctiveOp) {\n          conflictingOp = this._query.findFilterOperator(disjunctiveOps);\n        }\n        if (conflictingOp === null && isArrayOp) {\n          conflictingOp = this._query.findFilterOperator(arrayOps);\n        }\n        if (conflictingOp != null) {\n          // We special case when it's a duplicate op to give a slightly clearer error message.\n          if (conflictingOp === filter.op) {\n            throw new FirestoreError(\n              Code.INVALID_ARGUMENT,\n              'Invalid query. You cannot use more than one ' +\n                `'${filter.op.toString()}' filter.`\n            );\n          } else {\n            throw new FirestoreError(\n              Code.INVALID_ARGUMENT,\n              `Invalid query. You cannot use '${filter.op.toString()}' filters ` +\n                `with '${conflictingOp.toString()}' filters.`\n            );\n          }\n        }\n      }\n    }\n  }\n\n  private validateNewOrderBy(orderBy: OrderBy): void {\n    if (this._query.getFirstOrderByField() === null) {\n      // This is the first order by. It must match any inequality.\n      const inequalityField = this._query.getInequalityFilterField();\n      if (inequalityField !== null) {\n        this.validateOrderByAndInequalityMatch(inequalityField, orderBy.field);\n      }\n    }\n  }\n\n  private validateOrderByAndInequalityMatch(\n    inequality: FieldPath,\n    orderBy: FieldPath\n  ): void {\n    if (!orderBy.isEqual(inequality)) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        `Invalid query. You have a where filter with an inequality ` +\n          `(<, <=, >, or >=) on field '${inequality.toString()}' ` +\n          `and so you must also use '${inequality.toString()}' ` +\n          `as your first Query.orderBy(), but your first Query.orderBy() ` +\n          `is on field '${orderBy.toString()}' instead.`\n      );\n    }\n  }\n}\n\nexport class QuerySnapshot<T = firestore.DocumentData>\n  implements firestore.QuerySnapshot<T> {\n  private _cachedChanges: Array<firestore.DocumentChange<T>> | null = null;\n  private _cachedChangesIncludeMetadataChanges: boolean | null = null;\n\n  readonly metadata: firestore.SnapshotMetadata;\n\n  constructor(\n    private readonly _firestore: Firestore,\n    private readonly _originalQuery: InternalQuery,\n    private readonly _snapshot: ViewSnapshot,\n    private readonly _converter: firestore.FirestoreDataConverter<T> | null\n  ) {\n    this.metadata = new SnapshotMetadata(\n      _snapshot.hasPendingWrites,\n      _snapshot.fromCache\n    );\n  }\n\n  get docs(): Array<firestore.QueryDocumentSnapshot<T>> {\n    const result: Array<firestore.QueryDocumentSnapshot<T>> = [];\n    this.forEach(doc => result.push(doc));\n    return result;\n  }\n\n  get empty(): boolean {\n    return this._snapshot.docs.isEmpty();\n  }\n\n  get size(): number {\n    return this._snapshot.docs.size;\n  }\n\n  forEach(\n    callback: (result: firestore.QueryDocumentSnapshot<T>) => void,\n    thisArg?: unknown\n  ): void {\n    validateBetweenNumberOfArgs('QuerySnapshot.forEach', arguments, 1, 2);\n    validateArgType('QuerySnapshot.forEach', 'function', 1, callback);\n    this._snapshot.docs.forEach(doc => {\n      callback.call(thisArg, this.convertToDocumentImpl(doc));\n    });\n  }\n\n  get query(): firestore.Query<T> {\n    return new Query(this._originalQuery, this._firestore, this._converter);\n  }\n\n  docChanges(\n    options?: firestore.SnapshotListenOptions\n  ): Array<firestore.DocumentChange<T>> {\n    if (options) {\n      validateOptionNames('QuerySnapshot.docChanges', options, [\n        'includeMetadataChanges'\n      ]);\n      validateNamedOptionalType(\n        'QuerySnapshot.docChanges',\n        'boolean',\n        'includeMetadataChanges',\n        options.includeMetadataChanges\n      );\n    }\n\n    const includeMetadataChanges = !!(\n      options && options.includeMetadataChanges\n    );\n\n    if (includeMetadataChanges && this._snapshot.excludesMetadataChanges) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'To include metadata changes with your document changes, you must ' +\n          'also pass { includeMetadataChanges:true } to onSnapshot().'\n      );\n    }\n\n    if (\n      !this._cachedChanges ||\n      this._cachedChangesIncludeMetadataChanges !== includeMetadataChanges\n    ) {\n      this._cachedChanges = changesFromSnapshot<T>(\n        this._firestore,\n        includeMetadataChanges,\n        this._snapshot,\n        this._converter\n      );\n      this._cachedChangesIncludeMetadataChanges = includeMetadataChanges;\n    }\n\n    return this._cachedChanges;\n  }\n\n  /** Check the equality. The call can be very expensive. */\n  isEqual(other: firestore.QuerySnapshot<T>): boolean {\n    if (!(other instanceof QuerySnapshot)) {\n      throw invalidClassError('isEqual', 'QuerySnapshot', 1, other);\n    }\n\n    return (\n      this._firestore === other._firestore &&\n      this._originalQuery.isEqual(other._originalQuery) &&\n      this._snapshot.isEqual(other._snapshot) &&\n      this._converter === other._converter\n    );\n  }\n\n  private convertToDocumentImpl(doc: Document): QueryDocumentSnapshot<T> {\n    return new QueryDocumentSnapshot(\n      this._firestore,\n      doc.key,\n      doc,\n      this.metadata.fromCache,\n      this._snapshot.mutatedKeys.has(doc.key),\n      this._converter\n    );\n  }\n}\n\nexport class CollectionReference<T = firestore.DocumentData> extends Query<T>\n  implements firestore.CollectionReference<T> {\n  constructor(\n    readonly _path: ResourcePath,\n    firestore: Firestore,\n    _converter: firestore.FirestoreDataConverter<T> | null\n  ) {\n    super(InternalQuery.atPath(_path), firestore, _converter);\n    if (_path.length % 2 !== 1) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Invalid collection reference. Collection ' +\n          'references must have an odd number of segments, but ' +\n          `${_path.canonicalString()} has ${_path.length}`\n      );\n    }\n  }\n\n  get id(): string {\n    return this._query.path.lastSegment();\n  }\n\n  get parent(): firestore.DocumentReference<firestore.DocumentData> | null {\n    const parentPath = this._query.path.popLast();\n    if (parentPath.isEmpty()) {\n      return null;\n    } else {\n      return new DocumentReference<firestore.DocumentData>(\n        new DocumentKey(parentPath),\n        this.firestore,\n        /* converter= */ null\n      );\n    }\n  }\n\n  get path(): string {\n    return this._query.path.canonicalString();\n  }\n\n  doc(pathString?: string): firestore.DocumentReference<T> {\n    validateBetweenNumberOfArgs('CollectionReference.doc', arguments, 0, 1);\n    // We allow omission of 'pathString' but explicitly prohibit passing in both\n    // 'undefined' and 'null'.\n    if (arguments.length === 0) {\n      pathString = AutoId.newId();\n    }\n    validateArgType(\n      'CollectionReference.doc',\n      'non-empty string',\n      1,\n      pathString\n    );\n    const path = ResourcePath.fromString(pathString!);\n    return DocumentReference.forPath<T>(\n      this._query.path.child(path),\n      this.firestore,\n      this._converter\n    );\n  }\n\n  add(value: T): Promise<firestore.DocumentReference<T>> {\n    validateExactNumberOfArgs('CollectionReference.add', arguments, 1);\n    const convertedValue = this._converter\n      ? this._converter.toFirestore(value)\n      : value;\n    validateArgType('CollectionReference.add', 'object', 1, convertedValue);\n    const docRef = this.doc();\n    return docRef.set(value).then(() => docRef);\n  }\n\n  withConverter<U>(\n    converter: firestore.FirestoreDataConverter<U>\n  ): firestore.CollectionReference<U> {\n    return new CollectionReference<U>(this._path, this.firestore, converter);\n  }\n}\n\nfunction validateSetOptions(\n  methodName: string,\n  options: firestore.SetOptions | undefined\n): firestore.SetOptions {\n  if (options === undefined) {\n    return {\n      merge: false\n    };\n  }\n\n  validateOptionNames(methodName, options, ['merge', 'mergeFields']);\n  validateNamedOptionalType(methodName, 'boolean', 'merge', options.merge);\n  validateOptionalArrayElements(\n    methodName,\n    'mergeFields',\n    'a string or a FieldPath',\n    options.mergeFields,\n    element =>\n      typeof element === 'string' || element instanceof ExternalFieldPath\n  );\n\n  if (options.mergeFields !== undefined && options.merge !== undefined) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Invalid options passed to function ${methodName}(): You cannot specify both \"merge\" ` +\n        `and \"mergeFields\".`\n    );\n  }\n\n  return options;\n}\n\nfunction validateSnapshotOptions(\n  methodName: string,\n  options: firestore.SnapshotOptions | undefined\n): firestore.SnapshotOptions {\n  if (options === undefined) {\n    return {};\n  }\n\n  validateOptionNames(methodName, options, ['serverTimestamps']);\n  validateNamedOptionalPropertyEquals(\n    methodName,\n    'options',\n    'serverTimestamps',\n    options.serverTimestamps,\n    ['estimate', 'previous', 'none']\n  );\n  return options;\n}\n\nfunction validateGetOptions(\n  methodName: string,\n  options: firestore.GetOptions | undefined\n): void {\n  validateOptionalArgType(methodName, 'object', 1, options);\n  if (options) {\n    validateOptionNames(methodName, options, ['source']);\n    validateNamedOptionalPropertyEquals(\n      methodName,\n      'options',\n      'source',\n      options.source,\n      ['default', 'server', 'cache']\n    );\n  }\n}\n\nfunction validateReference<T>(\n  methodName: string,\n  documentRef: firestore.DocumentReference<T>,\n  firestore: Firestore\n): DocumentKeyReference<T> {\n  if (!(documentRef instanceof DocumentKeyReference)) {\n    throw invalidClassError(methodName, 'DocumentReference', 1, documentRef);\n  } else if (documentRef.firestore !== firestore) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      'Provided document reference is from a different Firestore instance.'\n    );\n  } else {\n    return documentRef;\n  }\n}\n\n/**\n * Calculates the array of firestore.DocumentChange's for a given ViewSnapshot.\n *\n * Exported for testing.\n */\nexport function changesFromSnapshot<T>(\n  firestore: Firestore,\n  includeMetadataChanges: boolean,\n  snapshot: ViewSnapshot,\n  converter: firestore.FirestoreDataConverter<T> | null\n): Array<firestore.DocumentChange<T>> {\n  if (snapshot.oldDocs.isEmpty()) {\n    // Special case the first snapshot because index calculation is easy and\n    // fast\n    let lastDoc: Document;\n    let index = 0;\n    return snapshot.docChanges.map(change => {\n      const doc = new QueryDocumentSnapshot<T>(\n        firestore,\n        change.doc.key,\n        change.doc,\n        snapshot.fromCache,\n        snapshot.mutatedKeys.has(change.doc.key),\n        converter\n      );\n      debugAssert(\n        change.type === ChangeType.Added,\n        'Invalid event type for first snapshot'\n      );\n      debugAssert(\n        !lastDoc || snapshot.query.docComparator(lastDoc, change.doc) < 0,\n        'Got added events in wrong order'\n      );\n      lastDoc = change.doc;\n      return {\n        type: 'added' as firestore.DocumentChangeType,\n        doc,\n        oldIndex: -1,\n        newIndex: index++\n      };\n    });\n  } else {\n    // A DocumentSet that is updated incrementally as changes are applied to use\n    // to lookup the index of a document.\n    let indexTracker = snapshot.oldDocs;\n    return snapshot.docChanges\n      .filter(\n        change => includeMetadataChanges || change.type !== ChangeType.Metadata\n      )\n      .map(change => {\n        const doc = new QueryDocumentSnapshot<T>(\n          firestore,\n          change.doc.key,\n          change.doc,\n          snapshot.fromCache,\n          snapshot.mutatedKeys.has(change.doc.key),\n          converter\n        );\n        let oldIndex = -1;\n        let newIndex = -1;\n        if (change.type !== ChangeType.Added) {\n          oldIndex = indexTracker.indexOf(change.doc.key);\n          debugAssert(oldIndex >= 0, 'Index for document not found');\n          indexTracker = indexTracker.delete(change.doc.key);\n        }\n        if (change.type !== ChangeType.Removed) {\n          indexTracker = indexTracker.add(change.doc);\n          newIndex = indexTracker.indexOf(change.doc.key);\n        }\n        return { type: resultChangeType(change.type), doc, oldIndex, newIndex };\n      });\n  }\n}\n\nfunction resultChangeType(type: ChangeType): firestore.DocumentChangeType {\n  switch (type) {\n    case ChangeType.Added:\n      return 'added';\n    case ChangeType.Modified:\n    case ChangeType.Metadata:\n      return 'modified';\n    case ChangeType.Removed:\n      return 'removed';\n    default:\n      return fail('Unknown change type: ' + type);\n  }\n}\n\n/**\n * Converts custom model object of type T into DocumentData by applying the\n * converter if it exists.\n *\n * This function is used when converting user objects to DocumentData\n * because we want to provide the user with a more specific error message if\n * their set() or fails due to invalid data originating from a toFirestore()\n * call.\n */\nexport function applyFirestoreDataConverter<T>(\n  converter: UntypedFirestoreDataConverter<T> | null,\n  value: T,\n  functionName: string\n): [firestore.DocumentData, string] {\n  let convertedValue;\n  if (converter) {\n    convertedValue = converter.toFirestore(value);\n    functionName = 'toFirestore() in ' + functionName;\n  } else {\n    convertedValue = value as firestore.DocumentData;\n  }\n  return [convertedValue, functionName];\n}\n\nfunction contains(obj: object, key: string): obj is { key: unknown } {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Code, FirestoreError } from './error';\n\n/**\n * Helper function to prevent instantiation through the constructor.\n *\n * This method creates a new constructor that throws when it's invoked.\n * The prototype of that constructor is then set to the prototype of the hidden\n * \"class\" to expose all the prototype methods and allow for instanceof\n * checks.\n *\n * To also make all the static methods available, all properties of the\n * original constructor are copied to the new constructor.\n */\nexport function makeConstructorPrivate<T extends Function>(\n  cls: T,\n  optionalMessage?: string\n): T {\n  function PublicConstructor(): never {\n    let error = 'This constructor is private.';\n    if (optionalMessage) {\n      error += ' ';\n      error += optionalMessage;\n    }\n    throw new FirestoreError(Code.INVALID_ARGUMENT, error);\n  }\n\n  // Make sure instanceof checks work and all methods are exposed on the public\n  // constructor\n  PublicConstructor.prototype = cls.prototype;\n\n  // Copy any static methods/members\n  Object.assign(PublicConstructor, cls);\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return PublicConstructor as any;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp, FirebaseNamespace } from '@firebase/app-types';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport { _FirebaseNamespace } from '@firebase/app-types/private';\nimport { Component, ComponentType, Provider } from '@firebase/component';\nimport {\n  CACHE_SIZE_UNLIMITED,\n  Firestore,\n  DocumentReference,\n  DocumentSnapshot,\n  QueryDocumentSnapshot,\n  Query,\n  QuerySnapshot,\n  CollectionReference,\n  Transaction,\n  WriteBatch\n} from '../api/database';\nimport { Blob } from '../api/blob';\nimport { FieldPath } from '../api/field_path';\nimport { GeoPoint } from '../api/geo_point';\nimport { Timestamp } from '../api/timestamp';\nimport { makeConstructorPrivate } from '../util/api';\nimport { FieldValue } from '../api/field_value';\n\n// Public instance that disallows construction at runtime. Note that this still\n// allows instanceof checks.\nexport const PublicFirestore = makeConstructorPrivate(\n  Firestore,\n  'Use firebase.firestore() instead.'\n);\nexport const PublicTransaction = makeConstructorPrivate(\n  Transaction,\n  'Use firebase.firestore().runTransaction() instead.'\n);\nexport const PublicWriteBatch = makeConstructorPrivate(\n  WriteBatch,\n  'Use firebase.firestore().batch() instead.'\n);\nexport const PublicDocumentReference = makeConstructorPrivate(\n  DocumentReference,\n  'Use firebase.firestore().doc() instead.'\n);\nexport const PublicDocumentSnapshot = makeConstructorPrivate(DocumentSnapshot);\nexport const PublicQueryDocumentSnapshot = makeConstructorPrivate(\n  QueryDocumentSnapshot\n);\nexport const PublicQuery = makeConstructorPrivate(Query);\nexport const PublicQuerySnapshot = makeConstructorPrivate(QuerySnapshot);\nexport const PublicCollectionReference = makeConstructorPrivate(\n  CollectionReference,\n  'Use firebase.firestore().collection() instead.'\n);\nexport const PublicFieldValue = makeConstructorPrivate(\n  FieldValue,\n  'Use FieldValue.<field>() instead.'\n);\nexport const PublicBlob = makeConstructorPrivate(\n  Blob,\n  'Use Blob.fromUint8Array() or Blob.fromBase64String() instead.'\n);\n\nconst firestoreNamespace = {\n  Firestore: PublicFirestore,\n  GeoPoint,\n  Timestamp,\n  Blob: PublicBlob,\n  Transaction: PublicTransaction,\n  WriteBatch: PublicWriteBatch,\n  DocumentReference: PublicDocumentReference,\n  DocumentSnapshot: PublicDocumentSnapshot,\n  Query: PublicQuery,\n  QueryDocumentSnapshot: PublicQueryDocumentSnapshot,\n  QuerySnapshot: PublicQuerySnapshot,\n  CollectionReference: PublicCollectionReference,\n  FieldPath,\n  FieldValue: PublicFieldValue,\n  setLogLevel: Firestore.setLogLevel,\n  CACHE_SIZE_UNLIMITED\n};\n\n/**\n * Configures Firestore as part of the Firebase SDK by calling registerService.\n *\n * @param firebase The FirebaseNamespace to register Firestore with\n * @param firestoreFactory A factory function that returns a new Firestore\n *    instance.\n */\nexport function configureForFirebase(\n  firebase: FirebaseNamespace,\n  firestoreFactory: (\n    app: FirebaseApp,\n    auth: Provider<FirebaseAuthInternalName>\n  ) => Firestore\n): void {\n  (firebase as _FirebaseNamespace).INTERNAL.registerComponent(\n    new Component(\n      'firestore',\n      container => {\n        const app = container.getProvider('app').getImmediate()!;\n        return firestoreFactory(app, container.getProvider('auth-internal'));\n      },\n      ComponentType.PUBLIC\n    ).setServiceProps({ ...firestoreNamespace })\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ConnectivityMonitor, NetworkStatus } from './connectivity_monitor';\n\nexport class NoopConnectivityMonitor implements ConnectivityMonitor {\n  addCallback(callback: (status: NetworkStatus) => void): void {\n    // No-op.\n  }\n\n  shutdown(): void {\n    // No-op.\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { logDebug } from '../util/log';\nimport {\n  ConnectivityMonitor,\n  ConnectivityMonitorCallback,\n  NetworkStatus\n} from './../remote/connectivity_monitor';\n\n// References to `window` are guarded by BrowserConnectivityMonitor.isAvailable()\n/* eslint-disable no-restricted-globals */\n\nconst LOG_TAG = 'ConnectivityMonitor';\n\n/**\n * Browser implementation of ConnectivityMonitor.\n */\nexport class BrowserConnectivityMonitor implements ConnectivityMonitor {\n  private readonly networkAvailableListener = (): void =>\n    this.onNetworkAvailable();\n  private readonly networkUnavailableListener = (): void =>\n    this.onNetworkUnavailable();\n  private callbacks: ConnectivityMonitorCallback[] = [];\n\n  constructor() {\n    this.configureNetworkMonitoring();\n  }\n\n  addCallback(callback: (status: NetworkStatus) => void): void {\n    this.callbacks.push(callback);\n  }\n\n  shutdown(): void {\n    window.removeEventListener('online', this.networkAvailableListener);\n    window.removeEventListener('offline', this.networkUnavailableListener);\n  }\n\n  private configureNetworkMonitoring(): void {\n    window.addEventListener('online', this.networkAvailableListener);\n    window.addEventListener('offline', this.networkUnavailableListener);\n  }\n\n  private onNetworkAvailable(): void {\n    logDebug(LOG_TAG, 'Network connectivity changed: AVAILABLE');\n    for (const callback of this.callbacks) {\n      callback(NetworkStatus.AVAILABLE);\n    }\n  }\n\n  private onNetworkUnavailable(): void {\n    logDebug(LOG_TAG, 'Network connectivity changed: UNAVAILABLE');\n    for (const callback of this.callbacks) {\n      callback(NetworkStatus.UNAVAILABLE);\n    }\n  }\n\n  // TODO(chenbrian): Consider passing in window either into this component or\n  // here for testing via FakeWindow.\n  /** Checks that all used attributes of window are available. */\n  static isAvailable(): boolean {\n    return (\n      typeof window !== 'undefined' &&\n      window.addEventListener !== undefined &&\n      window.removeEventListener !== undefined\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { debugAssert } from '../util/assert';\nimport { FirestoreError } from '../util/error';\n\nimport { Stream } from './connection';\n\n/**\n * Provides a simple helper class that implements the Stream interface to\n * bridge to other implementations that are streams but do not implement the\n * interface. The stream callbacks are invoked with the callOn... methods.\n */\nexport class StreamBridge<I, O> implements Stream<I, O> {\n  private wrappedOnOpen: (() => void) | undefined;\n  private wrappedOnClose: ((err?: FirestoreError) => void) | undefined;\n  private wrappedOnMessage: ((msg: O) => void) | undefined;\n\n  private sendFn: (msg: I) => void;\n  private closeFn: () => void;\n\n  constructor(args: { sendFn: (msg: I) => void; closeFn: () => void }) {\n    this.sendFn = args.sendFn;\n    this.closeFn = args.closeFn;\n  }\n\n  onOpen(callback: () => void): void {\n    debugAssert(!this.wrappedOnOpen, 'Called onOpen on stream twice!');\n    this.wrappedOnOpen = callback;\n  }\n\n  onClose(callback: (err?: FirestoreError) => void): void {\n    debugAssert(!this.wrappedOnClose, 'Called onClose on stream twice!');\n    this.wrappedOnClose = callback;\n  }\n\n  onMessage(callback: (msg: O) => void): void {\n    debugAssert(!this.wrappedOnMessage, 'Called onMessage on stream twice!');\n    this.wrappedOnMessage = callback;\n  }\n\n  close(): void {\n    this.closeFn();\n  }\n\n  send(msg: I): void {\n    this.sendFn(msg);\n  }\n\n  callOnOpen(): void {\n    debugAssert(\n      this.wrappedOnOpen !== undefined,\n      'Cannot call onOpen because no callback was set'\n    );\n    this.wrappedOnOpen();\n  }\n\n  callOnClose(err?: FirestoreError): void {\n    debugAssert(\n      this.wrappedOnClose !== undefined,\n      'Cannot call onClose because no callback was set'\n    );\n    this.wrappedOnClose(err);\n  }\n\n  callOnMessage(msg: O): void {\n    debugAssert(\n      this.wrappedOnMessage !== undefined,\n      'Cannot call onMessage because no callback was set'\n    );\n    this.wrappedOnMessage(msg);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  createWebChannelTransport,\n  ErrorCode,\n  EventType,\n  WebChannel,\n  WebChannelError,\n  WebChannelOptions,\n  XhrIo\n} from '@firebase/webchannel-wrapper';\n\nimport {\n  isBrowserExtension,\n  isElectron,\n  isIE,\n  isMobileCordova,\n  isReactNative,\n  isUWP\n} from '@firebase/util';\n\nimport { Token } from '../api/credentials';\nimport { DatabaseId, DatabaseInfo } from '../core/database_info';\nimport { SDK_VERSION } from '../core/version';\nimport { Connection, Stream } from '../remote/connection';\nimport {\n  mapCodeFromRpcStatus,\n  mapCodeFromHttpResponseErrorStatus\n} from '../remote/rpc_error';\nimport { StreamBridge } from '../remote/stream_bridge';\nimport { debugAssert, fail, hardAssert } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\nimport { logDebug, logWarn } from '../util/log';\nimport { Indexable } from '../util/misc';\nimport { Rejecter, Resolver } from '../util/promise';\nimport { StringMap } from '../util/types';\n\nconst LOG_TAG = 'Connection';\n\nconst RPC_STREAM_SERVICE = 'google.firestore.v1.Firestore';\nconst RPC_URL_VERSION = 'v1';\n\n/**\n * Maps RPC names to the corresponding REST endpoint name.\n * Uses Object Literal notation to avoid renaming.\n */\nconst RPC_NAME_REST_MAPPING: { [key: string]: string } = {};\nRPC_NAME_REST_MAPPING['BatchGetDocuments'] = 'batchGet';\nRPC_NAME_REST_MAPPING['Commit'] = 'commit';\n\n// TODO(b/38203344): The SDK_VERSION is set independently from Firebase because\n// we are doing out-of-band releases. Once we release as part of Firebase, we\n// should use the Firebase version instead.\nconst X_GOOG_API_CLIENT_VALUE = 'gl-js/ fire/' + SDK_VERSION;\n\nconst XHR_TIMEOUT_SECS = 15;\n\nexport class WebChannelConnection implements Connection {\n  private readonly databaseId: DatabaseId;\n  private readonly baseUrl: string;\n  private readonly forceLongPolling: boolean;\n\n  constructor(info: DatabaseInfo) {\n    this.databaseId = info.databaseId;\n    const proto = info.ssl ? 'https' : 'http';\n    this.baseUrl = proto + '://' + info.host;\n    this.forceLongPolling = info.forceLongPolling;\n  }\n\n  /**\n   * Modifies the headers for a request, adding any authorization token if\n   * present and any additional headers for the request.\n   */\n  private modifyHeadersForRequest(\n    headers: StringMap,\n    token: Token | null\n  ): void {\n    if (token) {\n      for (const header in token.authHeaders) {\n        if (token.authHeaders.hasOwnProperty(header)) {\n          headers[header] = token.authHeaders[header];\n        }\n      }\n    }\n    headers['X-Goog-Api-Client'] = X_GOOG_API_CLIENT_VALUE;\n  }\n\n  invokeRPC<Req, Resp>(\n    rpcName: string,\n    request: Req,\n    token: Token | null\n  ): Promise<Resp> {\n    const url = this.makeUrl(rpcName);\n\n    return new Promise((resolve: Resolver<Resp>, reject: Rejecter) => {\n      const xhr = new XhrIo();\n      xhr.listenOnce(EventType.COMPLETE, () => {\n        try {\n          switch (xhr.getLastErrorCode()) {\n            case ErrorCode.NO_ERROR:\n              const json = xhr.getResponseJson() as Resp;\n              logDebug(LOG_TAG, 'XHR received:', JSON.stringify(json));\n              resolve(json);\n              break;\n            case ErrorCode.TIMEOUT:\n              logDebug(LOG_TAG, 'RPC \"' + rpcName + '\" timed out');\n              reject(\n                new FirestoreError(Code.DEADLINE_EXCEEDED, 'Request time out')\n              );\n              break;\n            case ErrorCode.HTTP_ERROR:\n              const status = xhr.getStatus();\n              logDebug(\n                LOG_TAG,\n                'RPC \"' + rpcName + '\" failed with status:',\n                status,\n                'response text:',\n                xhr.getResponseText()\n              );\n              if (status > 0) {\n                const responseError = (xhr.getResponseJson() as WebChannelError)\n                  .error;\n                if (\n                  !!responseError &&\n                  !!responseError.status &&\n                  !!responseError.message\n                ) {\n                  const firestoreErrorCode = mapCodeFromHttpResponseErrorStatus(\n                    responseError.status\n                  );\n                  reject(\n                    new FirestoreError(\n                      firestoreErrorCode,\n                      responseError.message\n                    )\n                  );\n                } else {\n                  reject(\n                    new FirestoreError(\n                      Code.UNKNOWN,\n                      'Server responded with status ' + xhr.getStatus()\n                    )\n                  );\n                }\n              } else {\n                // If we received an HTTP_ERROR but there's no status code,\n                // it's most probably a connection issue\n                logDebug(LOG_TAG, 'RPC \"' + rpcName + '\" failed');\n                reject(\n                  new FirestoreError(Code.UNAVAILABLE, 'Connection failed.')\n                );\n              }\n              break;\n            default:\n              fail(\n                'RPC \"' +\n                  rpcName +\n                  '\" failed with unanticipated ' +\n                  'webchannel error ' +\n                  xhr.getLastErrorCode() +\n                  ': ' +\n                  xhr.getLastError() +\n                  ', giving up.'\n              );\n          }\n        } finally {\n          logDebug(LOG_TAG, 'RPC \"' + rpcName + '\" completed.');\n        }\n      });\n\n      // The database field is already encoded in URL. Specifying it again in\n      // the body is not necessary in production, and will cause duplicate field\n      // errors in the Firestore Emulator. Let's remove it.\n      const jsonObj = ({ ...request } as unknown) as Indexable;\n      delete jsonObj.database;\n\n      const requestString = JSON.stringify(jsonObj);\n      logDebug(LOG_TAG, 'XHR sending: ', url + ' ' + requestString);\n      // Content-Type: text/plain will avoid preflight requests which might\n      // mess with CORS and redirects by proxies. If we add custom headers\n      // we will need to change this code to potentially use the\n      // $httpOverwrite parameter supported by ESF to avoid\n      // triggering preflight requests.\n      const headers: StringMap = { 'Content-Type': 'text/plain' };\n\n      this.modifyHeadersForRequest(headers, token);\n\n      xhr.send(url, 'POST', requestString, headers, XHR_TIMEOUT_SECS);\n    });\n  }\n\n  invokeStreamingRPC<Req, Resp>(\n    rpcName: string,\n    request: Req,\n    token: Token | null\n  ): Promise<Resp[]> {\n    // The REST API automatically aggregates all of the streamed results, so we\n    // can just use the normal invoke() method.\n    return this.invokeRPC<Req, Resp[]>(rpcName, request, token);\n  }\n\n  openStream<Req, Resp>(\n    rpcName: string,\n    token: Token | null\n  ): Stream<Req, Resp> {\n    const urlParts = [\n      this.baseUrl,\n      '/',\n      RPC_STREAM_SERVICE,\n      '/',\n      rpcName,\n      '/channel'\n    ];\n    const webchannelTransport = createWebChannelTransport();\n    const request: WebChannelOptions = {\n      // Required for backend stickiness, routing behavior is based on this\n      // parameter.\n      httpSessionIdParam: 'gsessionid',\n      initMessageHeaders: {},\n      messageUrlParams: {\n        // This param is used to improve routing and project isolation by the\n        // backend and must be included in every request.\n        database: `projects/${this.databaseId.projectId}/databases/${this.databaseId.database}`\n      },\n      sendRawJson: true,\n      supportsCrossDomainXhr: true,\n      internalChannelParams: {\n        // Override the default timeout (randomized between 10-20 seconds) since\n        // a large write batch on a slow internet connection may take a long\n        // time to send to the backend. Rather than have WebChannel impose a\n        // tight timeout which could lead to infinite timeouts and retries, we\n        // set it very large (5-10 minutes) and rely on the browser's builtin\n        // timeouts to kick in if the request isn't working.\n        forwardChannelRequestTimeoutMs: 10 * 60 * 1000\n      },\n      forceLongPolling: this.forceLongPolling\n    };\n\n    this.modifyHeadersForRequest(request.initMessageHeaders!, token);\n\n    // Sending the custom headers we just added to request.initMessageHeaders\n    // (Authorization, etc.) will trigger the browser to make a CORS preflight\n    // request because the XHR will no longer meet the criteria for a \"simple\"\n    // CORS request:\n    // https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#Simple_requests\n    //\n    // Therefore to avoid the CORS preflight request (an extra network\n    // roundtrip), we use the httpHeadersOverwriteParam option to specify that\n    // the headers should instead be encoded into a special \"$httpHeaders\" query\n    // parameter, which is recognized by the webchannel backend. This is\n    // formally defined here:\n    // https://github.com/google/closure-library/blob/b0e1815b13fb92a46d7c9b3c30de5d6a396a3245/closure/goog/net/rpc/httpcors.js#L32\n    //\n    // TODO(b/145624756): There is a backend bug where $httpHeaders isn't respected if the request\n    // doesn't have an Origin header. So we have to exclude a few browser environments that are\n    // known to (sometimes) not include an Origin. See\n    // https://github.com/firebase/firebase-js-sdk/issues/1491.\n    if (\n      !isMobileCordova() &&\n      !isReactNative() &&\n      !isElectron() &&\n      !isIE() &&\n      !isUWP() &&\n      !isBrowserExtension()\n    ) {\n      request.httpHeadersOverwriteParam = '$httpHeaders';\n    }\n\n    const url = urlParts.join('');\n    logDebug(LOG_TAG, 'Creating WebChannel: ' + url + ' ' + request);\n    const channel = webchannelTransport.createWebChannel(url, request);\n\n    // WebChannel supports sending the first message with the handshake - saving\n    // a network round trip. However, it will have to call send in the same\n    // JS event loop as open. In order to enforce this, we delay actually\n    // opening the WebChannel until send is called. Whether we have called\n    // open is tracked with this variable.\n    let opened = false;\n\n    // A flag to determine whether the stream was closed (by us or through an\n    // error/close event) to avoid delivering multiple close events or sending\n    // on a closed stream\n    let closed = false;\n\n    const streamBridge = new StreamBridge<Req, Resp>({\n      sendFn: (msg: Req) => {\n        if (!closed) {\n          if (!opened) {\n            logDebug(LOG_TAG, 'Opening WebChannel transport.');\n            channel.open();\n            opened = true;\n          }\n          logDebug(LOG_TAG, 'WebChannel sending:', msg);\n          channel.send(msg);\n        } else {\n          logDebug(LOG_TAG, 'Not sending because WebChannel is closed:', msg);\n        }\n      },\n      closeFn: () => channel.close()\n    });\n\n    // Closure events are guarded and exceptions are swallowed, so catch any\n    // exception and rethrow using a setTimeout so they become visible again.\n    // Note that eventually this function could go away if we are confident\n    // enough the code is exception free.\n    const unguardedEventListen = <T>(\n      type: string,\n      fn: (param?: T) => void\n    ): void => {\n      // TODO(dimond): closure typing seems broken because WebChannel does\n      // not implement goog.events.Listenable\n      channel.listen(type, (param: unknown) => {\n        try {\n          fn(param as T);\n        } catch (e) {\n          setTimeout(() => {\n            throw e;\n          }, 0);\n        }\n      });\n    };\n\n    unguardedEventListen(WebChannel.EventType.OPEN, () => {\n      if (!closed) {\n        logDebug(LOG_TAG, 'WebChannel transport opened.');\n      }\n    });\n\n    unguardedEventListen(WebChannel.EventType.CLOSE, () => {\n      if (!closed) {\n        closed = true;\n        logDebug(LOG_TAG, 'WebChannel transport closed');\n        streamBridge.callOnClose();\n      }\n    });\n\n    unguardedEventListen<Error>(WebChannel.EventType.ERROR, err => {\n      if (!closed) {\n        closed = true;\n        logWarn(LOG_TAG, 'WebChannel transport errored:', err);\n        streamBridge.callOnClose(\n          new FirestoreError(\n            Code.UNAVAILABLE,\n            'The operation could not be completed'\n          )\n        );\n      }\n    });\n\n    // WebChannel delivers message events as array. If batching is not enabled\n    // (it's off by default) each message will be delivered alone, resulting in\n    // a single element array.\n    interface WebChannelResponse {\n      data: Resp[];\n    }\n\n    unguardedEventListen<WebChannelResponse>(\n      WebChannel.EventType.MESSAGE,\n      msg => {\n        if (!closed) {\n          const msgData = msg!.data[0];\n          hardAssert(!!msgData, 'Got a webchannel message without data.');\n          // TODO(b/35143891): There is a bug in One Platform that caused errors\n          // (and only errors) to be wrapped in an extra array. To be forward\n          // compatible with the bug we need to check either condition. The latter\n          // can be removed once the fix has been rolled out.\n          // Use any because msgData.error is not typed.\n          const msgDataOrError: WebChannelError | object = msgData;\n          const error =\n            msgDataOrError.error ||\n            (msgDataOrError as WebChannelError[])[0]?.error;\n          if (error) {\n            logDebug(LOG_TAG, 'WebChannel received error:', error);\n            // error.status will be a string like 'OK' or 'NOT_FOUND'.\n            const status: string = error.status;\n            let code = mapCodeFromRpcStatus(status);\n            let message = error.message;\n            if (code === undefined) {\n              code = Code.INTERNAL;\n              message =\n                'Unknown error status: ' +\n                status +\n                ' with message ' +\n                error.message;\n            }\n            // Mark closed so no further events are propagated\n            closed = true;\n            streamBridge.callOnClose(new FirestoreError(code, message));\n            channel.close();\n          } else {\n            logDebug(LOG_TAG, 'WebChannel received:', msgData);\n            streamBridge.callOnMessage(msgData);\n          }\n        }\n      }\n    );\n\n    setTimeout(() => {\n      // Technically we could/should wait for the WebChannel opened event,\n      // but because we want to send the first message with the WebChannel\n      // handshake we pretend the channel opened here (asynchronously), and\n      // then delay the actual open until the first message is sent.\n      streamBridge.callOnOpen();\n    }, 0);\n    return streamBridge;\n  }\n\n  // visible for testing\n  makeUrl(rpcName: string): string {\n    const urlRpcName = RPC_NAME_REST_MAPPING[rpcName];\n    debugAssert(\n      urlRpcName !== undefined,\n      'Unknown REST mapping for: ' + rpcName\n    );\n    return (\n      this.baseUrl +\n      '/' +\n      RPC_URL_VERSION +\n      '/projects/' +\n      this.databaseId.projectId +\n      '/databases/' +\n      this.databaseId.database +\n      '/documents:' +\n      urlRpcName\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport firebase from '@firebase/app';\nimport { FirebaseNamespace } from '@firebase/app-types';\n\nimport { Firestore } from './src/api/database';\nimport { IndexedDbComponentProvider } from './src/core/component_provider';\nimport { configureForFirebase } from './src/platform/config';\nimport { name, version } from './package.json';\n\nimport './register-module';\nimport './src/platform_browser/browser_init';\n\n/**\n * Registers the main Firestore build with the components framework.\n * Persistence can be enabled via `firebase.firestore().enablePersistence()`.\n */\nexport function registerFirestore(instance: FirebaseNamespace): void {\n  configureForFirebase(\n    instance,\n    (app, auth) => new Firestore(app, auth, new IndexedDbComponentProvider())\n  );\n  instance.registerVersion(name, version);\n}\n\nregisterFirestore(firebase);\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PlatformSupport } from '../platform/platform';\nimport { BrowserPlatform } from './browser_platform';\n\n/**\n * This code needs to run before Firestore is used. This can be achieved in\n * several ways:\n *   1) Through the JSCompiler compiling this code and then (automatically)\n *      executing it before exporting the Firestore symbols.\n *   2) Through importing this module first in a Firestore main module\n */\nPlatformSupport.setPlatform(new BrowserPlatform());\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DatabaseId, DatabaseInfo } from '../core/database_info';\nimport { Platform } from '../platform/platform';\nimport { Connection } from '../remote/connection';\nimport { JsonProtoSerializer } from '../remote/serializer';\nimport { ConnectivityMonitor } from './../remote/connectivity_monitor';\n\nimport { NoopConnectivityMonitor } from '../remote/connectivity_monitor_noop';\nimport { BrowserConnectivityMonitor } from './browser_connectivity_monitor';\nimport { WebChannelConnection } from './webchannel_connection';\nimport { debugAssert } from '../util/assert';\n\n// Implements the Platform API for browsers and some browser-like environments\n// (including ReactNative).\nexport class BrowserPlatform implements Platform {\n  readonly base64Available: boolean;\n\n  constructor() {\n    this.base64Available = typeof atob !== 'undefined';\n  }\n\n  get document(): Document | null {\n    // `document` is not always available, e.g. in ReactNative and WebWorkers.\n    // eslint-disable-next-line no-restricted-globals\n    return typeof document !== 'undefined' ? document : null;\n  }\n\n  get window(): Window | null {\n    // `window` is not always available, e.g. in ReactNative and WebWorkers.\n    // eslint-disable-next-line no-restricted-globals\n    return typeof window !== 'undefined' ? window : null;\n  }\n\n  loadConnection(databaseInfo: DatabaseInfo): Promise<Connection> {\n    return Promise.resolve(new WebChannelConnection(databaseInfo));\n  }\n\n  newConnectivityMonitor(): ConnectivityMonitor {\n    if (BrowserConnectivityMonitor.isAvailable()) {\n      return new BrowserConnectivityMonitor();\n    } else {\n      return new NoopConnectivityMonitor();\n    }\n  }\n\n  newSerializer(databaseId: DatabaseId): JsonProtoSerializer {\n    return new JsonProtoSerializer(databaseId, { useProto3Json: true });\n  }\n\n  formatJSON(value: unknown): string {\n    return JSON.stringify(value);\n  }\n\n  atob(encoded: string): string {\n    return atob(encoded);\n  }\n\n  btoa(raw: string): string {\n    return btoa(raw);\n  }\n\n  randomBytes(nBytes: number): Uint8Array {\n    debugAssert(nBytes >= 0, `Expecting non-negative nBytes, got: ${nBytes}`);\n\n    // Polyfills for IE and WebWorker by using `self` and `msCrypto` when `crypto` is not available.\n    const crypto =\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      typeof self !== 'undefined' && (self.crypto || (self as any)['msCrypto']);\n    const bytes = new Uint8Array(nBytes);\n    if (crypto) {\n      crypto.getRandomValues(bytes);\n    } else {\n      // Falls back to Math.random\n      for (let i = 0; i < nBytes; i++) {\n        bytes[i] = Math.floor(Math.random() * 256);\n      }\n    }\n    return bytes;\n  }\n}\n"],"names":["SDK_VERSION","firebase","User","[object Object]","uid","this","__PRIVATE_isAuthenticated","__PRIVATE_otherUser","Code","OK","CANCELLED","UNKNOWN","INVALID_ARGUMENT","DEADLINE_EXCEEDED","NOT_FOUND","ALREADY_EXISTS","PERMISSION_DENIED","UNAUTHENTICATED","RESOURCE_EXHAUSTED","FAILED_PRECONDITION","ABORTED","OUT_OF_RANGE","UNIMPLEMENTED","INTERNAL","UNAVAILABLE","DATA_LOSS","FirestoreError","Error","code","message","super","toString","name","__PRIVATE_OAuthToken","value","user","__PRIVATE_authHeaders","__PRIVATE_EmptyCredentialsProvider","Promise","resolve","__PRIVATE_changeListener","__PRIVATE_FirebaseCredentialsProvider","__PRIVATE_authProvider","__PRIVATE_tokenListener","__PRIVATE_tokenCounter","currentUser","__PRIVATE_getUser","__PRIVATE_receivedInitialUser","auth","getImmediate","optional","addAuthTokenListener","get","then","__PRIVATE_initialTokenCounter","forceRefresh","getToken","__PRIVATE_tokenData","__PRIVATE_logDebug","__PRIVATE_hardAssert","accessToken","removeAuthTokenListener","__PRIVATE_currentUid","getUid","__PRIVATE_FirstPartyToken","__PRIVATE_gapi","__PRIVATE_sessionIndex","__PRIVATE_FIRST_PARTY","o","headers","X-Goog-AuthUser","__PRIVATE_authHeader","__PRIVATE_getAuthHeaderValueForFirstParty","__PRIVATE_FirstPartyCredentialsProvider","Timestamp","seconds","nanoseconds","fromMillis","Date","now","date","getTime","milliseconds","Math","floor","toMillis","other","__PRIVATE_primitiveComparator","__PRIVATE_adjustedSeconds","String","padStart","__PRIVATE_SnapshotVersion","timestamp","__PRIVATE__compareTo","isEqual","__PRIVATE_BasePath","segments","offset","length","undefined","fail","__PRIVATE_len","__PRIVATE_comparator","__PRIVATE_nameOrPath","slice","limit","forEach","__PRIVATE_segment","push","__PRIVATE_construct","size","index","__PRIVATE_i","__PRIVATE_potentialChild","fn","end","p1","p2","min","left","right","ResourcePath","__PRIVATE_toArray","join","__PRIVATE_canonicalString","path","indexOf","split","filter","__PRIVATE_identifierRegExp","FieldPath","test","map","str","replace","__PRIVATE_isValidIdentifier","__PRIVATE_current","__PRIVATE_addCurrentSegment","__PRIVATE_inBackticks","c","next","__PRIVATE_DocumentKey","__PRIVATE_fromString","__PRIVATE_popFirst","collectionId","k1","k2","__PRIVATE_objectSize","obj","count","key","Object","prototype","hasOwnProperty","call","__PRIVATE_isEmpty","__PRIVATE_ByteString","__PRIVATE_binaryString","base64","__PRIVATE_PlatformSupport","__PRIVATE_getPlatform","atob","array","fromCharCode","__PRIVATE_binaryStringFromUint8Array","btoa","buffer","Uint8Array","charCodeAt","__PRIVATE_uint8ArrayFromBinaryString","__PRIVATE_isNullOrUndefined","__PRIVATE_isNegativeZero","isSafeInteger","Number","isInteger","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","__PRIVATE_isServerTimestamp","mapValue","fields","stringValue","__PRIVATE_getLocalWriteTime","__PRIVATE_localWriteTime","__PRIVATE_normalizeTimestamp","nanos","__PRIVATE_ISO_TIMESTAMP_REG_EXP","RegExp","__PRIVATE_typeOrder","__PRIVATE_valueEquals","__PRIVATE_leftType","booleanValue","timestampValue","__PRIVATE_leftTimestamp","__PRIVATE_rightTimestamp","__PRIVATE_timestampEquals","__PRIVATE_normalizeByteString","__PRIVATE_blobEquals","referenceValue","__PRIVATE_normalizeNumber","geoPointValue","latitude","longitude","__PRIVATE_geoPointEquals","integerValue","__PRIVATE_n1","__PRIVATE_n2","isNaN","__PRIVATE_numberEquals","__PRIVATE_arrayEquals","arrayValue","values","__PRIVATE_leftMap","__PRIVATE_rightMap","__PRIVATE_objectEquals","__PRIVATE_arrayValueContains","__PRIVATE_haystack","__PRIVATE_needle","find","v","__PRIVATE_valueCompare","__PRIVATE_rightType","__PRIVATE_leftNumber","doubleValue","__PRIVATE_rightNumber","__PRIVATE_compareNumbers","__PRIVATE_compareTimestamps","__PRIVATE_leftBytes","__PRIVATE_rightBytes","__PRIVATE_compareTo","__PRIVATE_compareBlobs","__PRIVATE_leftPath","__PRIVATE_rightPath","__PRIVATE_leftSegments","__PRIVATE_rightSegments","__PRIVATE_comparison","__PRIVATE_compareReferences","__PRIVATE_compareGeoPoints","__PRIVATE_leftArray","__PRIVATE_rightArray","compare","__PRIVATE_compareArrays","__PRIVATE_leftKeys","keys","__PRIVATE_rightKeys","sort","__PRIVATE_keyCompare","__PRIVATE_compareMaps","canonicalId","__PRIVATE_canonifyValue","__PRIVATE_normalizedTimestamp","__PRIVATE_canonifyTimestamp","toBase64","__PRIVATE_fromName","__PRIVATE_geoPoint","result","first","__PRIVATE_canonifyArray","__PRIVATE_sortedKeys","__PRIVATE_canonifyMap","__PRIVATE_fraction","exec","__PRIVATE_nanoStr","substr","__PRIVATE_parsedDate","blob","fromBase64String","fromUint8Array","__PRIVATE_refValue","__PRIVATE_databaseId","projectId","database","isArray","__PRIVATE_isNullValue","__PRIVATE_isNanValue","__PRIVATE_isMapValue","__PRIVATE_ServerTimestampTransform","previousValue","__type__","__local_write_time__","serverTimestamp","__PRIVATE_transformResult","__PRIVATE_ArrayUnionTransformOperation","elements","apply","__PRIVATE_coercedFieldValuesArray","__PRIVATE_toUnion","some","element","__PRIVATE_ArrayRemoveTransformOperation","__PRIVATE_toRemove","__PRIVATE_NumericIncrementTransformOperation","serializer","__PRIVATE_operand","__PRIVATE_baseValue","__PRIVATE_computeBaseValue","__PRIVATE_sum","asNumber","__PRIVATE_toInteger","__PRIVATE_toDouble","__PRIVATE_isDouble","__PRIVATE_FieldMask","fieldPath","__PRIVATE_fieldMaskPath","__PRIVATE_isPrefixOf","__PRIVATE_l","r","FieldTransform","field","transform","__PRIVATE_MutationResult","version","transformResults","Precondition","updateTime","exists","Tt","__PRIVATE_maybeDoc","Document","__PRIVATE_Mutation","__PRIVATE_SetMutation","__PRIVATE_precondition","__PRIVATE_mutationResult","__PRIVATE_verifyKeyMatches","hasCommittedMutations","__PRIVATE_baseDoc","__PRIVATE_isValidFor","__PRIVATE_getPostMutationVersion","At","__PRIVATE_PatchMutation","data","__PRIVATE_fieldMask","__PRIVATE_UnknownDocument","__PRIVATE_newData","__PRIVATE_patchDocument","__PRIVATE_ObjectValue","empty","__PRIVATE_patchObject","__PRIVATE_builder","__PRIVATE_ObjectValueBuilder","newValue","set","delete","__PRIVATE_build","__PRIVATE_TransformMutation","fieldTransforms","doc","__PRIVATE_requireDocument","__PRIVATE_serverTransformResults","__PRIVATE_transformObject","__PRIVATE_localTransformResults","__PRIVATE_baseObject","__PRIVATE_fieldTransform","__PRIVATE_existingValue","__PRIVATE_coercedValue","__PRIVATE_applyToRemoteDocument","__PRIVATE_applyToLocalView","__PRIVATE_DeleteMutation","__PRIVATE_NoDocument","__PRIVATE_VerifyMutation","proto","__PRIVATE_lastSegment","Map","__PRIVATE_setOverlay","__PRIVATE_currentLevel","__PRIVATE_overlayMap","__PRIVATE_currentSegment","currentValue","entries","__PRIVATE_mergedResult","__PRIVATE_applyOverlay","__PRIVATE_EMPTY_PATH","__PRIVATE_currentPath","__PRIVATE_currentOverlays","__PRIVATE_modified","__PRIVATE_resultAtPath","__PRIVATE_pathSegment","__PRIVATE_nested","child","__PRIVATE_extractFieldMask","__PRIVATE_nestedFields","__PRIVATE_nestedPath","__PRIVATE_MaybeDocument","__PRIVATE_objectValue","options","__PRIVATE_hasLocalMutations","hasPendingWrites","Target","collectionGroup","orderBy","filters","startAt","endAt","__PRIVATE_memoizedCanonicalId","f","__PRIVATE_isDocumentKey","Query","__PRIVATE_explicitOrderBy","__PRIVATE_limitType","__PRIVATE_assertValidBound","__PRIVATE_memoizedOrderBy","__PRIVATE_inequalityField","__PRIVATE_getInequalityFilterField","__PRIVATE_firstOrderByField","__PRIVATE_getFirstOrderByField","__PRIVATE_isKeyField","__PRIVATE_OrderBy","__PRIVATE_keyField","__PRIVATE_foundKeyOrdering","__PRIVATE_lastDirection","dir","__PRIVATE_newFilters","concat","__PRIVATE_newOrderBy","bound","__PRIVATE_toTarget","__PRIVATE_d1","__PRIVATE_d2","__PRIVATE_comparedOnKeyField","__PRIVATE_comp","__PRIVATE_matchesPathAndCollectionGroup","__PRIVATE_matchesOrderBy","__PRIVATE_matchesFilters","__PRIVATE_matchesBounds","FieldFilter","__PRIVATE_isInequality","__PRIVATE_operators","op","__PRIVATE_isDocumentQuery","__PRIVATE_memoizedTarget","__PRIVATE_orderBys","__PRIVATE_Bound","position","before","__PRIVATE_docPath","__PRIVATE_hasCollectionId","__PRIVATE_isImmediateParentOf","matches","__PRIVATE_sortsBeforeDocument","__PRIVATE_KeyFieldInFilter","__PRIVATE_KeyFieldFilter","__PRIVATE_ArrayContainsFilter","__PRIVATE_InFilter","__PRIVATE_ArrayContainsAnyFilter","__PRIVATE_matchesComparison","val","p","__PRIVATE_orderByComponent","component","__PRIVATE_isKeyOrderBy","v1","v2","__PRIVATE_compareDocumentsByField","__PRIVATE_TargetData","target","targetId","__PRIVATE_purpose","sequenceNumber","__PRIVATE_snapshotVersion","lastLimboFreeSnapshotVersion","resumeToken","__PRIVATE_EMPTY_BYTE_STRING","ExistenceFilter","__PRIVATE_RpcCode","__PRIVATE_isPermanentError","__PRIVATE_mapCodeFromRpcCode","__PRIVATE_logError","RpcCode","__PRIVATE_SortedMap","root","__PRIVATE_LLRBNode","EMPTY","__PRIVATE_insert","__PRIVATE_copy","__PRIVATE_BLACK","remove","node","cmp","__PRIVATE_prunedNodes","__PRIVATE_minKey","__PRIVATE_maxKey","action","__PRIVATE_inorderTraversal","k","__PRIVATE_descriptions","__PRIVATE_reverseTraversal","__PRIVATE_SortedMapIterator","__PRIVATE_startKey","__PRIVATE_isReverse","__PRIVATE_nodeStack","pop","color","RED","n","__PRIVATE_fixUp","__PRIVATE_isRed","__PRIVATE_moveRedLeft","__PRIVATE_removeMin","__PRIVATE_smallest","__PRIVATE_rotateRight","__PRIVATE_moveRedRight","__PRIVATE_rotateLeft","__PRIVATE_colorFlip","__PRIVATE_nl","__PRIVATE_nr","__PRIVATE_blackDepth","__PRIVATE_check","pow","__PRIVATE_SortedSet","__PRIVATE_elem","cb","range","__PRIVATE_iter","__PRIVATE_getIteratorFrom","__PRIVATE_hasNext","__PRIVATE_getNext","start","__PRIVATE_getIterator","__PRIVATE_SortedSetIterator","has","add","__PRIVATE_thisIt","__PRIVATE_otherIt","__PRIVATE_thisElem","__PRIVATE_otherElem","__PRIVATE_res","__PRIVATE_EMPTY_MAYBE_DOCUMENT_MAP","__PRIVATE_maybeDocumentMap","__PRIVATE_nullableMaybeDocumentMap","__PRIVATE_EMPTY_DOCUMENT_MAP","__PRIVATE_documentMap","__PRIVATE_EMPTY_DOCUMENT_VERSION_MAP","__PRIVATE_EMPTY_DOCUMENT_KEY_SET","__PRIVATE_documentKeySet","__PRIVATE_EMPTY_TARGET_ID_SET","__PRIVATE_targetIdSet","__PRIVATE_DocumentSet","__PRIVATE_keyedMap","__PRIVATE_sortedSet","__PRIVATE_oldSet","__PRIVATE_thisDoc","__PRIVATE_otherDoc","__PRIVATE_docStrings","__PRIVATE_newSet","__PRIVATE_DocumentChangeSet","__PRIVATE_change","__PRIVATE_oldChange","__PRIVATE_changeMap","type","__PRIVATE_changes","__PRIVATE_ViewSnapshot","query","docs","__PRIVATE_oldDocs","docChanges","__PRIVATE_mutatedKeys","fromCache","__PRIVATE_syncStateChanged","__PRIVATE_excludesMetadataChanges","documents","__PRIVATE_emptySet","__PRIVATE_otherChanges","__PRIVATE_RemoteEvent","__PRIVATE_targetChanges","__PRIVATE_targetMismatches","__PRIVATE_documentUpdates","__PRIVATE_resolvedLimboDocuments","TargetChange","__PRIVATE_createSynthesizedTargetChangeForCurrentChange","__PRIVATE_addedDocuments","__PRIVATE_modifiedDocuments","__PRIVATE_removedDocuments","__PRIVATE_DocumentWatchChange","__PRIVATE_updatedTargetIds","removedTargetIds","__PRIVATE_newDoc","__PRIVATE_ExistenceFilterChange","__PRIVATE_existenceFilter","__PRIVATE_WatchTargetChange","state","targetIds","cause","__PRIVATE_TargetState","__PRIVATE_snapshotChangesMap","fs","__PRIVATE__current","__PRIVATE__resumeToken","ys","__PRIVATE_pendingResponses","bs","__PRIVATE__hasPendingChanges","__PRIVATE_approximateByteSize","__PRIVATE_documentChanges","__PRIVATE_changeType","__PRIVATE_WatchChangeAggregator","__PRIVATE_metadataProvider","__PRIVATE_documentTargetMap","__PRIVATE_docChange","__PRIVATE_addDocumentToTarget","__PRIVATE_removeDocumentFromTarget","targetChange","__PRIVATE_forEachTarget","__PRIVATE_targetState","__PRIVATE_ensureTargetState","__PRIVATE_isActiveTarget","__PRIVATE_updateResumeToken","__PRIVATE_recordTargetResponse","__PRIVATE_isPending","__PRIVATE_clearPendingChanges","removeTarget","__PRIVATE_markCurrent","__PRIVATE_resetTarget","__PRIVATE_targetStates","__PRIVATE__","__PRIVATE_watchChange","__PRIVATE_expectedCount","__PRIVATE_targetData","__PRIVATE_targetDataForActiveTarget","__PRIVATE_getCurrentDocumentCountForTarget","__PRIVATE_pendingTargetResets","__PRIVATE_pendingDocumentUpdates","__PRIVATE_targetContainsDocument","__PRIVATE_hasPendingChanges","__PRIVATE_toTargetChange","__PRIVATE_pendingDocumentTargetMapping","__PRIVATE_targets","__PRIVATE_isOnlyLimboTarget","__PRIVATE_forEachWhile","__PRIVATE_remoteEvent","document","__PRIVATE_addDocumentChange","__PRIVATE_ensureDocumentTargetMapping","__PRIVATE_updatedDocument","__PRIVATE_removeDocumentChange","__PRIVATE_getRemoteKeysForTarget","__PRIVATE_recordPendingTargetRequest","__PRIVATE_targetMapping","__PRIVATE_targetActive","__PRIVATE_getTargetDataForTarget","__PRIVATE_DIRECTIONS","__PRIVATE_dirs","asc","desc","__PRIVATE_OPERATORS","__PRIVATE_ops","<","<=",">",">=","==","array-contains","in","array-contains-any","__PRIVATE_JsonProtoSerializer","status","__PRIVATE_useProto3Json","Infinity","toISOString","bytes","toUint8Array","__PRIVATE_toTimestamp","__PRIVATE_fromTimestamp","__PRIVATE_fullyQualifiedPrefixPath","__PRIVATE_resource","__PRIVATE_isValidResourceName","__PRIVATE_toResourceName","__PRIVATE_fromResourceName","__PRIVATE_extractLocalPathFromResourceName","__PRIVATE_resourceName","wi","__PRIVATE_toName","__PRIVATE_toProto","fromVersion","found","missing","readTime","__PRIVATE_fromFound","__PRIVATE_fromMissing","__PRIVATE_fromWatchTargetChangeState","targetChangeType","__PRIVATE_fromBytes","__PRIVATE_causeProto","__PRIVATE_fromRpcStatus","documentChange","__PRIVATE_entityChange","documentDelete","__PRIVATE_docDelete","documentRemove","__PRIVATE_docRemove","__PRIVATE_mutation","update","__PRIVATE_toMutationDocument","updateMask","__PRIVATE_toDocumentMask","__PRIVATE_toFieldTransform","verify","__PRIVATE_isNone","currentDocument","__PRIVATE_toPrecondition","__PRIVATE_fromPrecondition","__PRIVATE_none","__PRIVATE_fromDocumentMask","__PRIVATE_fromFieldTransform","toVersion","commitTime","__PRIVATE_protos","__PRIVATE_fromWriteResult","setToServerValue","appendMissingElements","removeAllFromArray","increment","instance","__PRIVATE_fromServerFormat","__PRIVATE_toQueryPath","__PRIVATE_documentsTarget","__PRIVATE_atPath","__PRIVATE_fromQueryPath","structuredQuery","parent","from","allDescendants","__PRIVATE_popLast","where","__PRIVATE_toFilter","__PRIVATE_toOrder","__PRIVATE_toInt32Proto","__PRIVATE_toCursor","__PRIVATE_fromCount","__PRIVATE_filterBy","__PRIVATE_fromFilter","__PRIVATE_fromOrder","__PRIVATE_fromInt32Proto","__PRIVATE_fromCursor","__PRIVATE_toLabel","goog-listen-tags","__PRIVATE_toDocumentsTarget","__PRIVATE_toQueryTarget","__PRIVATE_toBytes","__PRIVATE_toUnaryOrFieldFilter","compositeFilter","unaryFilter","__PRIVATE_fromUnaryFilter","fieldFilter","__PRIVATE_fromFieldFilter","reduce","__PRIVATE_accum","order","__PRIVATE_toPropertyOrder","__PRIVATE_fromPropertyOrder","cursor","__PRIVATE_fieldReference","__PRIVATE_toFieldPathReference","direction","__PRIVATE_toDirection","__PRIVATE_fromFieldPathReference","__PRIVATE_fromDirection","create","__PRIVATE_fromOperatorName","__PRIVATE_toOperatorName","__PRIVATE_nanField","NaN","__PRIVATE_nullField","nullValue","__PRIVATE_canonicalFields","fieldPaths","__PRIVATE_paths","platform","__PRIVATE_logClient","Logger","__PRIVATE_getLogLevel","logLevel","msg","LogLevel","DEBUG","args","__PRIVATE_argToString","debug","ERROR","error","__PRIVATE_formatJSON","e","__PRIVATE_failure","assertion","__PRIVATE_debugCast","constructor","__PRIVATE_AutoId","__PRIVATE_chars","__PRIVATE_maxMultiple","__PRIVATE_autoId","__PRIVATE_randomBytes","charAt","every","__PRIVATE_immediateSuccessor","s","__PRIVATE_DatabaseInfo","persistenceKey","host","ssl","forceLongPolling","__PRIVATE_DatabaseId","ln","__PRIVATE_ObjectMap","__PRIVATE_mapKeyFn","id","__PRIVATE_inner","__PRIVATE_otherKey","splice","__PRIVATE_MutationBatch","batchId","baseMutations","mutations","__PRIVATE_docKey","__PRIVATE_batchResult","__PRIVATE_mutationResults","__PRIVATE_maybeDocs","__PRIVATE_mutatedDocuments","__PRIVATE_m","__PRIVATE_mutatedDocument","__PRIVATE_MutationBatchResult","batch","__PRIVATE_commitVersion","__PRIVATE_docVersions","results","__PRIVATE_versionMap","PersistencePromise","callback","__PRIVATE_isDone","__PRIVATE_nextCallback","__PRIVATE_catchCallback","__PRIVATE_nextFn","__PRIVATE_catchFn","__PRIVATE_callbackAttached","__PRIVATE_wrapFailure","__PRIVATE_wrapSuccess","reject","__PRIVATE_wrapUserFunction","all","__PRIVATE_resolvedCount","done","__PRIVATE_err","__PRIVATE_predicates","predicate","__PRIVATE_isTrue","collection","__PRIVATE_promises","__PRIVATE_waitFor","__PRIVATE_RemoteDocumentChangeBuffer","__PRIVATE__readTime","__PRIVATE_maybeDocument","__PRIVATE_assertNotApplied","transaction","__PRIVATE_documentKey","__PRIVATE_bufferedEntry","__PRIVATE_getFromCache","__PRIVATE_documentKeys","__PRIVATE_getAllFromCache","__PRIVATE_changesApplied","__PRIVATE_applyChanges","__PRIVATE_PRIMARY_LEASE_LOST_ERROR_MSG","__PRIVATE_PersistenceTransaction","listener","__PRIVATE_onCommittedListeners","__PRIVATE_LocalDocumentsView","__PRIVATE_remoteDocumentCache","__PRIVATE_mutationQueue","__PRIVATE_indexManager","__PRIVATE_getAllMutationBatchesAffectingDocumentKey","__PRIVATE_batches","__PRIVATE_getDocumentInternal","__PRIVATE_inBatches","__PRIVATE_getEntry","__PRIVATE_localView","getEntries","__PRIVATE_getLocalViewOfDocuments","__PRIVATE_baseDocs","__PRIVATE_getAllMutationBatchesAffectingDocumentKeys","__PRIVATE_applyLocalMutationsToDocuments","__PRIVATE_sinceReadTime","__PRIVATE_getDocumentsMatchingDocumentQuery","__PRIVATE_isCollectionGroupQuery","__PRIVATE_getDocumentsMatchingCollectionGroupQuery","__PRIVATE_getDocumentsMatchingCollectionQuery","__PRIVATE_getDocument","__PRIVATE_getCollectionParents","__PRIVATE_parents","__PRIVATE_collectionQuery","__PRIVATE_asCollectionQueryAtPath","__PRIVATE_mutationBatches","__PRIVATE_getDocumentsMatchingQuery","__PRIVATE_queryResults","__PRIVATE_getAllMutationBatchesAffectingQuery","__PRIVATE_matchingMutationBatches","__PRIVATE_addMissingBaseDocuments","__PRIVATE_mergedDocuments","__PRIVATE_mutatedDoc","__PRIVATE_existingDocuments","__PRIVATE_missingBaseDocEntriesForPatching","__PRIVATE_missingBaseDocs","__PRIVATE_LocalViewChanges","__PRIVATE_addedKeys","__PRIVATE_removedKeys","__PRIVATE_viewSnapshot","__PRIVATE_ListenSequence","__PRIVATE_sequenceNumberSyncer","__PRIVATE_sequenceNumberHandler","__PRIVATE_setPreviousValue","__PRIVATE_writeNewSequenceNumber","__PRIVATE_writeSequenceNumber","__PRIVATE_externalPreviousValue","max","__PRIVATE_nextValue","__PRIVATE_Deferred","promise","__PRIVATE_ExponentialBackoff","__PRIVATE_queue","__PRIVATE_timerId","__PRIVATE_initialDelayMs","__PRIVATE_backoffFactor","__PRIVATE_maxDelayMs","reset","__PRIVATE_currentBaseMs","cancel","__PRIVATE_desiredDelayWithJitterMs","__PRIVATE_jitterDelayMs","__PRIVATE_delaySoFarMs","__PRIVATE_lastAttemptTime","__PRIVATE_remainingDelayMs","__PRIVATE_timerPromise","__PRIVATE_enqueueAfterDelay","__PRIVATE_skipDelay","random","__PRIVATE_encodeResourcePath","__PRIVATE_encodeSeparator","__PRIVATE_encodeSegment","__PRIVATE_resultBuf","__PRIVATE_escapeChar","__PRIVATE_decodeResourcePath","__PRIVATE_lastReasonableEscapeIndex","__PRIVATE_segmentBuilder","__PRIVATE_currentPiece","substring","__PRIVATE_MemoryIndexManager","__PRIVATE_MemoryCollectionParentIndex","collectionPath","__PRIVATE_collectionParentIndex","parentPath","__PRIVATE_existingParents","__PRIVATE_added","__PRIVATE_IndexedDbIndexManager","__PRIVATE_collectionParentsCache","__PRIVATE_addOnCommittedListener","__PRIVATE_collectionParent","__PRIVATE_collectionParentsStore","put","__PRIVATE_parentPaths","IDBKeyRange","__PRIVATE_loadAll","__PRIVATE_entry","txn","__PRIVATE_IndexedDbPersistence","__PRIVATE_getStore","DbCollectionParent","store","__PRIVATE_IndexedDbRemoteDocumentCache","__PRIVATE_remoteDocumentsStore","__PRIVATE_dbKey","__PRIVATE_sizeDelta","getMetadata","metadata","byteSize","__PRIVATE_setMetadata","__PRIVATE_dbRemoteDoc","__PRIVATE_maybeDecodeDocument","xr","__PRIVATE_dbDocumentSize","__PRIVATE_forEachDbEntry","__PRIVATE_sizeMap","Br","qr","last","__PRIVATE_keyIter","__PRIVATE_nextKey","__PRIVATE_iterate","__PRIVATE_potentialKeyRaw","control","__PRIVATE_potentialKey","__PRIVATE_fromSegments","__PRIVATE_skip","__PRIVATE_immediateChildrenPathLength","__PRIVATE_iterationOptions","lowerBound","__PRIVATE_collectionKey","__PRIVATE_readTimeKey","__PRIVATE_toDbTimestampKey","DbRemoteDocument","collectionReadTimeIndex","__PRIVATE_fromDbRemoteDocument","__PRIVATE_changedDocs","__PRIVATE_lastReadTime","__PRIVATE_documentsStore","readTimeIndex","Gr","__PRIVATE_fromDbTimestampKey","reverse","__PRIVATE_trackRemovals","__PRIVATE_documentGlobalStore","DbRemoteDocumentGlobal","unknownDocument","noDocument","JSON","stringify","__PRIVATE_documentCache","__PRIVATE_collectionParents","__PRIVATE_previousSize","__PRIVATE_documentSizes","__PRIVATE_toDbRemoteDocument","__PRIVATE_addEntry","__PRIVATE_deletedDoc","__PRIVATE_removeEntry","__PRIVATE_addToCollectionParentIndex","updateMetadata","__PRIVATE_getSizedEntry","__PRIVATE_getResult","__PRIVATE_getSizedEntries","__PRIVATE_maybeDocuments","__PRIVATE_TargetIdGenerator","__PRIVATE_lastId","__PRIVATE_IndexedDbTargetCache","__PRIVATE_referenceDelegate","__PRIVATE_retrieveMetadata","__PRIVATE_targetIdGenerator","highestTargetId","__PRIVATE_saveMetadata","lastRemoteSnapshotVersion","__PRIVATE_targetGlobal","highestListenSequenceNumber","__PRIVATE_saveTargetData","targetCount","__PRIVATE_updateMetadataFromTargetData","__PRIVATE_removeMatchingKeysForTargetId","__PRIVATE_targetsStore","upperBound","activeTargetIds","__PRIVATE_fromDbTarget","__PRIVATE_removeTargetData","__PRIVATE_globalTargetStore","DbTargetGlobal","__PRIVATE_toDbTarget","updated","NEGATIVE_INFINITY","POSITIVE_INFINITY","DbTarget","queryTargetsIndexName","__PRIVATE_documentTargetStore","DbTargetDocument","__PRIVATE_addReference","__PRIVATE_removeReference","Dh","documentTargetsIndex","LocalSerializer","__PRIVATE_remoteSerializer","__PRIVATE_remoteDoc","__PRIVATE_fromDocument","__PRIVATE_fromDbTimestamp","__PRIVATE_dbReadTime","__PRIVATE_toDocument","__PRIVATE_toDbTimestamp","DbNoDocument","DbUnknownDocument","__PRIVATE_dbTimestampKey","DbTimestamp","__PRIVATE_dbTimestamp","userId","__PRIVATE_serializedBaseMutations","__PRIVATE_toMutation","__PRIVATE_serializedMutations","DbMutationBatch","__PRIVATE_dbBatch","__PRIVATE_fromMutation","localWriteTimeMs","__PRIVATE_dbTarget","__PRIVATE_fromDocumentsTarget","__PRIVATE_fromQueryTarget","lastListenSequenceNumber","__PRIVATE_dbLastLimboFreeTimestamp","__PRIVATE_queryProto","__PRIVATE_PRIMARY_LEASE_EXCLUSIVE_ERROR_MSG","__PRIVATE_IndexedDbTransaction","__PRIVATE_simpleDbTransaction","__PRIVATE_currentSequenceNumber","allowTabSynchronization","clientId","__PRIVATE_lruParams","__PRIVATE_forceOwningTab","__PRIVATE_isAvailable","__PRIVATE_IndexedDbLruDelegate","__PRIVATE_dbName","__PRIVATE_MAIN_DATABASE","__PRIVATE_targetCache","window","localStorage","__PRIVATE_webStorage","__PRIVATE_SimpleDb","__PRIVATE_openOrCreate","SCHEMA_VERSION","SchemaConverter","db","__PRIVATE_simpleDb","__PRIVATE_updateClientMetadataAndTryBecomePrimary","isPrimary","__PRIVATE_attachVisibilityHandler","__PRIVATE_attachWindowUnloadHook","__PRIVATE_scheduleClientMetadataAndPrimaryLeaseRefreshes","runTransaction","__PRIVATE_getHighestSequenceNumber","__PRIVATE_listenSequence","__PRIVATE__started","catch","reason","close","__PRIVATE_primaryStateListener","async","__PRIVATE_primaryState","__PRIVATE_started","__PRIVATE_databaseDeletedListener","__PRIVATE_setVersionChangeListener","event","newVersion","networkEnabled","__PRIVATE_enqueueAndForget","__PRIVATE_clientMetadataStore","DbClientMetadata","inForeground","__PRIVATE_verifyPrimaryLease","__PRIVATE_success","__PRIVATE_enqueueRetryable","__PRIVATE_canActAsPrimary","__PRIVATE_releasePrimaryLeaseIfHeld","__PRIVATE_acquireOrExtendPrimaryLease","__PRIVATE_isIndexedDbTransactionError","__PRIVATE_primaryClientStore","DbPrimaryClient","__PRIVATE_primaryClient","__PRIVATE_isLocalClient","__PRIVATE_isWithinAge","__PRIVATE_lastGarbageCollectionTime","__PRIVATE_inactiveClients","__PRIVATE_metadataStore","__PRIVATE_existingClients","active","__PRIVATE_filterActiveClients","__PRIVATE_inactive","__PRIVATE_client","__PRIVATE_inactiveClient","removeItem","__PRIVATE_zombiedClientLocalStorageKey","__PRIVATE_clientMetadataRefresher","__PRIVATE_maybeGarbageCollectMultiClientState","ownerId","__PRIVATE_currentPrimary","leaseTimestampMs","__PRIVATE_isClientZombied","__PRIVATE_otherClient","__PRIVATE_otherClientHasBetterNetworkState","__PRIVATE_otherClientHasBetterVisibility","__PRIVATE_otherClientHasSameNetworkState","__PRIVATE_markClientZombied","__PRIVATE_detachVisibilityHandler","__PRIVATE_detachWindowUnloadHook","__PRIVATE_removeClientMetadata","__PRIVATE_removeClientZombiedEntry","__PRIVATE_clients","__PRIVATE_activityThresholdMs","updateTimeMs","__PRIVATE_clientMetadata","ho","__PRIVATE_IndexedDbMutationQueue","__PRIVATE_forUser","mode","__PRIVATE_transactionOperation","__PRIVATE_simpleDbMode","__PRIVATE_persistenceTransaction","ALL_STORES","__PRIVATE_simpleDbTxn","__PRIVATE_INVALID","__PRIVATE_holdsPrimaryLease","__PRIVATE_verifyAllowTabSynchronization","__PRIVATE_raiseOnCommittedEvent","__PRIVATE_newPrimary","__PRIVATE_databaseInfo","__PRIVATE_isDefaultDatabase","__PRIVATE_maxAgeMs","addEventListener","__PRIVATE_documentVisibilityHandler","visibilityState","removeEventListener","__PRIVATE_windowUnloadHandler","__PRIVATE_shutdown","__PRIVATE_isZombied","getItem","setItem","__PRIVATE_params","__PRIVATE_garbageCollector","__PRIVATE_LruGarbageCollector","__PRIVATE_docCountPromise","__PRIVATE_orphanedDocumentCount","__PRIVATE_getTargetCache","__PRIVATE_getTargetCount","__PRIVATE_docCount","__PRIVATE_orphanedCount","__PRIVATE_forEachOrphanedDocumentSequenceNumber","__PRIVATE_forEachOrphanedDocument","__PRIVATE_writeSentinelKey","__PRIVATE_removeTargets","__PRIVATE_mutationQueuesStore","__PRIVATE_iterateSerial","__PRIVATE_mutationQueueContainsKey","__PRIVATE_containsKey","__PRIVATE_mutationQueuesContainKey","__PRIVATE_changeBuffer","__PRIVATE_getRemoteDocumentCache","__PRIVATE_newChangeBuffer","__PRIVATE_documentCount","__PRIVATE_isPinned","__PRIVATE_withSequenceNumber","__PRIVATE_updateTargetData","__PRIVATE_nextPath","__PRIVATE_nextToReport","__PRIVATE_getSize","__PRIVATE_sentinelRow","__PRIVATE_mutationsStore","userMutationsIndex","__PRIVATE_documentStore","__PRIVATE_documentMutationsStore","__PRIVATE_mutationStore","__PRIVATE_toDbMutationBatch","__PRIVATE_indexKey","DbDocumentMutation","PLACEHOLDER","__PRIVATE_documentKeysByBatchId","__PRIVATE_fromDbMutationBatch","__PRIVATE_lookupMutationBatch","__PRIVATE_nextBatchId","__PRIVATE_foundBatch","__PRIVATE_dbBatches","__PRIVATE_indexPrefix","prefixForPath","__PRIVATE_indexStart","__PRIVATE_userID","__PRIVATE_encodedPath","__PRIVATE_uniqueBatchIDs","__PRIVATE_batchID","__PRIVATE_lookupMutationBatches","__PRIVATE_queryPath","__PRIVATE_immediateChildrenLength","__PRIVATE_batchIDs","__PRIVATE_removeMutationBatch","__PRIVATE_removeCachedMutationKeys","__PRIVATE_markPotentiallyOrphaned","__PRIVATE_checkEmpty","__PRIVATE_startRange","prefixForUser","__PRIVATE_danglingMutationReferences","DbMutationQueue","keyPath","__PRIVATE_indexTxn","only","__PRIVATE_numDeleted","__PRIVATE_removePromise","__PRIVATE_SimpleDbTransaction","createObjectStore","__PRIVATE_createPrimaryClientStore","autoIncrement","createIndex","userMutationsKeyPath","unique","__PRIVATE_createMutationQueue","__PRIVATE_createQueryCache","__PRIVATE_createRemoteDocumentCache","deleteObjectStore","__PRIVATE_dropQueryCache","__PRIVATE_globalStore","__PRIVATE_writeEmptyTargetGlobalEntry","__PRIVATE_existingMutations","__PRIVATE_v3MutationsStore","__PRIVATE_writeAll","__PRIVATE_upgradeMutationBatchSchemaAndMigrateData","__PRIVATE_createClientMetadataStore","removeAcknowledgedMutations","__PRIVATE_createDocumentGlobalStore","addDocumentGlobal","ensureSequenceNumbers","createCollectionParentIndex","objectStoreNames","contains","__PRIVATE_dropRemoteDocumentChangesStore","__PRIVATE_remoteDocumentStore","objectStore","readTimeIndexPath","collectionReadTimeIndexPath","__PRIVATE_createRemoteDocumentReadTimeIndex","rewriteCanonicalIds","__PRIVATE_byteCount","__PRIVATE_queuesStore","__PRIVATE_queues","lastAcknowledgedBatchId","__PRIVATE_docSentinelKey","__PRIVATE_sentinelKey","__PRIVATE_maybeSentinel","cache","__PRIVATE_pathSegments","__PRIVATE_targetStore","__PRIVATE_originalDbTarget","__PRIVATE_originalTargetData","__PRIVATE_updatedDbTarget","lastStreamToken","documentTargetsKeyPath","queryTargetsKeyPath","__PRIVATE_getIOSVersion","getUA","__PRIVATE_schemaConverter","request","indexedDB","open","onsuccess","onblocked","onerror","onupgradeneeded","oldVersion","createOrUpgrade","__PRIVATE_toPromise","__PRIVATE_wrapRequest","deleteDatabase","__PRIVATE_isMockPersistence","__PRIVATE_ua","__PRIVATE_iOSVersion","__PRIVATE_isUnsupportedIOS","__PRIVATE_androidVersion","__PRIVATE_getAndroidVersion","__PRIVATE_isUnsupportedAndroid","__PRIVATE_process","__PRIVATE_env","__PRIVATE_USE_MOCK_PERSISTENCE","__PRIVATE_iOSVersionRegex","match","__PRIVATE_androidVersionRegex","__PRIVATE_versionChangeListener","onversionchange","__PRIVATE_objectStores","__PRIVATE_transactionFn","__PRIVATE_readonly","__PRIVATE_attemptNumber","__PRIVATE_transactionFnResult","abort","__PRIVATE_completionPromise","__PRIVATE_retryable","__PRIVATE_IterationController","__PRIVATE_dbCursor","Pn","__PRIVATE_shouldStop","Ta","__PRIVATE_IndexedDbTransactionError","oncomplete","__PRIVATE_completionDeferred","onabort","__PRIVATE_checkForAndReportiOSError","_a","aborted","__PRIVATE_storeName","__PRIVATE_SimpleDbStore","__PRIVATE_keyOrValue","__PRIVATE_indexOrRange","__PRIVATE_iterateCursor","__PRIVATE_keysOnly","__PRIVATE_optionsOrCallback","__PRIVATE_cursorRequest","primaryKey","__PRIVATE_shouldContinue","continue","controller","__PRIVATE_userResult","__PRIVATE_userPromise","__PRIVATE_skipToKey","__PRIVATE_indexName","openKeyCursor","openCursor","__PRIVATE_reportedIOSError","__PRIVATE_IOS_ERROR","__PRIVATE_newError","setTimeout","__PRIVATE_DelayedOperation","__PRIVATE_asyncQueue","__PRIVATE_targetTimeMs","__PRIVATE_removalCallback","__PRIVATE_deferred","bind","__PRIVATE_delayMs","__PRIVATE_targetTime","__PRIVATE_delayedOp","__PRIVATE_timerHandle","__PRIVATE_handleDelayElapsed","clearTimeout","__PRIVATE_AsyncQueue","__PRIVATE_backoff","__PRIVATE_skipBackoff","__PRIVATE_visibilityHandler","ka","__PRIVATE__isShuttingDown","enqueue","__PRIVATE_verifyNotFailed","__PRIVATE_enqueueInternal","__PRIVATE_enqueueEvenAfterShutdown","__PRIVATE_retryableTail","__PRIVATE_retryingOp","__PRIVATE_backoffAndRun","__PRIVATE_newTail","__PRIVATE_tail","__PRIVATE_operationInProgress","stack","includes","__PRIVATE_getMessageOrStack","__PRIVATE_timerIdsToSkip","__PRIVATE_createAndSchedule","__PRIVATE_removedOp","__PRIVATE_removeDelayedOperation","__PRIVATE_delayedOperations","__PRIVATE_currentTail","__PRIVATE_lastTimerId","__PRIVATE_drain","a","b","__PRIVATE_wrapInUserErrorIfRecoverable","__PRIVATE_bufferEntryComparator","__PRIVATE_aSequence","__PRIVATE_aIndex","__PRIVATE_bSequence","__PRIVATE_bIndex","__PRIVATE_seqCmp","__PRIVATE_RollingSequenceNumberBuffer","__PRIVATE_maxElements","__PRIVATE_previousIndex","__PRIVATE_nextIndex","__PRIVATE_highestValue","maxValue","__PRIVATE_GC_DID_NOT_RUN","Ja","Xa","Za","tu","__PRIVATE_LruParams","__PRIVATE_cacheSizeCollectionThreshold","__PRIVATE_percentileToCollect","__PRIVATE_maximumSequenceNumbersToCollect","__PRIVATE_cacheSize","__PRIVATE_DEFAULT_COLLECTION_PERCENTILE","__PRIVATE_DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT","__PRIVATE_DEFAULT_CACHE_SIZE_BYTES","__PRIVATE_COLLECTION_DISABLED","__PRIVATE_LruScheduler","__PRIVATE_gcTask","__PRIVATE_localStore","__PRIVATE_scheduleGC","delay","__PRIVATE_hasRun","__PRIVATE_collectGarbage","__PRIVATE_ignoreIfPrimaryLeaseLoss","__PRIVATE_delegate","__PRIVATE_percentile","__PRIVATE_getSequenceNumberCount","__PRIVATE_addElement","__PRIVATE_removeOrphanedDocuments","__PRIVATE_getCacheSize","__PRIVATE_runGarbageCollection","__PRIVATE_upperBoundSequenceNumber","__PRIVATE_sequenceNumbersToCollect","__PRIVATE_targetsRemoved","__PRIVATE_countedTargetsTs","__PRIVATE_foundUpperBoundTs","__PRIVATE_removedTargetsTs","__PRIVATE_removedDocumentsTs","__PRIVATE_startTs","__PRIVATE_calculateTargetCount","__PRIVATE_sequenceNumbers","__PRIVATE_nthSequenceNumber","__PRIVATE_numTargetsRemoved","__PRIVATE_documentsRemoved","__PRIVATE_LocalStore","persistence","__PRIVATE_queryEngine","__PRIVATE_initialUser","t","__PRIVATE_getMutationQueue","__PRIVATE_remoteDocuments","__PRIVATE_localDocuments","__PRIVATE_getIndexManager","__PRIVATE_setLocalDocumentsView","__PRIVATE_newMutationQueue","__PRIVATE_newLocalDocuments","__PRIVATE_oldBatches","__PRIVATE_getAllMutationBatches","__PRIVATE_promisedOldBatches","__PRIVATE_newBatches","__PRIVATE_removedBatchIds","__PRIVATE_addedBatchIds","__PRIVATE_changedKeys","__PRIVATE_getDocuments","__PRIVATE_affectedDocuments","Su","Du","Cu","__PRIVATE_existingDocs","__PRIVATE_extractBaseValue","__PRIVATE_addMutationBatch","__PRIVATE_applyToLocalDocumentSet","Dn","__PRIVATE_affected","__PRIVATE_documentBuffer","Xr","__PRIVATE_applyWriteToRemoteDocuments","__PRIVATE_performConsistencyCheck","__PRIVATE_affectedKeys","__PRIVATE_getHighestUnacknowledgedBatchId","__PRIVATE_getLastRemoteSnapshotVersion","__PRIVATE_remoteVersion","__PRIVATE_newTargetDataByTargetMap","__PRIVATE_targetDataByTarget","__PRIVATE_oldTargetData","__PRIVATE_removeMatchingKeys","__PRIVATE_addMatchingKeys","__PRIVATE_newTargetData","__PRIVATE_withResumeToken","__PRIVATE_shouldPersistTargetData","__PRIVATE_updatedKeys","__PRIVATE_existingDoc","__PRIVATE_updateLimboDocument","__PRIVATE_updateRemoteVersion","__PRIVATE_setTargetsMetadata","__PRIVATE_toMicroseconds","__PRIVATE_RESUME_TOKEN_MAX_AGE_MICROS","__PRIVATE_viewChanges","__PRIVATE_viewChange","__PRIVATE_updatedTargetData","__PRIVATE_withLastLimboFreeSnapshotVersion","__PRIVATE_afterBatchId","__PRIVATE_getNextMutationBatchAfterBatchId","__PRIVATE_getTargetData","__PRIVATE_cached","__PRIVATE_allocateTargetId","__PRIVATE_addTargetData","__PRIVATE_cachedTargetData","__PRIVATE_targetIdByTarget","__PRIVATE_keepPersistedTargetData","__PRIVATE_usePreviousResults","__PRIVATE_remoteKeys","__PRIVATE_getMatchingKeysForTargetId","ju","__PRIVATE_docKeys","__PRIVATE_promiseChain","__PRIVATE_ackVersion","__PRIVATE_collect","__PRIVATE_MultiTabLocalStore","__PRIVATE_synchronizeLastDocumentChangeReadTime","__PRIVATE_lookupMutationKeys","__PRIVATE_setNetworkEnabled","__PRIVATE_getActiveClients","__PRIVATE_getNewDocumentChanges","__PRIVATE_lastDocumentChangeReadTime","__PRIVATE_getLastReadTime","__PRIVATE_ReferenceSet","__PRIVATE_DocReference","__PRIVATE_compareByKey","__PRIVATE_compareByTargetId","__PRIVATE_refsByKey","ref","__PRIVATE_refsByTarget","__PRIVATE_removeRef","__PRIVATE_emptyKey","__PRIVATE_startRef","__PRIVATE_endRef","__PRIVATE_forEachInRange","__PRIVATE_firstRef","__PRIVATE_firstAfterOrEqual","__PRIVATE_targetOrBatchId","__PRIVATE_validateNoArgs","functionName","__PRIVATE_formatPlural","__PRIVATE_validateExactNumberOfArgs","__PRIVATE_numberOfArgs","__PRIVATE_validateAtLeastNumberOfArgs","__PRIVATE_minNumberOfArgs","__PRIVATE_validateBetweenNumberOfArgs","__PRIVATE_maxNumberOfArgs","__PRIVATE_validateArgType","__PRIVATE_argument","__PRIVATE_validateType","__PRIVATE_ordinal","__PRIVATE_validateOptionalArgType","__PRIVATE_validateNamedType","__PRIVATE_optionName","__PRIVATE_validateNamedOptionalType","__PRIVATE_validateOptionalArrayElements","__PRIVATE_typeDescription","__PRIVATE_validator","Array","__PRIVATE_valueDescription","__PRIVATE_validateArrayElements","__PRIVATE_validateNamedOptionalPropertyEquals","__PRIVATE_inputName","input","__PRIVATE_expected","__PRIVATE_expectedDescription","__PRIVATE_actualDescription","__PRIVATE_validateNamedPropertyEquals","__PRIVATE_validateStringEnum","__PRIVATE_enums","valid","__PRIVATE_isPlainObject","description","getPrototypeOf","__PRIVATE_customObjectName","__PRIVATE_tryGetCustomObjectType","__PRIVATE_validateDefined","__PRIVATE_validateOptionNames","__PRIVATE_optionNames","__PRIVATE_invalidClassError","__PRIVATE_validatePositiveNumber","num","__PRIVATE_assertUint8ArrayAvailable","__PRIVATE_assertBase64Available","__PRIVATE_base64Available","Blob","__PRIVATE_byteString","__PRIVATE__byteString","arguments","__PRIVATE_BaseFieldPath","fieldNames","__PRIVATE_minNumberOfElements","__PRIVATE_validateNamedArrayAtLeastNumberOfElements","__PRIVATE__internalPath","__PRIVATE_InternalFieldPath","__PRIVATE__DOCUMENT_ID","__PRIVATE_RESERVED","__PRIVATE_SerializableFieldValue","__PRIVATE_DeleteFieldValueImpl","__PRIVATE__methodName","context","__PRIVATE_dataSource","__PRIVATE_createError","__PRIVATE_ServerTimestampFieldValueImpl","__PRIVATE_ArrayUnionFieldValueImpl","__PRIVATE__elements","__PRIVATE_parseContext","__PRIVATE_ParseContext","fc","methodName","Ic","ignoreUndefinedProperties","__PRIVATE_parsedElements","__PRIVATE_parseData","arrayUnion","__PRIVATE_ArrayRemoveFieldValueImpl","__PRIVATE_NumericIncrementFieldValueImpl","__PRIVATE__operand","__PRIVATE_numericIncrement","FieldValue","__PRIVATE_FieldValueDelegate","__PRIVATE__delegate","__PRIVATE__toFieldTransform","GeoPoint","isFinite","__PRIVATE__lat","__PRIVATE__long","__PRIVATE_RESERVED_FIELD_REGEX","__PRIVATE_DocumentKeyReference","__PRIVATE__databaseId","__PRIVATE__key","__PRIVATE__converter","__PRIVATE_ParsedSetData","__PRIVATE_ParsedUpdateData","__PRIVATE_isWrite","settings","__PRIVATE_validatePath","configuration","__PRIVATE_childPath","__PRIVATE_contextWith","__PRIVATE_validatePathSegment","__PRIVATE_fieldDescription","__PRIVATE_UserDataReader","__PRIVATE_newSerializer","__PRIVATE_createContext","merge","mergeFields","__PRIVATE_validatePlainObject","__PRIVATE_updateData","__PRIVATE_parseObject","__PRIVATE_validatedFieldPaths","__PRIVATE_stringOrFieldPath","__PRIVATE_fieldPathFromDotSeparatedString","__PRIVATE_fieldMaskContains","__PRIVATE_covers","__PRIVATE_fieldMaskPaths","__PRIVATE_childContext","__PRIVATE_childContextForFieldPath","__PRIVATE_parsedValue","mask","moreFieldsAndValues","__PRIVATE_fieldPathFromArgument","__PRIVATE_allowArrays","__PRIVATE_looksLikeJsonObject","__PRIVATE_parseSentinelFieldValue","__PRIVATE_arrayElement","__PRIVATE_entryIndex","__PRIVATE_parsedEntry","__PRIVATE_childContextForArray","__PRIVATE_parseArray","__PRIVATE_toNumber","fromDate","bytesValue","__PRIVATE_thisDb","__PRIVATE_otherDb","__PRIVATE_parseScalarValue","__PRIVATE_childContextForField","search","__PRIVATE_fromDotSeparatedString","__PRIVATE_PersistentStream","__PRIVATE_connectionTimerId","__PRIVATE_idleTimerId","__PRIVATE_connection","__PRIVATE_credentialsProvider","__PRIVATE_performBackoff","__PRIVATE_isStarted","__PRIVATE_isOpen","__PRIVATE_idleTimer","__PRIVATE_handleIdleCloseTimer","__PRIVATE_cancelIdleCheck","stream","send","__PRIVATE_finalState","__PRIVATE_closeCount","__PRIVATE_resetToMax","__PRIVATE_invalidateToken","__PRIVATE_tearDown","__PRIVATE_onClose","__PRIVATE_dispatchIfNotClosed","__PRIVATE_getCloseGuardedDispatcher","token","__PRIVATE_startStream","__PRIVATE_rpcError","__PRIVATE_handleStreamClose","__PRIVATE_startRpc","__PRIVATE_onOpen","onMessage","__PRIVATE_startCloseCount","__PRIVATE_PersistentListenStream","credentials","__PRIVATE_openStream","__PRIVATE_watchChangeProto","__PRIVATE_fromWatchChange","snapshot","__PRIVATE_versionFromListenResponse","__PRIVATE_onWatchChange","__PRIVATE_encodedDatabaseId","addTarget","labels","__PRIVATE_toListenRequestLabels","__PRIVATE_sendRequest","__PRIVATE_PersistentWriteStream","a_","__PRIVATE_handshakeComplete_","__PRIVATE_writeMutations","__PRIVATE_responseProto","streamToken","__PRIVATE_fromWriteResults","writeResults","__PRIVATE_onMutationResult","__PRIVATE_onHandshakeComplete","writes","__PRIVATE_DatastoreImpl","__PRIVATE_terminated","__PRIVATE_rpcName","__PRIVATE_verifyNotTerminated","__PRIVATE_invokeRPC","__PRIVATE_invokeStreamingRPC","Transaction","__PRIVATE_datastore","Set","__PRIVATE_ensureCommitNotCalled","__PRIVATE_datastoreImpl","response","__PRIVATE_fromMaybeDocument","__PRIVATE_invokeBatchGetDocumentsRpc","__PRIVATE_recordVersion","write","__PRIVATE_toMutations","__PRIVATE_writtenDocs","__PRIVATE_preconditionForUpdate","__PRIVATE_lastWriteError","__PRIVATE_unwritten","__PRIVATE_readVersions","__PRIVATE_invokeCommitRpc","__PRIVATE_committed","__PRIVATE_docVersion","__PRIVATE_existingVersion","__PRIVATE_OnlineStateTracker","__PRIVATE_onlineStateHandler","__PRIVATE_watchStreamFailures","__PRIVATE_setAndBroadcast","__PRIVATE_onlineStateTimer","__PRIVATE_logClientOfflineWarningIfNecessary","__PRIVATE_clearOnlineStateTimer","__PRIVATE_newState","__PRIVATE_shouldWarnClientIsOffline","details","__PRIVATE_RemoteStore","__PRIVATE_connectivityMonitor","__PRIVATE_addCallback","__PRIVATE_canUseNetwork","__PRIVATE_restartNetwork","__PRIVATE_onlineStateTracker","__PRIVATE_watchStream","__PRIVATE_newPersistentWatchStream","s_","__PRIVATE_onWatchStreamOpen","Jc","__PRIVATE_onWatchStreamClose","n_","__PRIVATE_onWatchStreamChange","__PRIVATE_writeStream","__PRIVATE_newPersistentWriteStream","__PRIVATE_onWriteStreamOpen","__PRIVATE_onWriteStreamClose","__","__PRIVATE_onWriteHandshakeComplete","c_","enableNetwork","__PRIVATE_enableNetworkInternal","__PRIVATE_shouldStartWatchStream","__PRIVATE_startWatchStream","__PRIVATE_fillWritePipeline","__PRIVATE_disableNetworkInternal","stop","__PRIVATE_writePipeline","__PRIVATE_cleanUpWatchStreamState","__PRIVATE_listenTargets","__PRIVATE_sendWatchRequest","__PRIVATE_sendUnwatchRequest","__PRIVATE_markIdle","__PRIVATE_syncEngine","__PRIVATE_watchChangeAggregator","__PRIVATE_watch","__PRIVATE_unwatch","__PRIVATE_handleWatchStreamStart","__PRIVATE_indexedDbFailed","__PRIVATE_handleWatchStreamFailure","__PRIVATE_handleTargetError","__PRIVATE_disableNetworkUntilRecovery","__PRIVATE_handleDocumentChange","__PRIVATE_handleExistenceFilter","__PRIVATE_handleTargetChange","__PRIVATE_raiseWatchSnapshot","__PRIVATE_createRemoteEvent","__PRIVATE_requestTargetData","__PRIVATE_applyRemoteEvent","__PRIVATE_rejectListen","__PRIVATE_lastBatchIdRetrieved","__PRIVATE_canAddToWritePipeline","__PRIVATE_nextMutationBatch","__PRIVATE_addToWritePipeline","__PRIVATE_shouldStartWriteStream","__PRIVATE_startWriteStream","__PRIVATE_handshakeComplete","__PRIVATE_writeHandshake","shift","__PRIVATE_executeWithRecovery","__PRIVATE_applySuccessfulWrite","__PRIVATE_handleWriteError","__PRIVATE_inhibitBackoff","__PRIVATE_rejectFailedWrite","createWebStorageClientStateKey","createWebStorageMutationBatchKey","__PRIVATE_mutationKey","createWebStorageQueryTargetMetadataKey","__PRIVATE_MutationMetadata","__PRIVATE_mutationBatch","parse","__PRIVATE_validData","__PRIVATE_firestoreError","__PRIVATE_batchMetadata","__PRIVATE_QueryTargetMetadata","__PRIVATE_RemoteClientState","__PRIVATE_clientState","__PRIVATE_activeTargetIdsSet","__PRIVATE_SharedOnlineState","onlineState","__PRIVATE_LocalClientState","__PRIVATE_WebStorageSharedClientState","__PRIVATE_localClientId","__PRIVATE_handleWebStorageEvent","__PRIVATE_escapedPersistenceKey","storage","__PRIVATE_localClientStorageKey","__PRIVATE_sequenceNumberKey","createWebStorageSequenceNumberKey","__PRIVATE_activeClients","__PRIVATE_clientStateKeyRe","__PRIVATE_mutationBatchKeyRe","__PRIVATE_queryTargetKeyRe","__PRIVATE_onlineStateKey","createWebStorageOnlineStateKey","__PRIVATE_storageListener","__PRIVATE_storageItem","__PRIVATE_fromWebStorageEntry","__PRIVATE_persistClientState","__PRIVATE_onlineStateJSON","__PRIVATE_fromWebStorageOnlineState","__PRIVATE_handleOnlineStateEvent","__PRIVATE_earlyEvents","__PRIVATE_extractActiveQueryTargets","__PRIVATE_persistMutationState","__PRIVATE_removeMutationState","__PRIVATE_queryState","__PRIVATE_isActiveQueryTarget","__PRIVATE_localClientState","__PRIVATE_addQueryTarget","__PRIVATE_removeQueryTarget","__PRIVATE_persistQueryTargetState","__PRIVATE_addPendingMutation","__PRIVATE_persistOnlineState","storageArea","__PRIVATE_fromWebStorageClientStateKey","__PRIVATE_handleClientStateEvent","__PRIVATE_fromWebStorageClientState","__PRIVATE_mutationMetadata","__PRIVATE_fromWebStorageMutationMetadata","__PRIVATE_handleMutationBatchEvent","__PRIVATE_queryTargetMetadata","__PRIVATE_fromWebStorageQueryTargetMetadata","__PRIVATE_handleQueryTargetEvent","__PRIVATE_seqString","__PRIVATE_parsed","__PRIVATE_fromWebStorageSequenceNumber","Zl","__PRIVATE_toWebStorageJSON","__PRIVATE_mutationState","__PRIVATE_targetKey","__PRIVATE_targetMetadata","__PRIVATE_applyBatchState","__PRIVATE_applyTargetState","__PRIVATE_updatedClients","__PRIVATE_existingTargets","__PRIVATE_newTargets","__PRIVATE_addedTargets","__PRIVATE_removedTargets","__PRIVATE_applyActiveTargetsChange","__PRIVATE_activeTargets","__PRIVATE_kev","__PRIVATE_unionWith","__PRIVATE_MemorySharedClientState","__PRIVATE_localState","__PRIVATE_AddedLimboDocument","__PRIVATE_RemovedLimboDocument","__PRIVATE_View","__PRIVATE__syncedDocuments","__PRIVATE_documentSet","__PRIVATE_docComparator","pd","__PRIVATE_previousChanges","__PRIVATE_changeSet","__PRIVATE_oldDocumentSet","__PRIVATE_newMutatedKeys","__PRIVATE_newDocumentSet","__PRIVATE_needsRefill","__PRIVATE_lastDocInLimit","__PRIVATE_hasLimitToFirst","__PRIVATE_firstDocInLimit","__PRIVATE_hasLimitToLast","__PRIVATE_newMaybeDoc","__PRIVATE_oldDoc","__PRIVATE_oldDocHadPendingMutations","__PRIVATE_newDocHasPendingMutations","__PRIVATE_changeApplied","track","__PRIVATE_shouldWaitForSyncedDocument","gd","bd","Sd","ns","__PRIVATE_updateLimboDocuments","__PRIVATE_getChanges","__PRIVATE_c1","__PRIVATE_c2","__PRIVATE_compareChangeType","__PRIVATE_applyTargetChange","__PRIVATE_limboChanges","__PRIVATE_newSyncState","__PRIVATE_limboDocuments","__PRIVATE_syncState","Fd","__PRIVATE_oldLimboDocuments","__PRIVATE_shouldBeInLimbo","__PRIVATE_queryResult","__PRIVATE_computeDocChanges","__PRIVATE_fromInitialDocuments","__PRIVATE_TransactionRunner","updateFunction","__PRIVATE_runWithBackOff","__PRIVATE_tryRunUpdateFunction","commit","__PRIVATE_commitError","__PRIVATE_handleTransactionError","__PRIVATE_userPromiseError","__PRIVATE_retries","__PRIVATE_isRetryableTransactionError","__PRIVATE_QueryView","view","__PRIVATE_LimboResolution","__PRIVATE_SyncEngine","__PRIVATE_remoteStore","__PRIVATE_sharedClientState","__PRIVATE_maxConcurrentLimboResolutions","q","__PRIVATE_forSyncEngine","if","__PRIVATE_syncEngineListener","__PRIVATE_assertSubscribed","__PRIVATE_queryView","__PRIVATE_queryViewsByQuery","__PRIVATE_addLocalQueryTarget","__PRIVATE_computeInitialSnapshot","__PRIVATE_allocateTarget","__PRIVATE_initializeViewAndComputeSnapshot","__PRIVATE_isPrimaryClient","listen","__PRIVATE_executeQuery","__PRIVATE_viewDocChanges","__PRIVATE_synthesizedTargetChange","__PRIVATE_updateTrackedLimbos","__PRIVATE_queriesByTarget","__PRIVATE_queries","__PRIVATE_removeLocalQueryTarget","__PRIVATE_releaseTarget","__PRIVATE_clearQueryState","__PRIVATE_unlisten","__PRIVATE_removeAndCleanupTarget","__PRIVATE_userCallback","__PRIVATE_localWrite","__PRIVATE_addMutationCallback","__PRIVATE_emitNewSnapsAndNotifyLocalStore","__PRIVATE_run","__PRIVATE_limboResolution","__PRIVATE_activeLimboResolutionsByTarget","__PRIVATE_receivedDocument","source","__PRIVATE_newViewSnapshots","__PRIVATE_applyOnlineStateChange","__PRIVATE_onOnlineStateChange","__PRIVATE_updateQueryState","__PRIVATE_limboKey","__PRIVATE_activeLimboTargetsByKey","__PRIVATE_pumpEnqueuedLimboResolutions","__PRIVATE_mutationBatchResult","__PRIVATE_acknowledgeBatch","__PRIVATE_processUserCallback","__PRIVATE_triggerPendingWritesCallbacks","__PRIVATE_updateMutationState","__PRIVATE_rejectBatch","__PRIVATE_highestBatchId","__PRIVATE_callbacks","__PRIVATE_pendingWritesCallbacks","__PRIVATE_errorMessage","clear","__PRIVATE_newCallbacks","__PRIVATE_mutationUserCallbacks","__PRIVATE_toKey","__PRIVATE_onWatchError","__PRIVATE_limboDocumentRefs","__PRIVATE_removeReferencesForId","__PRIVATE_removeLimboTarget","__PRIVATE_limboTargetId","__PRIVATE_limboChange","__PRIVATE_trackLimboChange","__PRIVATE_enqueuedLimboResolutions","__PRIVATE_limboTargetIdGenerator","__PRIVATE_newSnaps","__PRIVATE_docChangesInAllViews","__PRIVATE_queriesProcessed","__PRIVATE_fromSnapshot","__PRIVATE_notifyLocalViewChanges","__PRIVATE_fnName","__PRIVATE_handleUserChange","__PRIVATE_rejectOutstandingPendingWritesCallbacks","__PRIVATE_handleCredentialChange","disableNetwork","__PRIVATE_keySet","__PRIVATE_syncedDocuments","__PRIVATE_MultiTabSyncEngine","__PRIVATE__isPrimaryClient","__PRIVATE_synchronizeWithPersistedState","__PRIVATE_setOnlineState","__PRIVATE_batchState","__PRIVATE_lookupMutationDocuments","__PRIVATE_removeCachedMutationBatchMetadata","__PRIVATE_getAllActiveQueryTargets","__PRIVATE_activeQueries","__PRIVATE_synchronizeQueryViewsAndRaiseSnapshots","__PRIVATE_applyPrimaryState","__PRIVATE_isLocalQueryTarget","__PRIVATE_resetLimboDocuments","__PRIVATE_removeAllReferences","__PRIVATE_transitionToPrimary","__PRIVATE_synchronizeViewAndComputeSnapshot","__PRIVATE_getTarget","__PRIVATE_synthesizeTargetToQuery","__PRIVATE_synthesizedRemoteEvent","__PRIVATE_createSynthesizedRemoteEventForCurrentChange","__PRIVATE_removed","__PRIVATE_QueryListenersInfo","__PRIVATE_EventManager","subscribe","__PRIVATE_firstListen","__PRIVATE_queryInfo","__PRIVATE_viewSnap","onError","__PRIVATE_listeners","__PRIVATE_onViewSnapshot","__PRIVATE_raiseSnapshotsInSyncEvent","__PRIVATE_lastListen","__PRIVATE_viewSnaps","__PRIVATE_raisedEvent","observer","__PRIVATE_snapshotsInSyncListeners","__PRIVATE_QueryListener","__PRIVATE_queryObserver","__PRIVATE_snap","includeMetadataChanges","__PRIVATE_raisedInitialEvent","__PRIVATE_shouldRaiseEvent","__PRIVATE_shouldRaiseInitialEvent","__PRIVATE_raiseInitialEvent","__PRIVATE_maybeOnline","__PRIVATE_waitForSyncWhenOnline","__PRIVATE_hasPendingWritesChanged","__PRIVATE_IndexFreeQueryEngine","__PRIVATE_localDocumentsView","__PRIVATE_matchesAllDocuments","__PRIVATE_executeFullCollectionScan","__PRIVATE_previousResults","__PRIVATE_applyQuery","__PRIVATE_updatedResults","__PRIVATE_sortedPreviousResults","__PRIVATE_limboFreeSnapshotVersion","__PRIVATE_docAtLimitEdge","__PRIVATE_MemoryMutationQueue","__PRIVATE_batchesByDocumentKey","__PRIVATE_findMutationBatch","__PRIVATE_rawIndex","__PRIVATE_indexOfBatchId","__PRIVATE_findMutationBatches","prefix","__PRIVATE_startPath","__PRIVATE_rowKeyPath","__PRIVATE_indexOfExistingBatchId","__PRIVATE_references","__PRIVATE_MemoryRemoteDocumentCache","__PRIVATE_sizer","__PRIVATE_currentSize","iterator","__PRIVATE_MemoryTargetCache","__PRIVATE_forTargetCache","__PRIVATE_highestSequenceNumber","__PRIVATE_removals","__PRIVATE_addReferences","__PRIVATE_removeReferences","__PRIVATE_matchingKeys","__PRIVATE_referencesForId","__PRIVATE_MemoryPersistence","__PRIVATE_referenceDelegateFactory","__PRIVATE_documentSize","__PRIVATE_mutationQueues","__PRIVATE_MemoryTransaction","__PRIVATE_onTransactionStarted","__PRIVATE_onTransactionCommitted","__PRIVATE_or","__PRIVATE_MemoryEagerDelegate","_T","__PRIVATE__orphanedDocuments","__PRIVATE_localViewReferences","__PRIVATE_orphanedDocuments","__PRIVATE_isReferenced","__PRIVATE_MEMORY_ONLY_PERSISTENCE_ERROR_MESSAGE","__PRIVATE_MemoryComponentProvider","__PRIVATE_cfg","__PRIVATE_createSharedClientState","__PRIVATE_createPersistence","__PRIVATE_gcScheduler","__PRIVATE_createGarbageCollectionScheduler","__PRIVATE_createLocalStore","__PRIVATE_createRemoteStore","__PRIVATE_createSyncEngine","__PRIVATE_eventManager","__PRIVATE_createEventManager","__PRIVATE_persistenceSettings","__PRIVATE_durable","__PRIVATE_factory","__PRIVATE_newConnectivityMonitor","__PRIVATE_IndexedDbComponentProvider","initialize","__PRIVATE_setPrimaryStateListener","__PRIVATE_buildStoragePrefix","synchronizeTabs","__PRIVATE_withCacheSize","cacheSizeBytes","clearPersistence","__PRIVATE_FirestoreClient","__PRIVATE_newId","__PRIVATE_componentProvider","__PRIVATE_initializationDone","__PRIVATE_persistenceResult","__PRIVATE_initialized","__PRIVATE_setChangeListener","__PRIVATE_initializeComponents","__PRIVATE_loadConnection","__PRIVATE_newDatastore","Ra","yT","w_","PT","Kd","gT","__PRIVATE_eventMgr","__PRIVATE_setDatabaseDeletedListener","terminate","__PRIVATE_canFallback","console","warn","VT","DOMException","__PRIVATE_isShuttingDown","__PRIVATE_verifyOperationInProgress","__PRIVATE_enqueueAndInitiateShutdown","__PRIVATE_removeChangeListener","__PRIVATE_registerPendingWritesCallback","__PRIVATE_clientTerminated","__PRIVATE_readDocument","__PRIVATE_addSnapshotsInSyncListener","__PRIVATE_removeSnapshotsInSyncListener","CT","__PRIVATE_AsyncObserver","__PRIVATE_scheduleEvent","muted","eventHandler","__PRIVATE_isPartialObserver","__PRIVATE_methods","object","method","__PRIVATE_implementsAnyMethods","__PRIVATE_UserDataWriter","timestampsInSnapshots","__PRIVATE_serverTimestampBehavior","__PRIVATE_referenceFactory","__PRIVATE_convertTimestamp","__PRIVATE_convertServerTimestamp","__PRIVATE_convertReference","__PRIVATE_convertGeoPoint","__PRIVATE_convertArray","__PRIVATE_convertObject","__PRIVATE_convertValue","__PRIVATE_getPreviousValue","__PRIVATE_normalizedValue","toDate","__PRIVATE_resourcePath","CACHE_SIZE_UNLIMITED","__PRIVATE_FirestoreSettings","__PRIVATE_MINIMUM_CACHE_SIZE_BYTES","experimentalForceLongPolling","Firestore","__PRIVATE_databaseIdOrApp","__PRIVATE_ensureClientConfigured","__PRIVATE__firestoreClient","app","__PRIVATE__firebaseApp","__PRIVATE_databaseIdFromApp","__PRIVATE__persistenceKey","__PRIVATE__credentials","external","__PRIVATE__componentProvider","__PRIVATE__settings","tE","__PRIVATE__userDataReader","__PRIVATE_settingsLiteral","__PRIVATE_newSettings","__PRIVATE_makeCredentialsProvider","experimentalForceOwningTab","experimentalTabSynchronization","__PRIVATE_configureClient","Bh","__PRIVATE__queue","__PRIVATE_enqueueAndForgetEvenAfterShutdown","__PRIVATE_makeDatabaseInfo","_removeServiceInstance","rE","waitForPendingWrites","arg","__PRIVATE_onSnapshotsInSyncInternal","__PRIVATE_asyncObserver","__PRIVATE_mute","__PRIVATE_pathString","CollectionReference","DocumentReference","__PRIVATE_forPath","__PRIVATE_InternalQuery","WriteBatch","SILENT","WARN","INFO","VERBOSE","level","__PRIVATE_newLevel","setLogLevel","__PRIVATE__firestore","__PRIVATE__transaction","documentRef","__PRIVATE_validateReference","__PRIVATE_lookup","DocumentSnapshot","__PRIVATE_validateSetOptions","__PRIVATE_convertedValue","__PRIVATE_applyFirestoreDataConverter","__PRIVATE__dataReader","__PRIVATE_parseSetData","__PRIVATE_fieldOrUpdateData","__PRIVATE_ExternalFieldPath","__PRIVATE_parseUpdateVarargs","__PRIVATE_parseUpdateData","__PRIVATE_verifyNotCommitted","__PRIVATE__mutations","__PRIVATE__committed","firestore","converter","__PRIVATE_currArg","__PRIVATE_internalOptions","complete","__PRIVATE_onSnapshotInternal","__PRIVATE_errHandler","__PRIVATE_internalListener","__PRIVATE_validateGetOptions","__PRIVATE_getDocumentFromLocalCache","__PRIVATE_getViaSnapshotListener","qf","SnapshotMetadata","__PRIVATE__document","__PRIVATE__fromCache","__PRIVATE__hasPendingWrites","__PRIVATE_validateSnapshotOptions","QueryDocumentSnapshot","fromFirestore","__PRIVATE__areTimestampsInSnapshotsEnabled","serverTimestamps","__PRIVATE__query","opStr","__PRIVATE_fieldValue","__PRIVATE_validateDisjunctiveFilterElements","__PRIVATE_referenceList","__PRIVATE_parseDocumentIdValue","__PRIVATE_parseQueryValue","__PRIVATE_validateNewFilter","__PRIVATE_addFilter","directionStr","__PRIVATE_validateNewOrderBy","__PRIVATE_addOrderBy","__PRIVATE_withLimitToFirst","__PRIVATE_withLimitToLast","__PRIVATE_docOrField","__PRIVATE_boundFromDocOrFields","__PRIVATE_withStartAt","__PRIVATE_withEndAt","__PRIVATE_boundFromDocument","__PRIVATE_allFields","__PRIVATE_boundFromFields","components","__PRIVATE_rawValue","__PRIVATE_wrapped","__PRIVATE_validateHasExplicitOrderByForLimitToLast","QuerySnapshot","__PRIVATE_firestoreClient","__PRIVATE_getDocumentsFromLocalCache","__PRIVATE_documentIdValue","operator","__PRIVATE_arrayOps","__PRIVATE_disjunctiveOps","__PRIVATE_isArrayOp","__PRIVATE_isDisjunctiveOp","__PRIVATE_existingField","__PRIVATE_validateOrderByAndInequalityMatch","__PRIVATE_conflictingOp","__PRIVATE_findFilterOperator","__PRIVATE_inequality","__PRIVATE__originalQuery","__PRIVATE__snapshot","thisArg","__PRIVATE_convertToDocumentImpl","__PRIVATE__cachedChanges","__PRIVATE__cachedChangesIncludeMetadataChanges","__PRIVATE_lastDoc","oldIndex","newIndex","__PRIVATE_indexTracker","__PRIVATE_resultChangeType","__PRIVATE_changesFromSnapshot","__PRIVATE__path","toFirestore","__PRIVATE_docRef","__PRIVATE_makeConstructorPrivate","__PRIVATE_cls","__PRIVATE_optionalMessage","__PRIVATE_PublicConstructor","assign","__PRIVATE_PublicFirestore","__PRIVATE_PublicTransaction","__PRIVATE_PublicWriteBatch","__PRIVATE_PublicDocumentReference","__PRIVATE_PublicDocumentSnapshot","__PRIVATE_PublicQueryDocumentSnapshot","__PRIVATE_PublicQuery","__PRIVATE_PublicQuerySnapshot","__PRIVATE_PublicCollectionReference","__PRIVATE_PublicFieldValue","__PRIVATE_PublicBlob","__PRIVATE_firestoreNamespace","__PRIVATE_NoopConnectivityMonitor","__PRIVATE_BrowserConnectivityMonitor","__PRIVATE_onNetworkAvailable","__PRIVATE_onNetworkUnavailable","__PRIVATE_configureNetworkMonitoring","__PRIVATE_networkAvailableListener","__PRIVATE_networkUnavailableListener","__PRIVATE_StreamBridge","__PRIVATE_sendFn","__PRIVATE_closeFn","__PRIVATE_wrappedOnOpen","__PRIVATE_wrappedOnClose","__PRIVATE_wrappedOnMessage","__PRIVATE_RPC_NAME_REST_MAPPING","BatchGetDocuments","Commit","__PRIVATE_X_GOOG_API_CLIENT_VALUE","__PRIVATE_WebChannelConnection","info","__PRIVATE_baseUrl","__PRIVATE_header","url","__PRIVATE_makeUrl","__PRIVATE_xhr","XhrIo","listenOnce","EventType","COMPLETE","getLastErrorCode","ErrorCode","NO_ERROR","json","getResponseJson","TIMEOUT","HTTP_ERROR","getStatus","getResponseText","__PRIVATE_responseError","__PRIVATE_firestoreErrorCode","__PRIVATE_serverError","toLowerCase","__PRIVATE_mapCodeFromHttpResponseErrorStatus","__PRIVATE_jsonObj","__PRIVATE_requestString","Content-Type","__PRIVATE_modifyHeadersForRequest","__PRIVATE_urlParts","__PRIVATE_webchannelTransport","createWebChannelTransport","httpSessionIdParam","initMessageHeaders","messageUrlParams","sendRawJson","supportsCrossDomainXhr","internalChannelParams","forwardChannelRequestTimeoutMs","isMobileCordova","isReactNative","isElectron","isIE","isUWP","isBrowserExtension","httpHeadersOverwriteParam","channel","createWebChannel","__PRIVATE_opened","closed","__PRIVATE_streamBridge","qE","UE","__PRIVATE_unguardedEventListen","param","WebChannel","OPEN","CLOSE","__PRIVATE_callOnClose","__PRIVATE_logWarn","MESSAGE","__PRIVATE_msgData","__PRIVATE_msgDataOrError","__PRIVATE_mapCodeFromRpcStatus","__PRIVATE_callOnMessage","__PRIVATE_callOnOpen","__PRIVATE_urlRpcName","__PRIVATE_registerFirestore","__PRIVATE_firestoreFactory","registerComponent","Component","container","getProvider","setServiceProps","__PRIVATE_configureForFirebase","registerVersion","__PRIVATE_setPlatform","hi","__PRIVATE_encoded","raw","__PRIVATE_nBytes","crypto","self","getRandomValues"],"mappings":"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"}